/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package visGrid.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import visGrid.util.VisGridAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class VisGridItemProviderAdapterFactory extends VisGridAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public VisGridItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Climate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClimateItemProvider climateItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Climate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClimateAdapter() {
		if (climateItemProvider == null) {
			climateItemProvider = new ClimateItemProvider(this);
		}

		return climateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Csv_reader} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Csv_readerItemProvider csv_readerItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Csv_reader}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCsv_readerAdapter() {
		if (csv_readerItemProvider == null) {
			csv_readerItemProvider = new Csv_readerItemProvider(this);
		}

		return csv_readerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Diesel_dg} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Diesel_dgItemProvider diesel_dgItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Diesel_dg}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiesel_dgAdapter() {
		if (diesel_dgItemProvider == null) {
			diesel_dgItemProvider = new Diesel_dgItemProvider(this);
		}

		return diesel_dgItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Energy_storage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Energy_storageItemProvider energy_storageItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Energy_storage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnergy_storageAdapter() {
		if (energy_storageItemProvider == null) {
			energy_storageItemProvider = new Energy_storageItemProvider(this);
		}

		return energy_storageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Inverter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InverterItemProvider inverterItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Inverter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInverterAdapter() {
		if (inverterItemProvider == null) {
			inverterItemProvider = new InverterItemProvider(this);
		}

		return inverterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Dc_dc_converter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Dc_dc_converterItemProvider dc_dc_converterItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Dc_dc_converter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDc_dc_converterAdapter() {
		if (dc_dc_converterItemProvider == null) {
			dc_dc_converterItemProvider = new Dc_dc_converterItemProvider(this);
		}

		return dc_dc_converterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Auction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AuctionItemProvider auctionItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Auction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAuctionAdapter() {
		if (auctionItemProvider == null) {
			auctionItemProvider = new AuctionItemProvider(this);
		}

		return auctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Controller} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControllerItemProvider controllerItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Controller}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControllerAdapter() {
		if (controllerItemProvider == null) {
			controllerItemProvider = new ControllerItemProvider(this);
		}

		return controllerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Controller2} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Controller2ItemProvider controller2ItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Controller2}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createController2Adapter() {
		if (controller2ItemProvider == null) {
			controller2ItemProvider = new Controller2ItemProvider(this);
		}

		return controller2ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Capbank} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CapbankItemProvider capbankItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Capbank}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCapbankAdapter() {
		if (capbankItemProvider == null) {
			capbankItemProvider = new CapbankItemProvider(this);
		}

		return capbankItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Comm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CommItemProvider commItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Comm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCommAdapter() {
		if (commItemProvider == null) {
			commItemProvider = new CommItemProvider(this);
		}

		return commItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Capacitor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CapacitorItemProvider capacitorItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Capacitor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCapacitorAdapter() {
		if (capacitorItemProvider == null) {
			capacitorItemProvider = new CapacitorItemProvider(this);
		}

		return capacitorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Line} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LineItemProvider lineItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Line}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLineAdapter() {
		if (lineItemProvider == null) {
			lineItemProvider = new LineItemProvider(this);
		}

		return lineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Line_spacing} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Line_spacingItemProvider line_spacingItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Line_spacing}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLine_spacingAdapter() {
		if (line_spacingItemProvider == null) {
			line_spacingItemProvider = new Line_spacingItemProvider(this);
		}

		return line_spacingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Overhead_line} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Overhead_lineItemProvider overhead_lineItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Overhead_line}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOverhead_lineAdapter() {
		if (overhead_lineItemProvider == null) {
			overhead_lineItemProvider = new Overhead_lineItemProvider(this);
		}

		return overhead_lineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Underground_line} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Underground_lineItemProvider underground_lineItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Underground_line}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnderground_lineAdapter() {
		if (underground_lineItemProvider == null) {
			underground_lineItemProvider = new Underground_lineItemProvider(this);
		}

		return underground_lineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Overhead_line_conductor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Overhead_line_conductorItemProvider overhead_line_conductorItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Overhead_line_conductor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOverhead_line_conductorAdapter() {
		if (overhead_line_conductorItemProvider == null) {
			overhead_line_conductorItemProvider = new Overhead_line_conductorItemProvider(this);
		}

		return overhead_line_conductorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Underground_line_conductor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Underground_line_conductorItemProvider underground_line_conductorItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Underground_line_conductor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnderground_line_conductorAdapter() {
		if (underground_line_conductorItemProvider == null) {
			underground_line_conductorItemProvider = new Underground_line_conductorItemProvider(this);
		}

		return underground_line_conductorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Line_configuration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Line_configurationItemProvider line_configurationItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Line_configuration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLine_configurationAdapter() {
		if (line_configurationItemProvider == null) {
			line_configurationItemProvider = new Line_configurationItemProvider(this);
		}

		return line_configurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Transformer_configuration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Transformer_configurationItemProvider transformer_configurationItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Transformer_configuration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransformer_configurationAdapter() {
		if (transformer_configurationItemProvider == null) {
			transformer_configurationItemProvider = new Transformer_configurationItemProvider(this);
		}

		return transformer_configurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Load} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LoadItemProvider loadItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Load}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLoadAdapter() {
		if (loadItemProvider == null) {
			loadItemProvider = new LoadItemProvider(this);
		}

		return loadItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Regulator_configuration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Regulator_configurationItemProvider regulator_configurationItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Regulator_configuration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRegulator_configurationAdapter() {
		if (regulator_configurationItemProvider == null) {
			regulator_configurationItemProvider = new Regulator_configurationItemProvider(this);
		}

		return regulator_configurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Triplex_node} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Triplex_nodeItemProvider triplex_nodeItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Triplex_node}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTriplex_nodeAdapter() {
		if (triplex_nodeItemProvider == null) {
			triplex_nodeItemProvider = new Triplex_nodeItemProvider(this);
		}

		return triplex_nodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Triplex_meter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Triplex_meterItemProvider triplex_meterItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Triplex_meter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTriplex_meterAdapter() {
		if (triplex_meterItemProvider == null) {
			triplex_meterItemProvider = new Triplex_meterItemProvider(this);
		}

		return triplex_meterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Triplex_line} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Triplex_lineItemProvider triplex_lineItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Triplex_line}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTriplex_lineAdapter() {
		if (triplex_lineItemProvider == null) {
			triplex_lineItemProvider = new Triplex_lineItemProvider(this);
		}

		return triplex_lineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Triplex_line_configuration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Triplex_line_configurationItemProvider triplex_line_configurationItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Triplex_line_configuration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTriplex_line_configurationAdapter() {
		if (triplex_line_configurationItemProvider == null) {
			triplex_line_configurationItemProvider = new Triplex_line_configurationItemProvider(this);
		}

		return triplex_line_configurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Triplex_line_conductor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Triplex_line_conductorItemProvider triplex_line_conductorItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Triplex_line_conductor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTriplex_line_conductorAdapter() {
		if (triplex_line_conductorItemProvider == null) {
			triplex_line_conductorItemProvider = new Triplex_line_conductorItemProvider(this);
		}

		return triplex_line_conductorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Switch} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SwitchItemProvider switchItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Switch}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSwitchAdapter() {
		if (switchItemProvider == null) {
			switchItemProvider = new SwitchItemProvider(this);
		}

		return switchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Substation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubstationItemProvider substationItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Substation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubstationAdapter() {
		if (substationItemProvider == null) {
			substationItemProvider = new SubstationItemProvider(this);
		}

		return substationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Pqload} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PqloadItemProvider pqloadItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Pqload}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPqloadAdapter() {
		if (pqloadItemProvider == null) {
			pqloadItemProvider = new PqloadItemProvider(this);
		}

		return pqloadItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Voltdump} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VoltdumpItemProvider voltdumpItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Voltdump}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVoltdumpAdapter() {
		if (voltdumpItemProvider == null) {
			voltdumpItemProvider = new VoltdumpItemProvider(this);
		}

		return voltdumpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Series_reactor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Series_reactorItemProvider series_reactorItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Series_reactor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSeries_reactorAdapter() {
		if (series_reactorItemProvider == null) {
			series_reactorItemProvider = new Series_reactorItemProvider(this);
		}

		return series_reactorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Restoration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RestorationItemProvider restorationItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Restoration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRestorationAdapter() {
		if (restorationItemProvider == null) {
			restorationItemProvider = new RestorationItemProvider(this);
		}

		return restorationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Frequency_gen} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Frequency_genItemProvider frequency_genItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Frequency_gen}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFrequency_genAdapter() {
		if (frequency_genItemProvider == null) {
			frequency_genItemProvider = new Frequency_genItemProvider(this);
		}

		return frequency_genItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Volt_var_control} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Volt_var_controlItemProvider volt_var_controlItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Volt_var_control}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVolt_var_controlAdapter() {
		if (volt_var_controlItemProvider == null) {
			volt_var_controlItemProvider = new Volt_var_controlItemProvider(this);
		}

		return volt_var_controlItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Fault_check} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Fault_checkItemProvider fault_checkItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Fault_check}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFault_checkAdapter() {
		if (fault_checkItemProvider == null) {
			fault_checkItemProvider = new Fault_checkItemProvider(this);
		}

		return fault_checkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Motor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MotorItemProvider motorItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Motor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMotorAdapter() {
		if (motorItemProvider == null) {
			motorItemProvider = new MotorItemProvider(this);
		}

		return motorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Billdump} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BilldumpItemProvider billdumpItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Billdump}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBilldumpAdapter() {
		if (billdumpItemProvider == null) {
			billdumpItemProvider = new BilldumpItemProvider(this);
		}

		return billdumpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Residential_enduse} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Residential_enduseItemProvider residential_enduseItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Residential_enduse}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResidential_enduseAdapter() {
		if (residential_enduseItemProvider == null) {
			residential_enduseItemProvider = new Residential_enduseItemProvider(this);
		}

		return residential_enduseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.House_a} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected House_aItemProvider house_aItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.House_a}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHouse_aAdapter() {
		if (house_aItemProvider == null) {
			house_aItemProvider = new House_aItemProvider(this);
		}

		return house_aItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.House} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HouseItemProvider houseItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.House}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHouseAdapter() {
		if (houseItemProvider == null) {
			houseItemProvider = new HouseItemProvider(this);
		}

		return houseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Waterheater} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WaterheaterItemProvider waterheaterItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Waterheater}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWaterheaterAdapter() {
		if (waterheaterItemProvider == null) {
			waterheaterItemProvider = new WaterheaterItemProvider(this);
		}

		return waterheaterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Lights} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LightsItemProvider lightsItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Lights}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLightsAdapter() {
		if (lightsItemProvider == null) {
			lightsItemProvider = new LightsItemProvider(this);
		}

		return lightsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Refrigerator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RefrigeratorItemProvider refrigeratorItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Refrigerator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRefrigeratorAdapter() {
		if (refrigeratorItemProvider == null) {
			refrigeratorItemProvider = new RefrigeratorItemProvider(this);
		}

		return refrigeratorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Clotheswasher} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClotheswasherItemProvider clotheswasherItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Clotheswasher}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClotheswasherAdapter() {
		if (clotheswasherItemProvider == null) {
			clotheswasherItemProvider = new ClotheswasherItemProvider(this);
		}

		return clotheswasherItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Dishwasher} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DishwasherItemProvider dishwasherItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Dishwasher}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDishwasherAdapter() {
		if (dishwasherItemProvider == null) {
			dishwasherItemProvider = new DishwasherItemProvider(this);
		}

		return dishwasherItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Occupantload} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OccupantloadItemProvider occupantloadItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Occupantload}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOccupantloadAdapter() {
		if (occupantloadItemProvider == null) {
			occupantloadItemProvider = new OccupantloadItemProvider(this);
		}

		return occupantloadItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Plugload} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlugloadItemProvider plugloadItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Plugload}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlugloadAdapter() {
		if (plugloadItemProvider == null) {
			plugloadItemProvider = new PlugloadItemProvider(this);
		}

		return plugloadItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Microwave} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MicrowaveItemProvider microwaveItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Microwave}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMicrowaveAdapter() {
		if (microwaveItemProvider == null) {
			microwaveItemProvider = new MicrowaveItemProvider(this);
		}

		return microwaveItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Range} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RangeItemProvider rangeItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Range}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRangeAdapter() {
		if (rangeItemProvider == null) {
			rangeItemProvider = new RangeItemProvider(this);
		}

		return rangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Freezer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FreezerItemProvider freezerItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Freezer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFreezerAdapter() {
		if (freezerItemProvider == null) {
			freezerItemProvider = new FreezerItemProvider(this);
		}

		return freezerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Dryer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DryerItemProvider dryerItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Dryer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDryerAdapter() {
		if (dryerItemProvider == null) {
			dryerItemProvider = new DryerItemProvider(this);
		}

		return dryerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Evcharger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EvchargerItemProvider evchargerItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Evcharger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEvchargerAdapter() {
		if (evchargerItemProvider == null) {
			evchargerItemProvider = new EvchargerItemProvider(this);
		}

		return evchargerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.ZIPload} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ZIPloadItemProvider ziPloadItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.ZIPload}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createZIPloadAdapter() {
		if (ziPloadItemProvider == null) {
			ziPloadItemProvider = new ZIPloadItemProvider(this);
		}

		return ziPloadItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Player} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlayerItemProvider playerItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Player}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlayerAdapter() {
		if (playerItemProvider == null) {
			playerItemProvider = new PlayerItemProvider(this);
		}

		return playerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Shaper} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ShaperItemProvider shaperItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Shaper}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createShaperAdapter() {
		if (shaperItemProvider == null) {
			shaperItemProvider = new ShaperItemProvider(this);
		}

		return shaperItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Recorder} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RecorderItemProvider recorderItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Recorder}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRecorderAdapter() {
		if (recorderItemProvider == null) {
			recorderItemProvider = new RecorderItemProvider(this);
		}

		return recorderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Collector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CollectorItemProvider collectorItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Collector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCollectorAdapter() {
		if (collectorItemProvider == null) {
			collectorItemProvider = new CollectorItemProvider(this);
		}

		return collectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Histogram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HistogramItemProvider histogramItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Histogram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHistogramAdapter() {
		if (histogramItemProvider == null) {
			histogramItemProvider = new HistogramItemProvider(this);
		}

		return histogramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Weather} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WeatherItemProvider weatherItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Weather}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWeatherAdapter() {
		if (weatherItemProvider == null) {
			weatherItemProvider = new WeatherItemProvider(this);
		}

		return weatherItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Office} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OfficeItemProvider officeItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Office}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOfficeAdapter() {
		if (officeItemProvider == null) {
			officeItemProvider = new OfficeItemProvider(this);
		}

		return officeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Multizone} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MultizoneItemProvider multizoneItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Multizone}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMultizoneAdapter() {
		if (multizoneItemProvider == null) {
			multizoneItemProvider = new MultizoneItemProvider(this);
		}

		return multizoneItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Windturb_dg} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Windturb_dgItemProvider windturb_dgItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Windturb_dg}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWindturb_dgAdapter() {
		if (windturb_dgItemProvider == null) {
			windturb_dgItemProvider = new Windturb_dgItemProvider(this);
		}

		return windturb_dgItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Power_electronics} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Power_electronicsItemProvider power_electronicsItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Power_electronics}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPower_electronicsAdapter() {
		if (power_electronicsItemProvider == null) {
			power_electronicsItemProvider = new Power_electronicsItemProvider(this);
		}

		return power_electronicsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Rectifier} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RectifierItemProvider rectifierItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Rectifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRectifierAdapter() {
		if (rectifierItemProvider == null) {
			rectifierItemProvider = new RectifierItemProvider(this);
		}

		return rectifierItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Microturbine} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MicroturbineItemProvider microturbineItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Microturbine}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMicroturbineAdapter() {
		if (microturbineItemProvider == null) {
			microturbineItemProvider = new MicroturbineItemProvider(this);
		}

		return microturbineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Battery} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BatteryItemProvider batteryItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Battery}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBatteryAdapter() {
		if (batteryItemProvider == null) {
			batteryItemProvider = new BatteryItemProvider(this);
		}

		return batteryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Solar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SolarItemProvider solarItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Solar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSolarAdapter() {
		if (solarItemProvider == null) {
			solarItemProvider = new SolarItemProvider(this);
		}

		return solarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Stubauction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StubauctionItemProvider stubauctionItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Stubauction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStubauctionAdapter() {
		if (stubauctionItemProvider == null) {
			stubauctionItemProvider = new StubauctionItemProvider(this);
		}

		return stubauctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Link} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkItemProvider linkItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Link}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkAdapter() {
		if (linkItemProvider == null) {
			linkItemProvider = new LinkItemProvider(this);
		}

		return linkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Fuse} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FuseItemProvider fuseItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Fuse}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFuseAdapter() {
		if (fuseItemProvider == null) {
			fuseItemProvider = new FuseItemProvider(this);
		}

		return fuseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Relay} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelayItemProvider relayItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Relay}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelayAdapter() {
		if (relayItemProvider == null) {
			relayItemProvider = new RelayItemProvider(this);
		}

		return relayItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Regulator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RegulatorItemProvider regulatorItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Regulator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRegulatorAdapter() {
		if (regulatorItemProvider == null) {
			regulatorItemProvider = new RegulatorItemProvider(this);
		}

		return regulatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Transformer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransformerItemProvider transformerItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Transformer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransformerAdapter() {
		if (transformerItemProvider == null) {
			transformerItemProvider = new TransformerItemProvider(this);
		}

		return transformerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Meter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MeterItemProvider meterItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Meter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMeterAdapter() {
		if (meterItemProvider == null) {
			meterItemProvider = new MeterItemProvider(this);
		}

		return meterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Generator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GeneratorItemProvider generatorItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Generator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGeneratorAdapter() {
		if (generatorItemProvider == null) {
			generatorItemProvider = new GeneratorItemProvider(this);
		}

		return generatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Plc} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlcItemProvider plcItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Plc}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlcAdapter() {
		if (plcItemProvider == null) {
			plcItemProvider = new PlcItemProvider(this);
		}

		return plcItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Node} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NodeItemProvider nodeItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Node}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNodeAdapter() {
		if (nodeItemProvider == null) {
			nodeItemProvider = new NodeItemProvider(this);
		}

		return nodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Connection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConnectionItemProvider connectionItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Connection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConnectionAdapter() {
		if (connectionItemProvider == null) {
			connectionItemProvider = new ConnectionItemProvider(this);
		}

		return connectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link visGrid.Grid} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GridItemProvider gridItemProvider;

	/**
	 * This creates an adapter for a {@link visGrid.Grid}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGridAdapter() {
		if (gridItemProvider == null) {
			gridItemProvider = new GridItemProvider(this);
		}

		return gridItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (climateItemProvider != null) climateItemProvider.dispose();
		if (csv_readerItemProvider != null) csv_readerItemProvider.dispose();
		if (diesel_dgItemProvider != null) diesel_dgItemProvider.dispose();
		if (energy_storageItemProvider != null) energy_storageItemProvider.dispose();
		if (inverterItemProvider != null) inverterItemProvider.dispose();
		if (dc_dc_converterItemProvider != null) dc_dc_converterItemProvider.dispose();
		if (auctionItemProvider != null) auctionItemProvider.dispose();
		if (controllerItemProvider != null) controllerItemProvider.dispose();
		if (controller2ItemProvider != null) controller2ItemProvider.dispose();
		if (capbankItemProvider != null) capbankItemProvider.dispose();
		if (commItemProvider != null) commItemProvider.dispose();
		if (capacitorItemProvider != null) capacitorItemProvider.dispose();
		if (lineItemProvider != null) lineItemProvider.dispose();
		if (line_spacingItemProvider != null) line_spacingItemProvider.dispose();
		if (overhead_lineItemProvider != null) overhead_lineItemProvider.dispose();
		if (underground_lineItemProvider != null) underground_lineItemProvider.dispose();
		if (overhead_line_conductorItemProvider != null) overhead_line_conductorItemProvider.dispose();
		if (underground_line_conductorItemProvider != null) underground_line_conductorItemProvider.dispose();
		if (line_configurationItemProvider != null) line_configurationItemProvider.dispose();
		if (transformer_configurationItemProvider != null) transformer_configurationItemProvider.dispose();
		if (loadItemProvider != null) loadItemProvider.dispose();
		if (regulator_configurationItemProvider != null) regulator_configurationItemProvider.dispose();
		if (triplex_nodeItemProvider != null) triplex_nodeItemProvider.dispose();
		if (triplex_meterItemProvider != null) triplex_meterItemProvider.dispose();
		if (triplex_lineItemProvider != null) triplex_lineItemProvider.dispose();
		if (triplex_line_configurationItemProvider != null) triplex_line_configurationItemProvider.dispose();
		if (triplex_line_conductorItemProvider != null) triplex_line_conductorItemProvider.dispose();
		if (switchItemProvider != null) switchItemProvider.dispose();
		if (substationItemProvider != null) substationItemProvider.dispose();
		if (pqloadItemProvider != null) pqloadItemProvider.dispose();
		if (voltdumpItemProvider != null) voltdumpItemProvider.dispose();
		if (series_reactorItemProvider != null) series_reactorItemProvider.dispose();
		if (restorationItemProvider != null) restorationItemProvider.dispose();
		if (frequency_genItemProvider != null) frequency_genItemProvider.dispose();
		if (volt_var_controlItemProvider != null) volt_var_controlItemProvider.dispose();
		if (fault_checkItemProvider != null) fault_checkItemProvider.dispose();
		if (motorItemProvider != null) motorItemProvider.dispose();
		if (billdumpItemProvider != null) billdumpItemProvider.dispose();
		if (residential_enduseItemProvider != null) residential_enduseItemProvider.dispose();
		if (house_aItemProvider != null) house_aItemProvider.dispose();
		if (houseItemProvider != null) houseItemProvider.dispose();
		if (waterheaterItemProvider != null) waterheaterItemProvider.dispose();
		if (lightsItemProvider != null) lightsItemProvider.dispose();
		if (refrigeratorItemProvider != null) refrigeratorItemProvider.dispose();
		if (clotheswasherItemProvider != null) clotheswasherItemProvider.dispose();
		if (dishwasherItemProvider != null) dishwasherItemProvider.dispose();
		if (occupantloadItemProvider != null) occupantloadItemProvider.dispose();
		if (plugloadItemProvider != null) plugloadItemProvider.dispose();
		if (microwaveItemProvider != null) microwaveItemProvider.dispose();
		if (rangeItemProvider != null) rangeItemProvider.dispose();
		if (freezerItemProvider != null) freezerItemProvider.dispose();
		if (dryerItemProvider != null) dryerItemProvider.dispose();
		if (evchargerItemProvider != null) evchargerItemProvider.dispose();
		if (ziPloadItemProvider != null) ziPloadItemProvider.dispose();
		if (playerItemProvider != null) playerItemProvider.dispose();
		if (shaperItemProvider != null) shaperItemProvider.dispose();
		if (recorderItemProvider != null) recorderItemProvider.dispose();
		if (collectorItemProvider != null) collectorItemProvider.dispose();
		if (histogramItemProvider != null) histogramItemProvider.dispose();
		if (weatherItemProvider != null) weatherItemProvider.dispose();
		if (officeItemProvider != null) officeItemProvider.dispose();
		if (multizoneItemProvider != null) multizoneItemProvider.dispose();
		if (windturb_dgItemProvider != null) windturb_dgItemProvider.dispose();
		if (power_electronicsItemProvider != null) power_electronicsItemProvider.dispose();
		if (rectifierItemProvider != null) rectifierItemProvider.dispose();
		if (microturbineItemProvider != null) microturbineItemProvider.dispose();
		if (batteryItemProvider != null) batteryItemProvider.dispose();
		if (solarItemProvider != null) solarItemProvider.dispose();
		if (stubauctionItemProvider != null) stubauctionItemProvider.dispose();
		if (linkItemProvider != null) linkItemProvider.dispose();
		if (fuseItemProvider != null) fuseItemProvider.dispose();
		if (relayItemProvider != null) relayItemProvider.dispose();
		if (regulatorItemProvider != null) regulatorItemProvider.dispose();
		if (transformerItemProvider != null) transformerItemProvider.dispose();
		if (meterItemProvider != null) meterItemProvider.dispose();
		if (generatorItemProvider != null) generatorItemProvider.dispose();
		if (plcItemProvider != null) plcItemProvider.dispose();
		if (nodeItemProvider != null) nodeItemProvider.dispose();
		if (connectionItemProvider != null) connectionItemProvider.dispose();
		if (gridItemProvider != null) gridItemProvider.dispose();
	}

}
