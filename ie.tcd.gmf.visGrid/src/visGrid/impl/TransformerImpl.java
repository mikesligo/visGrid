/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package visGrid.impl;
import java.util.HashMap;
        import java.util.Map;
        import java.util.Timer;
        import java.util.TimerTask;
        import java.io.File;
        import java.net.URI;
        import java.net.URISyntaxException;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import visGrid.Transformer;
import visGrid.VisGridPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Transformer</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link visGrid.impl.TransformerImpl#getType <em>Type</em>}</li>
 *   <li>{@link visGrid.impl.TransformerImpl#getSbase <em>Sbase</em>}</li>
 *   <li>{@link visGrid.impl.TransformerImpl#getVbase <em>Vbase</em>}</li>
 *   <li>{@link visGrid.impl.TransformerImpl#getZpu <em>Zpu</em>}</li>
 *   <li>{@link visGrid.impl.TransformerImpl#getVprimary <em>Vprimary</em>}</li>
 *   <li>{@link visGrid.impl.TransformerImpl#getVsecondary <em>Vsecondary</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class TransformerImpl extends ConnectionImpl implements Transformer {
	// Generated by python script located in this directory
       boolean threadLock = false;
       HashMap<String,Boolean> lock = new HashMap<String,Boolean>();

   private void checkUnlock() {
        if (threadLock) return;
        for (Map.Entry<String, Boolean> entry : lock.entrySet()){
            if (threadLock) return;
            if (entry.getValue() == false) return;
        }
        resetLock();
    }

    private void resetLock() {
        Timer timer = new Timer();
        class Task extends TimerTask{
            public void run() {
                threadLock = true;
                for (Map.Entry<String, Boolean> entry : lock.entrySet()){
                    entry.setValue(false);
                }
                threadLock = false;
            }   
        }
        timer.schedule(new Task(), lock.size()*30);
    }
    // END PYTHON GENERATED CODE
	/**
	 * The default value of the '{@link #getType() <em>Type</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getType()
	 * @generated
	 * @ordered
	 */
	protected static final String TYPE_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getType() <em>Type</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getType()
	 * @generated
	 * @ordered
	 */
	protected String type = TYPE_EDEFAULT;

	/**
	 * The default value of the '{@link #getSbase() <em>Sbase</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getSbase()
	 * @generated
	 * @ordered
	 */
	protected static final String SBASE_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getSbase() <em>Sbase</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getSbase()
	 * @generated
	 * @ordered
	 */
	protected String sbase = SBASE_EDEFAULT;

	/**
	 * The default value of the '{@link #getVbase() <em>Vbase</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getVbase()
	 * @generated
	 * @ordered
	 */
	protected static final String VBASE_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getVbase() <em>Vbase</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getVbase()
	 * @generated
	 * @ordered
	 */
	protected String vbase = VBASE_EDEFAULT;

	/**
	 * The default value of the '{@link #getZpu() <em>Zpu</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getZpu()
	 * @generated
	 * @ordered
	 */
	protected static final String ZPU_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getZpu() <em>Zpu</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getZpu()
	 * @generated
	 * @ordered
	 */
	protected String zpu = ZPU_EDEFAULT;

	/**
	 * The default value of the '{@link #getVprimary() <em>Vprimary</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getVprimary()
	 * @generated
	 * @ordered
	 */
	protected static final String VPRIMARY_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getVprimary() <em>Vprimary</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getVprimary()
	 * @generated
	 * @ordered
	 */
	protected String vprimary = VPRIMARY_EDEFAULT;

	/**
	 * The default value of the '{@link #getVsecondary() <em>Vsecondary</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getVsecondary()
	 * @generated
	 * @ordered
	 */
	protected static final String VSECONDARY_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getVsecondary() <em>Vsecondary</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getVsecondary()
	 * @generated
	 * @ordered
	 */
	protected String vsecondary = VSECONDARY_EDEFAULT;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransformerImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return VisGridPackage.eINSTANCE.getTransformer();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String getType() {
		// Generated by python script located in this directory
			if (!lock.containsKey("type")) lock.put("type", new Boolean(false));
			if (!(Boolean)lock.get("type")){
				lock.put("type", true);
				checkUnlock();
					String val = http.Property.getValueOfProperty(this.getName().replace(" ", "%20"),"type");
					if (val == null) val = http.Property.getValueOfProperty(this.getName().replace(" ", "%20"),"Type");
					type= val;
			}
		return type;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setType(String newType) {
		String oldType = type;
		type = newType;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, VisGridPackage.TRANSFORMER__TYPE, oldType, type));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String getSbase() {
		// Generated by python script located in this directory
			if (!lock.containsKey("sbase")) lock.put("sbase", new Boolean(false));
			if (!(Boolean)lock.get("sbase")){
				lock.put("sbase", true);
				checkUnlock();
					String val = http.Property.getValueOfProperty(this.getName().replace(" ", "%20"),"sbase");
					if (val == null) val = http.Property.getValueOfProperty(this.getName().replace(" ", "%20"),"Sbase");
					sbase= val;
			}
		return sbase;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setSbase(String newSbase) {
		String oldSbase = sbase;
		sbase = newSbase;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, VisGridPackage.TRANSFORMER__SBASE, oldSbase, sbase));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String getVbase() {
		// Generated by python script located in this directory
			if (!lock.containsKey("vbase")) lock.put("vbase", new Boolean(false));
			if (!(Boolean)lock.get("vbase")){
				lock.put("vbase", true);
				checkUnlock();
					String val = http.Property.getValueOfProperty(this.getName().replace(" ", "%20"),"vbase");
					if (val == null) val = http.Property.getValueOfProperty(this.getName().replace(" ", "%20"),"Vbase");
					vbase= val;
			}
		return vbase;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setVbase(String newVbase) {
		String oldVbase = vbase;
		vbase = newVbase;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, VisGridPackage.TRANSFORMER__VBASE, oldVbase, vbase));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String getZpu() {
		// Generated by python script located in this directory
			if (!lock.containsKey("zpu")) lock.put("zpu", new Boolean(false));
			if (!(Boolean)lock.get("zpu")){
				lock.put("zpu", true);
				checkUnlock();
					String val = http.Property.getValueOfProperty(this.getName().replace(" ", "%20"),"zpu");
					if (val == null) val = http.Property.getValueOfProperty(this.getName().replace(" ", "%20"),"Zpu");
					zpu= val;
			}
		return zpu;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setZpu(String newZpu) {
		String oldZpu = zpu;
		zpu = newZpu;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, VisGridPackage.TRANSFORMER__ZPU, oldZpu, zpu));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String getVprimary() {
		// Generated by python script located in this directory
			if (!lock.containsKey("vprimary")) lock.put("vprimary", new Boolean(false));
			if (!(Boolean)lock.get("vprimary")){
				lock.put("vprimary", true);
				checkUnlock();
					String val = http.Property.getValueOfProperty(this.getName().replace(" ", "%20"),"vprimary");
					if (val == null) val = http.Property.getValueOfProperty(this.getName().replace(" ", "%20"),"Vprimary");
					vprimary= val;
			}
		return vprimary;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setVprimary(String newVprimary) {
		String oldVprimary = vprimary;
		vprimary = newVprimary;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, VisGridPackage.TRANSFORMER__VPRIMARY, oldVprimary, vprimary));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String getVsecondary() {
		// Generated by python script located in this directory
			if (!lock.containsKey("vsecondary")) lock.put("vsecondary", new Boolean(false));
			if (!(Boolean)lock.get("vsecondary")){
				lock.put("vsecondary", true);
				checkUnlock();
					String val = http.Property.getValueOfProperty(this.getName().replace(" ", "%20"),"vsecondary");
					if (val == null) val = http.Property.getValueOfProperty(this.getName().replace(" ", "%20"),"Vsecondary");
					vsecondary= val;
			}
		return vsecondary;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setVsecondary(String newVsecondary) {
		String oldVsecondary = vsecondary;
		vsecondary = newVsecondary;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, VisGridPackage.TRANSFORMER__VSECONDARY, oldVsecondary, vsecondary));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case VisGridPackage.TRANSFORMER__TYPE:
				return getType();
			case VisGridPackage.TRANSFORMER__SBASE:
				return getSbase();
			case VisGridPackage.TRANSFORMER__VBASE:
				return getVbase();
			case VisGridPackage.TRANSFORMER__ZPU:
				return getZpu();
			case VisGridPackage.TRANSFORMER__VPRIMARY:
				return getVprimary();
			case VisGridPackage.TRANSFORMER__VSECONDARY:
				return getVsecondary();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case VisGridPackage.TRANSFORMER__TYPE:
				setType((String)newValue);
				return;
			case VisGridPackage.TRANSFORMER__SBASE:
				setSbase((String)newValue);
				return;
			case VisGridPackage.TRANSFORMER__VBASE:
				setVbase((String)newValue);
				return;
			case VisGridPackage.TRANSFORMER__ZPU:
				setZpu((String)newValue);
				return;
			case VisGridPackage.TRANSFORMER__VPRIMARY:
				setVprimary((String)newValue);
				return;
			case VisGridPackage.TRANSFORMER__VSECONDARY:
				setVsecondary((String)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case VisGridPackage.TRANSFORMER__TYPE:
				setType(TYPE_EDEFAULT);
				return;
			case VisGridPackage.TRANSFORMER__SBASE:
				setSbase(SBASE_EDEFAULT);
				return;
			case VisGridPackage.TRANSFORMER__VBASE:
				setVbase(VBASE_EDEFAULT);
				return;
			case VisGridPackage.TRANSFORMER__ZPU:
				setZpu(ZPU_EDEFAULT);
				return;
			case VisGridPackage.TRANSFORMER__VPRIMARY:
				setVprimary(VPRIMARY_EDEFAULT);
				return;
			case VisGridPackage.TRANSFORMER__VSECONDARY:
				setVsecondary(VSECONDARY_EDEFAULT);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case VisGridPackage.TRANSFORMER__TYPE:
				return TYPE_EDEFAULT == null ? type != null : !TYPE_EDEFAULT.equals(type);
			case VisGridPackage.TRANSFORMER__SBASE:
				return SBASE_EDEFAULT == null ? sbase != null : !SBASE_EDEFAULT.equals(sbase);
			case VisGridPackage.TRANSFORMER__VBASE:
				return VBASE_EDEFAULT == null ? vbase != null : !VBASE_EDEFAULT.equals(vbase);
			case VisGridPackage.TRANSFORMER__ZPU:
				return ZPU_EDEFAULT == null ? zpu != null : !ZPU_EDEFAULT.equals(zpu);
			case VisGridPackage.TRANSFORMER__VPRIMARY:
				return VPRIMARY_EDEFAULT == null ? vprimary != null : !VPRIMARY_EDEFAULT.equals(vprimary);
			case VisGridPackage.TRANSFORMER__VSECONDARY:
				return VSECONDARY_EDEFAULT == null ? vsecondary != null : !VSECONDARY_EDEFAULT.equals(vsecondary);
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (Type: ");
		result.append(type);
		result.append(", Sbase: ");
		result.append(sbase);
		result.append(", Vbase: ");
		result.append(vbase);
		result.append(", Zpu: ");
		result.append(zpu);
		result.append(", Vprimary: ");
		result.append(vprimary);
		result.append(", Vsecondary: ");
		result.append(vsecondary);
		result.append(')');
		return result.toString();
	}

} //TransformerImpl
