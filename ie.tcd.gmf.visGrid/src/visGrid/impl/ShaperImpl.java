/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package visGrid.impl;
import java.util.HashMap;
        import java.util.Map;
        import java.util.Timer;
        import java.util.TimerTask;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import visGrid.Shaper;
import visGrid.VisGridPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Shaper</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link visGrid.impl.ShaperImpl#getFile <em>File</em>}</li>
 *   <li>{@link visGrid.impl.ShaperImpl#getFiletype <em>Filetype</em>}</li>
 *   <li>{@link visGrid.impl.ShaperImpl#getGroup <em>Group</em>}</li>
 *   <li>{@link visGrid.impl.ShaperImpl#getProperty <em>Property</em>}</li>
 *   <li>{@link visGrid.impl.ShaperImpl#getMagnitude <em>Magnitude</em>}</li>
 *   <li>{@link visGrid.impl.ShaperImpl#getEvents <em>Events</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class ShaperImpl extends ConnectionImpl implements Shaper {
	// Generated by python script located in this directory
       boolean threadLock = false;
       HashMap<String,Boolean> lock = new HashMap<String,Boolean>();

   private void checkUnlock() {
        if (threadLock) return;
        for (Map.Entry<String, Boolean> entry : lock.entrySet()){
            if (threadLock) return;
            if (entry.getValue().equals(false)) return;
        }
        resetLock();
    }

    private void resetLock() {
        Timer timer = new Timer();
        class Task extends TimerTask{
            public void run() {
                threadLock = true;
                for (Map.Entry<String, Boolean> entry : lock.entrySet()){
                    entry.setValue(false);
                }
                threadLock = false;
            }   
        }
        timer.schedule(new Task(), lock.size()*30);
    }
    // END PYTHON GENERATED CODE
	/**
	 * The default value of the '{@link #getFile() <em>File</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getFile()
	 * @generated
	 * @ordered
	 */
	protected static final String FILE_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getFile() <em>File</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getFile()
	 * @generated
	 * @ordered
	 */
	protected String file = FILE_EDEFAULT;

	/**
	 * The default value of the '{@link #getFiletype() <em>Filetype</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getFiletype()
	 * @generated
	 * @ordered
	 */
	protected static final String FILETYPE_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getFiletype() <em>Filetype</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getFiletype()
	 * @generated
	 * @ordered
	 */
	protected String filetype = FILETYPE_EDEFAULT;

	/**
	 * The default value of the '{@link #getGroup() <em>Group</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getGroup()
	 * @generated
	 * @ordered
	 */
	protected static final String GROUP_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getGroup() <em>Group</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getGroup()
	 * @generated
	 * @ordered
	 */
	protected String group = GROUP_EDEFAULT;

	/**
	 * The default value of the '{@link #getProperty() <em>Property</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getProperty()
	 * @generated
	 * @ordered
	 */
	protected static final String PROPERTY_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getProperty() <em>Property</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getProperty()
	 * @generated
	 * @ordered
	 */
	protected String property = PROPERTY_EDEFAULT;

	/**
	 * The default value of the '{@link #getMagnitude() <em>Magnitude</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getMagnitude()
	 * @generated
	 * @ordered
	 */
	protected static final String MAGNITUDE_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getMagnitude() <em>Magnitude</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getMagnitude()
	 * @generated
	 * @ordered
	 */
	protected String magnitude = MAGNITUDE_EDEFAULT;

	/**
	 * The default value of the '{@link #getEvents() <em>Events</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getEvents()
	 * @generated
	 * @ordered
	 */
	protected static final String EVENTS_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getEvents() <em>Events</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getEvents()
	 * @generated
	 * @ordered
	 */
	protected String events = EVENTS_EDEFAULT;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ShaperImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return VisGridPackage.eINSTANCE.getShaper();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String getFile() {
		// Generated by python script located in this directory
			if (!lock.containsKey("file")) lock.put("file", new Boolean(false));
			if (!(Boolean)lock.get("file")){
				lock.put("file", true);
				checkUnlock();
				try {
					String val = http.Property.getValueOfProperty(this.getName(),"file");
					if (val == null) val = http.Property.getValueOfProperty(this.getName(),"File");
					file= val;
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		return file;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setFile(String newFile) {
		String oldFile = file;
		file = newFile;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, VisGridPackage.SHAPER__FILE, oldFile, file));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String getFiletype() {
		// Generated by python script located in this directory
			if (!lock.containsKey("filetype")) lock.put("filetype", new Boolean(false));
			if (!(Boolean)lock.get("filetype")){
				lock.put("filetype", true);
				checkUnlock();
				try {
					String val = http.Property.getValueOfProperty(this.getName(),"filetype");
					if (val == null) val = http.Property.getValueOfProperty(this.getName(),"Filetype");
					filetype= val;
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		return filetype;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setFiletype(String newFiletype) {
		String oldFiletype = filetype;
		filetype = newFiletype;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, VisGridPackage.SHAPER__FILETYPE, oldFiletype, filetype));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String getGroup() {
		// Generated by python script located in this directory
			if (!lock.containsKey("group")) lock.put("group", new Boolean(false));
			if (!(Boolean)lock.get("group")){
				lock.put("group", true);
				checkUnlock();
				try {
					String val = http.Property.getValueOfProperty(this.getName(),"group");
					if (val == null) val = http.Property.getValueOfProperty(this.getName(),"Group");
					group= val;
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		return group;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setGroup(String newGroup) {
		String oldGroup = group;
		group = newGroup;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, VisGridPackage.SHAPER__GROUP, oldGroup, group));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String getProperty() {
		// Generated by python script located in this directory
			if (!lock.containsKey("property")) lock.put("property", new Boolean(false));
			if (!(Boolean)lock.get("property")){
				lock.put("property", true);
				checkUnlock();
				try {
					String val = http.Property.getValueOfProperty(this.getName(),"property");
					if (val == null) val = http.Property.getValueOfProperty(this.getName(),"Property");
					property= val;
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		return property;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setProperty(String newProperty) {
		String oldProperty = property;
		property = newProperty;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, VisGridPackage.SHAPER__PROPERTY, oldProperty, property));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String getMagnitude() {
		// Generated by python script located in this directory
			if (!lock.containsKey("magnitude")) lock.put("magnitude", new Boolean(false));
			if (!(Boolean)lock.get("magnitude")){
				lock.put("magnitude", true);
				checkUnlock();
				try {
					String val = http.Property.getValueOfProperty(this.getName(),"magnitude");
					if (val == null) val = http.Property.getValueOfProperty(this.getName(),"Magnitude");
					magnitude= val;
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		return magnitude;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setMagnitude(String newMagnitude) {
		String oldMagnitude = magnitude;
		magnitude = newMagnitude;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, VisGridPackage.SHAPER__MAGNITUDE, oldMagnitude, magnitude));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String getEvents() {
		// Generated by python script located in this directory
			if (!lock.containsKey("events")) lock.put("events", new Boolean(false));
			if (!(Boolean)lock.get("events")){
				lock.put("events", true);
				checkUnlock();
				try {
					String val = http.Property.getValueOfProperty(this.getName(),"events");
					if (val == null) val = http.Property.getValueOfProperty(this.getName(),"Events");
					events= val;
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		return events;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setEvents(String newEvents) {
		String oldEvents = events;
		events = newEvents;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, VisGridPackage.SHAPER__EVENTS, oldEvents, events));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case VisGridPackage.SHAPER__FILE:
				return getFile();
			case VisGridPackage.SHAPER__FILETYPE:
				return getFiletype();
			case VisGridPackage.SHAPER__GROUP:
				return getGroup();
			case VisGridPackage.SHAPER__PROPERTY:
				return getProperty();
			case VisGridPackage.SHAPER__MAGNITUDE:
				return getMagnitude();
			case VisGridPackage.SHAPER__EVENTS:
				return getEvents();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case VisGridPackage.SHAPER__FILE:
				setFile((String)newValue);
				return;
			case VisGridPackage.SHAPER__FILETYPE:
				setFiletype((String)newValue);
				return;
			case VisGridPackage.SHAPER__GROUP:
				setGroup((String)newValue);
				return;
			case VisGridPackage.SHAPER__PROPERTY:
				setProperty((String)newValue);
				return;
			case VisGridPackage.SHAPER__MAGNITUDE:
				setMagnitude((String)newValue);
				return;
			case VisGridPackage.SHAPER__EVENTS:
				setEvents((String)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case VisGridPackage.SHAPER__FILE:
				setFile(FILE_EDEFAULT);
				return;
			case VisGridPackage.SHAPER__FILETYPE:
				setFiletype(FILETYPE_EDEFAULT);
				return;
			case VisGridPackage.SHAPER__GROUP:
				setGroup(GROUP_EDEFAULT);
				return;
			case VisGridPackage.SHAPER__PROPERTY:
				setProperty(PROPERTY_EDEFAULT);
				return;
			case VisGridPackage.SHAPER__MAGNITUDE:
				setMagnitude(MAGNITUDE_EDEFAULT);
				return;
			case VisGridPackage.SHAPER__EVENTS:
				setEvents(EVENTS_EDEFAULT);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case VisGridPackage.SHAPER__FILE:
				return FILE_EDEFAULT == null ? file != null : !FILE_EDEFAULT.equals(file);
			case VisGridPackage.SHAPER__FILETYPE:
				return FILETYPE_EDEFAULT == null ? filetype != null : !FILETYPE_EDEFAULT.equals(filetype);
			case VisGridPackage.SHAPER__GROUP:
				return GROUP_EDEFAULT == null ? group != null : !GROUP_EDEFAULT.equals(group);
			case VisGridPackage.SHAPER__PROPERTY:
				return PROPERTY_EDEFAULT == null ? property != null : !PROPERTY_EDEFAULT.equals(property);
			case VisGridPackage.SHAPER__MAGNITUDE:
				return MAGNITUDE_EDEFAULT == null ? magnitude != null : !MAGNITUDE_EDEFAULT.equals(magnitude);
			case VisGridPackage.SHAPER__EVENTS:
				return EVENTS_EDEFAULT == null ? events != null : !EVENTS_EDEFAULT.equals(events);
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (file: ");
		result.append(file);
		result.append(", filetype: ");
		result.append(filetype);
		result.append(", group: ");
		result.append(group);
		result.append(", property: ");
		result.append(property);
		result.append(", magnitude: ");
		result.append(magnitude);
		result.append(", events: ");
		result.append(events);
		result.append(')');
		return result.toString();
	}

} //ShaperImpl
