/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package simpleGrid.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import simpleGrid.util.SimpleGridAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SimpleGridItemProviderAdapterFactory extends SimpleGridAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SimpleGridItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link simpleGrid.Climate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClimateItemProvider climateItemProvider;

	/**
	 * This creates an adapter for a {@link simpleGrid.Climate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClimateAdapter() {
		if (climateItemProvider == null) {
			climateItemProvider = new ClimateItemProvider(this);
		}

		return climateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simpleGrid.Triplex_Line_configuration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Triplex_Line_configurationItemProvider triplex_Line_configurationItemProvider;

	/**
	 * This creates an adapter for a {@link simpleGrid.Triplex_Line_configuration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTriplex_Line_configurationAdapter() {
		if (triplex_Line_configurationItemProvider == null) {
			triplex_Line_configurationItemProvider = new Triplex_Line_configurationItemProvider(this);
		}

		return triplex_Line_configurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simpleGrid.Transformer_configuration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Transformer_configurationItemProvider transformer_configurationItemProvider;

	/**
	 * This creates an adapter for a {@link simpleGrid.Transformer_configuration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransformer_configurationAdapter() {
		if (transformer_configurationItemProvider == null) {
			transformer_configurationItemProvider = new Transformer_configurationItemProvider(this);
		}

		return transformer_configurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simpleGrid.Node} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NodeItemProvider nodeItemProvider;

	/**
	 * This creates an adapter for a {@link simpleGrid.Node}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNodeAdapter() {
		if (nodeItemProvider == null) {
			nodeItemProvider = new NodeItemProvider(this);
		}

		return nodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simpleGrid.Transformer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransformerItemProvider transformerItemProvider;

	/**
	 * This creates an adapter for a {@link simpleGrid.Transformer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransformerAdapter() {
		if (transformerItemProvider == null) {
			transformerItemProvider = new TransformerItemProvider(this);
		}

		return transformerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simpleGrid.Triplex_node} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Triplex_nodeItemProvider triplex_nodeItemProvider;

	/**
	 * This creates an adapter for a {@link simpleGrid.Triplex_node}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTriplex_nodeAdapter() {
		if (triplex_nodeItemProvider == null) {
			triplex_nodeItemProvider = new Triplex_nodeItemProvider(this);
		}

		return triplex_nodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simpleGrid.Triplex_meter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Triplex_meterItemProvider triplex_meterItemProvider;

	/**
	 * This creates an adapter for a {@link simpleGrid.Triplex_meter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTriplex_meterAdapter() {
		if (triplex_meterItemProvider == null) {
			triplex_meterItemProvider = new Triplex_meterItemProvider(this);
		}

		return triplex_meterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simpleGrid.House} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HouseItemProvider houseItemProvider;

	/**
	 * This creates an adapter for a {@link simpleGrid.House}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHouseAdapter() {
		if (houseItemProvider == null) {
			houseItemProvider = new HouseItemProvider(this);
		}

		return houseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simpleGrid.Waterheater} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WaterheaterItemProvider waterheaterItemProvider;

	/**
	 * This creates an adapter for a {@link simpleGrid.Waterheater}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWaterheaterAdapter() {
		if (waterheaterItemProvider == null) {
			waterheaterItemProvider = new WaterheaterItemProvider(this);
		}

		return waterheaterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simpleGrid.Grid} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GridItemProvider gridItemProvider;

	/**
	 * This creates an adapter for a {@link simpleGrid.Grid}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGridAdapter() {
		if (gridItemProvider == null) {
			gridItemProvider = new GridItemProvider(this);
		}

		return gridItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simpleGrid.Triplex_line} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Triplex_lineItemProvider triplex_lineItemProvider;

	/**
	 * This creates an adapter for a {@link simpleGrid.Triplex_line}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTriplex_lineAdapter() {
		if (triplex_lineItemProvider == null) {
			triplex_lineItemProvider = new Triplex_lineItemProvider(this);
		}

		return triplex_lineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simpleGrid.Triplex_line_conductor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Triplex_line_conductorItemProvider triplex_line_conductorItemProvider;

	/**
	 * This creates an adapter for a {@link simpleGrid.Triplex_line_conductor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTriplex_line_conductorAdapter() {
		if (triplex_line_conductorItemProvider == null) {
			triplex_line_conductorItemProvider = new Triplex_line_conductorItemProvider(this);
		}

		return triplex_line_conductorItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (climateItemProvider != null) climateItemProvider.dispose();
		if (triplex_Line_configurationItemProvider != null) triplex_Line_configurationItemProvider.dispose();
		if (transformer_configurationItemProvider != null) transformer_configurationItemProvider.dispose();
		if (nodeItemProvider != null) nodeItemProvider.dispose();
		if (transformerItemProvider != null) transformerItemProvider.dispose();
		if (triplex_nodeItemProvider != null) triplex_nodeItemProvider.dispose();
		if (triplex_meterItemProvider != null) triplex_meterItemProvider.dispose();
		if (houseItemProvider != null) houseItemProvider.dispose();
		if (waterheaterItemProvider != null) waterheaterItemProvider.dispose();
		if (gridItemProvider != null) gridItemProvider.dispose();
		if (triplex_lineItemProvider != null) triplex_lineItemProvider.dispose();
		if (triplex_line_conductorItemProvider != null) triplex_line_conductorItemProvider.dispose();
	}

}
