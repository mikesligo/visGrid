<HTML>
<BODY BGCOLOR="white">
<PRE>
<FONT color="green">001</FONT>    package org.LiveGraph.dataFile.write;<a name="line.1"></a>
<FONT color="green">002</FONT>    <a name="line.2"></a>
<FONT color="green">003</FONT>    import java.io.BufferedWriter;<a name="line.3"></a>
<FONT color="green">004</FONT>    import java.io.IOException;<a name="line.4"></a>
<FONT color="green">005</FONT>    import java.io.OutputStream;<a name="line.5"></a>
<FONT color="green">006</FONT>    import java.io.OutputStreamWriter;<a name="line.6"></a>
<FONT color="green">007</FONT>    import java.util.ArrayList;<a name="line.7"></a>
<FONT color="green">008</FONT>    import java.util.HashMap;<a name="line.8"></a>
<FONT color="green">009</FONT>    import java.util.List;<a name="line.9"></a>
<FONT color="green">010</FONT>    import java.util.Map;<a name="line.10"></a>
<FONT color="green">011</FONT>    <a name="line.11"></a>
<FONT color="green">012</FONT>    import static org.LiveGraph.dataFile.common.DataFormatTools.*;<a name="line.12"></a>
<FONT color="green">013</FONT>    <a name="line.13"></a>
<FONT color="green">014</FONT>    /**<a name="line.14"></a>
<FONT color="green">015</FONT>     * {@code DataStreamWriter} objects are used for writing files in the LiveGraph file format.<a name="line.15"></a>
<FONT color="green">016</FONT>     * {@code DataStreamWriter} does not extend {@code java.io.Writer} because the structure<a name="line.16"></a>
<FONT color="green">017</FONT>     * of the data being written is different and the making use of the methods published by<a name="line.17"></a>
<FONT color="green">018</FONT>     * the standard API class would be counter-intuitive; however, {@code DataStreamWriter}<a name="line.18"></a>
<FONT color="green">019</FONT>     * objects should be used in much the same manner as a normal {@code Writer} in an<a name="line.19"></a>
<FONT color="green">020</FONT>     * application.&lt;br /&gt; <a name="line.20"></a>
<FONT color="green">021</FONT>     * &lt;br /&gt;<a name="line.21"></a>
<FONT color="green">022</FONT>     * The {@code DataStreamWriter} class provides methods for setting up the data file separator,<a name="line.22"></a>
<FONT color="green">023</FONT>     * adding information lines and comments to the data file, defining the number of and the<a name="line.23"></a>
<FONT color="green">024</FONT>     * labels for the data series and, eventually, for writing the data.&lt;br /&gt;<a name="line.24"></a>
<FONT color="green">025</FONT>     * Before any data is sent to the writer the data series should be set up with a series of<a name="line.25"></a>
<FONT color="green">026</FONT>     * calls to {@link #addDataSeries(String)}. Once a dataset is written to the stream, no<a name="line.26"></a>
<FONT color="green">027</FONT>     * more data series may be added.&lt;br /&gt;<a name="line.27"></a>
<FONT color="green">028</FONT>     * A dataset is written by a series of calls to one of the {@code setDataValue(...)}<a name="line.28"></a>
<FONT color="green">029</FONT>     * methods. Calls to those methods do not cause any data to be written. Instead, the values<a name="line.29"></a>
<FONT color="green">030</FONT>     * are associated with the appropriate data series and cached. In order to actually write the<a name="line.30"></a>
<FONT color="green">031</FONT>     * data to the underlying stream the method {@link #writeDataSet()} must be invoked. It flushes<a name="line.31"></a>
<FONT color="green">032</FONT>     * the cache to the data stream and prepares for the processing of the next dataset.&lt;br /&gt;<a name="line.32"></a>
<FONT color="green">033</FONT>     * In order to allow for concise code when using this class in applications, no methods<a name="line.33"></a>
<FONT color="green">034</FONT>     * of {@code DataStreamWriter} throw any I/O exceptions. If an {@code IOException} is <a name="line.34"></a>
<FONT color="green">035</FONT>     * thrown by the underlying stream, it is immediately caught by this class. In order to<a name="line.35"></a>
<FONT color="green">036</FONT>     * allow the application to nevertheless access and control the error handling, the methods<a name="line.36"></a>
<FONT color="green">037</FONT>     * {@link #hadIOException()}, {@link #getIOException()} and {@link #resetIOException()} are<a name="line.37"></a>
<FONT color="green">038</FONT>     * provided.&lt;br/&gt;<a name="line.38"></a>
<FONT color="green">039</FONT>     * &lt;br /&gt;<a name="line.39"></a>
<FONT color="green">040</FONT>     * An example of how to use this class can be found in<a name="line.40"></a>
<FONT color="green">041</FONT>     * {@link org.LiveGraph.demoDataSource.LiveGraphDemo}.&lt;br /&gt;<a name="line.41"></a>
<FONT color="green">042</FONT>     * <a name="line.42"></a>
<FONT color="green">043</FONT>     * &lt;p&gt;Here is a formal description of the file format produced by this class:&lt;/p&gt;<a name="line.43"></a>
<FONT color="green">044</FONT>     * &lt;p&gt;The LiveGraph API reads and stores data in text-based data files. The file format is<a name="line.44"></a>
<FONT color="green">045</FONT>     * based on the widely used comma-separated-values (CSV) format. LiveGraph&amp;prime;s file format<a name="line.45"></a>
<FONT color="green">046</FONT>     * was defined in such a way that a standard CSV file will be accepted and correctly parsed<a name="line.46"></a>
<FONT color="green">047</FONT>     * by the application (except that the very first data line might be interpreted as column<a name="line.47"></a>
<FONT color="green">048</FONT>     * headings - see below).&lt;/p&gt;<a name="line.48"></a>
<FONT color="green">049</FONT>     * <a name="line.49"></a>
<FONT color="green">050</FONT>     * &lt;p&gt;The format definition is as follows:&lt;/p&gt;<a name="line.50"></a>
<FONT color="green">051</FONT>     * <a name="line.51"></a>
<FONT color="green">052</FONT>     * &lt;p&gt;1. &lt;strong&gt;File is character and line based&lt;/strong&gt;.&lt;br /&gt;<a name="line.52"></a>
<FONT color="green">053</FONT>     * LiveGraph data files are text-files (i.e. not binary files). Files are read (written) on<a name="line.53"></a>
<FONT color="green">054</FONT>     * a line-by-line basis. Only after a complete line was read and parsed (or written) will<a name="line.54"></a>
<FONT color="green">055</FONT>     * the next line be considered.&lt;/p&gt;<a name="line.55"></a>
<FONT color="green">056</FONT>     * <a name="line.56"></a>
<FONT color="green">057</FONT>     * &lt;p&gt;2. &lt;strong&gt;Empty lines are ignored&lt;/strong&gt;.&lt;br /&gt;<a name="line.57"></a>
<FONT color="green">058</FONT>     * Any empty line or a line containing only white spaces is ignored without any further<a name="line.58"></a>
<FONT color="green">059</FONT>     * consequences.&lt;/p&gt;<a name="line.59"></a>
<FONT color="green">060</FONT>     * <a name="line.60"></a>
<FONT color="green">061</FONT>     * &lt;p&gt;3. &lt;strong&gt;Data values separator definition line&lt;/strong&gt;.&lt;br /&gt;<a name="line.61"></a>
<FONT color="green">062</FONT>     * The first non-empty line in a LiveGraph data file may contain an &lt;em&gt;optional&lt;/em&gt; data<a name="line.62"></a>
<FONT color="green">063</FONT>     * values separator definition. A data values separator is a string which will separate data<a name="line.63"></a>
<FONT color="green">064</FONT>     * values in data lines.&lt;br /&gt;<a name="line.64"></a>
<FONT color="green">065</FONT>     * A data values separator definition line must start and finish with the tag<a name="line.65"></a>
<FONT color="green">066</FONT>     * &amp;quot&lt;samp&gt;##&lt;/samp&gt;&amp;quot;. The entire string between the opening &amp;quot&lt;samp&gt;##&lt;/samp&gt;&amp;quot;<a name="line.66"></a>
<FONT color="green">067</FONT>     * and the closing &amp;quot&lt;samp&gt;##&lt;/samp&gt;&amp;quot; will be the treated as the separator. For instance,<a name="line.67"></a>
<FONT color="green">068</FONT>     * the line &amp;quot&lt;samp&gt;##(*)##&lt;/samp&gt;&amp;quot; defines the data values separator<a name="line.68"></a>
<FONT color="green">069</FONT>     * &amp;quot&lt;samp&gt;(*)&lt;/samp&gt;&amp;quot;.&lt;br /&gt;<a name="line.69"></a>
<FONT color="green">070</FONT>     * A data values separator definition may not appear anywhere else than on the first non-empty<a name="line.70"></a>
<FONT color="green">071</FONT>     * line of the data file.&lt;br /&gt;<a name="line.71"></a>
<FONT color="green">072</FONT>     * If the data values separator definition is omitted the default data values separator will be<a name="line.72"></a>
<FONT color="green">073</FONT>     * the string &amp;quot&lt;samp&gt;,&lt;/samp&gt;&amp;quot; (comma).&lt;/p&gt;<a name="line.73"></a>
<FONT color="green">074</FONT>     * <a name="line.74"></a>
<FONT color="green">075</FONT>     * &lt;p&gt;4. &lt;strong&gt;Comment lines&lt;/strong&gt;.&lt;br /&gt;<a name="line.75"></a>
<FONT color="green">076</FONT>     * Any line where the first non-whitespace character is &amp;quot&lt;samp&gt;#&lt;/samp&gt;&amp;quot; (except for<a name="line.76"></a>
<FONT color="green">077</FONT>     * the data values separator definition line) is treated as a comment and is ignored. Note that<a name="line.77"></a>
<FONT color="green">078</FONT>     * no comments may be placed before the optional data values separator definition line.&lt;/p&gt;<a name="line.78"></a>
<FONT color="green">079</FONT>     * <a name="line.79"></a>
<FONT color="green">080</FONT>     * &lt;p&gt;5. &lt;strong&gt;File information and description lines&lt;/strong&gt;.&lt;br /&gt;<a name="line.80"></a>
<FONT color="green">081</FONT>     * Any line where the first non-whitespace character is &amp;quot&lt;samp&gt;{@literal @}&lt;/samp&gt;&amp;quot; is treated as<a name="line.81"></a>
<FONT color="green">082</FONT>     * a file information or description line. A file information line does not have any effect on<a name="line.82"></a>
<FONT color="green">083</FONT>     * the interpretation of the data contained in the file; however, it may be used by a<a name="line.83"></a>
<FONT color="green">084</FONT>     * processing application to provide information to the end-user.&lt;/p&gt;<a name="line.84"></a>
<FONT color="green">085</FONT>     * <a name="line.85"></a>
<FONT color="green">086</FONT>     * &lt;p&gt;6. &lt;strong&gt;Data series labels line&lt;/strong&gt;.&lt;br /&gt;<a name="line.86"></a>
<FONT color="green">087</FONT>     * The first non-empty line in a data file which is not a data separator definition line or a<a name="line.87"></a>
<FONT color="green">088</FONT>     * comment line or a file information line is treated as data series labels line. This line<a name="line.88"></a>
<FONT color="green">089</FONT>     * defines the number and the labels of the data columns in the file. The line is split in<a name="line.89"></a>
<FONT color="green">090</FONT>     * tokens using the data values separator. The number of tokens defines the number of data<a name="line.90"></a>
<FONT color="green">091</FONT>     * columns in the file and the tokens define the labels of the columns. Note that the labels<a name="line.91"></a>
<FONT color="green">092</FONT>     * might be empty strings. For example:&lt;/p&gt;<a name="line.92"></a>
<FONT color="green">093</FONT>     * <a name="line.93"></a>
<FONT color="green">094</FONT>     * &lt;pre&gt;<a name="line.94"></a>
<FONT color="green">095</FONT>     *     ##;##<a name="line.95"></a>
<FONT color="green">096</FONT>     *     {@literal @Example 1}<a name="line.96"></a>
<FONT color="green">097</FONT>     *     ID;Age;;Height<a name="line.97"></a>
<FONT color="green">098</FONT>     *     . . .<a name="line.98"></a>
<FONT color="green">099</FONT>     * &lt;/pre&gt;<a name="line.99"></a>
<FONT color="green">100</FONT>     * &lt;pre&gt;<a name="line.100"></a>
<FONT color="green">101</FONT>     *     {@literal @Example 2}<a name="line.101"></a>
<FONT color="green">102</FONT>     *     ,ID;Height,Age,weight,<a name="line.102"></a>
<FONT color="green">103</FONT>     *     . . .<a name="line.103"></a>
<FONT color="green">104</FONT>     * &lt;/pre&gt;<a name="line.104"></a>
<FONT color="green">105</FONT>     * <a name="line.105"></a>
<FONT color="green">106</FONT>     * &lt;p&gt;In example 1 the data separator is defined to be &amp;quot&lt;samp&gt;;&lt;/samp&gt;&amp;quot; (semicolon).<a name="line.106"></a>
<FONT color="green">107</FONT>     * 4 data series are defined here: &amp;quot&lt;samp&gt;ID&lt;/samp&gt;&amp;quot;, &amp;quot&lt;samp&gt;Age&lt;/samp&gt;&amp;quot;,<a name="line.107"></a>
<FONT color="green">108</FONT>     * &amp;quot&lt;samp&gt;&lt;/samp&gt;&amp;quot; and &amp;quot&lt;samp&gt;Height&lt;/samp&gt;&amp;quot (note that the third series<a name="line.108"></a>
<FONT color="green">109</FONT>     * label here is an empty string).&lt;br /&gt;<a name="line.109"></a>
<FONT color="green">110</FONT>     * In example 2 no data separator is defined, so the default separator &amp;quot&lt;samp&gt;,&lt;/samp&gt;&amp;quot<a name="line.110"></a>
<FONT color="green">111</FONT>     * (comma) is used. Note that &amp;quot&lt;samp&gt;;&lt;/samp&gt;&amp;quot is not a separator in this case. This<a name="line.111"></a>
<FONT color="green">112</FONT>     * gives 5 data series with the following labels: &amp;quot&lt;samp&gt;&lt;/samp&gt;&amp;quot,<a name="line.112"></a>
<FONT color="green">113</FONT>     * &amp;quot&lt;samp&gt;ID;Height&lt;/samp&gt;&amp;quot, &amp;quot&lt;samp&gt;Age&lt;/samp&gt;&amp;quot, &amp;quot&lt;samp&gt;weight&lt;/samp&gt;&amp;quot<a name="line.113"></a>
<FONT color="green">114</FONT>     * and &amp;quot&lt;samp&gt;&lt;/samp&gt;&amp;quot. Note that the first and the last series labels are empty<a name="line.114"></a>
<FONT color="green">115</FONT>     * strings. They are separated from the following (preceding) labels by the data separator.&lt;/p&gt;<a name="line.115"></a>
<FONT color="green">116</FONT>     * <a name="line.116"></a>
<FONT color="green">117</FONT>     * &lt;p&gt;7. &lt;strong&gt;Data lines&lt;/strong&gt;.&lt;br /&gt;<a name="line.117"></a>
<FONT color="green">118</FONT>     * Any non-empty line after the series labels line which is not a comment line or a file<a name="line.118"></a>
<FONT color="green">119</FONT>     * information line is treated as data values line. Data lines contain the actual data. They<a name="line.119"></a>
<FONT color="green">120</FONT>     * are parsed into tokens in the same way as the data series labels line, which means that<a name="line.120"></a>
<FONT color="green">121</FONT>     * some tokens may be empty strings. The LiveGraph API allows any string to be used as a token.<a name="line.121"></a>
<FONT color="green">122</FONT>     * (Note that the plotter application converts each token to a double precision floating point<a name="line.122"></a>
<FONT color="green">123</FONT>     * value; if a token is not a character string representing a valid decimal number, it will be<a name="line.123"></a>
<FONT color="green">124</FONT>     * converted to a not-a-number floating point value. This is interpreted by the plotter as a<a name="line.124"></a>
<FONT color="green">125</FONT>     * gap in the data series.) All data values on the same line are considered to belong to the<a name="line.125"></a>
<FONT color="green">126</FONT>     * same dataset. The data series of each value in a given dataset is determined by comparing<a name="line.126"></a>
<FONT color="green">127</FONT>     * the position index of the corresponding data token in the line to the number of the series<a name="line.127"></a>
<FONT color="green">128</FONT>     * label token in the labels line.&lt;/p&gt; <a name="line.128"></a>
<FONT color="green">129</FONT>     * <a name="line.129"></a>
<FONT color="green">130</FONT>     * &lt;p&gt;Here is an example data file:&lt;/p&gt;<a name="line.130"></a>
<FONT color="green">131</FONT>     * <a name="line.131"></a>
<FONT color="green">132</FONT>     * &lt;pre&gt;<a name="line.132"></a>
<FONT color="green">133</FONT>     *     ##|##<a name="line.133"></a>
<FONT color="green">134</FONT>     *     {@literal @File info for the user}<a name="line.134"></a>
<FONT color="green">135</FONT>     *     {@literal @More info}<a name="line.135"></a>
<FONT color="green">136</FONT>     *     #Comment<a name="line.136"></a>
<FONT color="green">137</FONT>     *     Seconds|Dead mosquitos|Hungry frogs<a name="line.137"></a>
<FONT color="green">138</FONT>     *     1|0|100<a name="line.138"></a>
<FONT color="green">139</FONT>     *     600|1000|50<a name="line.139"></a>
<FONT color="green">140</FONT>     *     1500|5000|0<a name="line.140"></a>
<FONT color="green">141</FONT>     *     #Another comment<a name="line.141"></a>
<FONT color="green">142</FONT>     * &lt;/pre&gt;<a name="line.142"></a>
<FONT color="green">143</FONT>     * &lt;p&gt;Here is another example:&lt;/p&gt;<a name="line.143"></a>
<FONT color="green">144</FONT>     * &lt;pre&gt;<a name="line.144"></a>
<FONT color="green">145</FONT>     *     Seconds,Dead mosquitos,Hungry frogs<a name="line.145"></a>
<FONT color="green">146</FONT>     *     1,0,100<a name="line.146"></a>
<FONT color="green">147</FONT>     *     600,1000,50<a name="line.147"></a>
<FONT color="green">148</FONT>     *     1500,5000,0<a name="line.148"></a>
<FONT color="green">149</FONT>     * &lt;/pre&gt;<a name="line.149"></a>
<FONT color="green">150</FONT>     * <a name="line.150"></a>
<FONT color="green">151</FONT>     * &lt;p style="font-size:smaller;"&gt;This product includes software developed by the<a name="line.151"></a>
<FONT color="green">152</FONT>     *    &lt;strong&gt;LiveGraph&lt;/strong&gt; project and its contributors.&lt;br /&gt;<a name="line.152"></a>
<FONT color="green">153</FONT>     *    (&lt;a href="http://www.live-graph.org" target="_blank"&gt;http://www.live-graph.org&lt;/a&gt;)&lt;br /&gt;<a name="line.153"></a>
<FONT color="green">154</FONT>     *    Copyright (c) 2007 G. Paperin.&lt;br /&gt;<a name="line.154"></a>
<FONT color="green">155</FONT>     *    All rights reserved.<a name="line.155"></a>
<FONT color="green">156</FONT>     * &lt;/p&gt;<a name="line.156"></a>
<FONT color="green">157</FONT>     * &lt;p style="font-size:smaller;"&gt;File: DataStreamWriter.java&lt;/p&gt; <a name="line.157"></a>
<FONT color="green">158</FONT>     * &lt;p style="font-size:smaller;"&gt;Redistribution and use in source and binary forms, with or<a name="line.158"></a>
<FONT color="green">159</FONT>     *    without modification, are permitted provided that the following terms and conditions are met:<a name="line.159"></a>
<FONT color="green">160</FONT>     * &lt;/p&gt;<a name="line.160"></a>
<FONT color="green">161</FONT>     * &lt;p style="font-size:smaller;"&gt;1. Redistributions of source code must retain the above<a name="line.161"></a>
<FONT color="green">162</FONT>     *    acknowledgement of the LiveGraph project and its web-site, the above copyright notice,<a name="line.162"></a>
<FONT color="green">163</FONT>     *    this list of conditions and the following disclaimer.&lt;br /&gt;<a name="line.163"></a>
<FONT color="green">164</FONT>     *    2. Redistributions in binary form must reproduce the above acknowledgement of the<a name="line.164"></a>
<FONT color="green">165</FONT>     *    LiveGraph project and its web-site, the above copyright notice, this list of conditions<a name="line.165"></a>
<FONT color="green">166</FONT>     *    and the following disclaimer in the documentation and/or other materials provided with<a name="line.166"></a>
<FONT color="green">167</FONT>     *    the distribution.&lt;br /&gt;<a name="line.167"></a>
<FONT color="green">168</FONT>     *    3. All advertising materials mentioning features or use of this software or any derived<a name="line.168"></a>
<FONT color="green">169</FONT>     *    software must display the following acknowledgement:&lt;br /&gt;<a name="line.169"></a>
<FONT color="green">170</FONT>     *    &lt;em&gt;This product includes software developed by the LiveGraph project and its<a name="line.170"></a>
<FONT color="green">171</FONT>     *    contributors.&lt;br /&gt;(http://www.live-graph.org)&lt;/em&gt;&lt;br /&gt;<a name="line.171"></a>
<FONT color="green">172</FONT>     *    4. All advertising materials distributed in form of HTML pages or any other technology<a name="line.172"></a>
<FONT color="green">173</FONT>     *    permitting active hyper-links that mention features or use of this software or any<a name="line.173"></a>
<FONT color="green">174</FONT>     *    derived software must display the acknowledgment specified in condition 3 of this<a name="line.174"></a>
<FONT color="green">175</FONT>     *    agreement, and in addition, include a visible and working hyper-link to the LiveGraph<a name="line.175"></a>
<FONT color="green">176</FONT>     *    homepage (http://www.live-graph.org).<a name="line.176"></a>
<FONT color="green">177</FONT>     * &lt;/p&gt;<a name="line.177"></a>
<FONT color="green">178</FONT>     * &lt;p style="font-size:smaller;"&gt;THIS SOFTWARE IS PROVIDED &amp;quot;AS IS&amp;quot;, WITHOUT WARRANTY<a name="line.178"></a>
<FONT color="green">179</FONT>     *    OF ANY KIND, EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF<a name="line.179"></a>
<FONT color="green">180</FONT>     *    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  NONINFRINGEMENT. IN NO EVENT SHALL<a name="line.180"></a>
<FONT color="green">181</FONT>     *    THE AUTHORS, CONTRIBUTORS OR COPYRIGHT  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER<a name="line.181"></a>
<FONT color="green">182</FONT>     *    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING  FROM, OUT OF OR<a name="line.182"></a>
<FONT color="green">183</FONT>     *    IN CONNECTION WITH THE SOFTWARE OR THE USE OR  OTHER DEALINGS IN THE SOFTWARE.<a name="line.183"></a>
<FONT color="green">184</FONT>     * &lt;/p&gt;<a name="line.184"></a>
<FONT color="green">185</FONT>     * <a name="line.185"></a>
<FONT color="green">186</FONT>     * @author Greg Paperin (&lt;a href="http://www.paperin.org" target="_blank"&gt;http://www.paperin.org&lt;/a&gt;)<a name="line.186"></a>
<FONT color="green">187</FONT>     * @version {@value org.LiveGraph.LiveGraph#version}<a name="line.187"></a>
<FONT color="green">188</FONT>     */<a name="line.188"></a>
<FONT color="green">189</FONT>    public class DataStreamWriter {<a name="line.189"></a>
<FONT color="green">190</FONT>    <a name="line.190"></a>
<FONT color="green">191</FONT>    /**<a name="line.191"></a>
<FONT color="green">192</FONT>     * Streat writer for printing to the output stream.<a name="line.192"></a>
<FONT color="green">193</FONT>     */<a name="line.193"></a>
<FONT color="green">194</FONT>    private BufferedWriter out = null;<a name="line.194"></a>
<FONT color="green">195</FONT>    <a name="line.195"></a>
<FONT color="green">196</FONT>    /**<a name="line.196"></a>
<FONT color="green">197</FONT>     * Whether the data separator can still be changed. <a name="line.197"></a>
<FONT color="green">198</FONT>     */<a name="line.198"></a>
<FONT color="green">199</FONT>    private boolean canChangeSeparator = true;<a name="line.199"></a>
<FONT color="green">200</FONT>    <a name="line.200"></a>
<FONT color="green">201</FONT>    /**<a name="line.201"></a>
<FONT color="green">202</FONT>     * The currently used data values separator.<a name="line.202"></a>
<FONT color="green">203</FONT>     */<a name="line.203"></a>
<FONT color="green">204</FONT>    private String separator = DefaultSeparator;<a name="line.204"></a>
<FONT color="green">205</FONT>    <a name="line.205"></a>
<FONT color="green">206</FONT>    <a name="line.206"></a>
<FONT color="green">207</FONT>    /**<a name="line.207"></a>
<FONT color="green">208</FONT>     * Whether new data series can still be added. <a name="line.208"></a>
<FONT color="green">209</FONT>     */<a name="line.209"></a>
<FONT color="green">210</FONT>    private boolean canAddDataSeries = true;<a name="line.210"></a>
<FONT color="green">211</FONT>    <a name="line.211"></a>
<FONT color="green">212</FONT>    /**<a name="line.212"></a>
<FONT color="green">213</FONT>     * Holds the data series labels.<a name="line.213"></a>
<FONT color="green">214</FONT>     */<a name="line.214"></a>
<FONT color="green">215</FONT>    private List&lt;String&gt; dataSeriesLabels = null;<a name="line.215"></a>
<FONT color="green">216</FONT>    <a name="line.216"></a>
<FONT color="green">217</FONT>    /**<a name="line.217"></a>
<FONT color="green">218</FONT>     * Holds the series index cursor within the current dataset. <a name="line.218"></a>
<FONT color="green">219</FONT>     */<a name="line.219"></a>
<FONT color="green">220</FONT>    private int currentSeriesIndex = 0;<a name="line.220"></a>
<FONT color="green">221</FONT>    <a name="line.221"></a>
<FONT color="green">222</FONT>    <a name="line.222"></a>
<FONT color="green">223</FONT>    /**<a name="line.223"></a>
<FONT color="green">224</FONT>     * Values of the current dataset.<a name="line.224"></a>
<FONT color="green">225</FONT>     */<a name="line.225"></a>
<FONT color="green">226</FONT>    private Map&lt;String, String&gt; dataCache = null;<a name="line.226"></a>
<FONT color="green">227</FONT>    <a name="line.227"></a>
<FONT color="green">228</FONT>    <a name="line.228"></a>
<FONT color="green">229</FONT>    /**<a name="line.229"></a>
<FONT color="green">230</FONT>     * Raised IOException (if any).<a name="line.230"></a>
<FONT color="green">231</FONT>     */<a name="line.231"></a>
<FONT color="green">232</FONT>    private IOException ioException = null;<a name="line.232"></a>
<FONT color="green">233</FONT>    <a name="line.233"></a>
<FONT color="green">234</FONT>    <a name="line.234"></a>
<FONT color="green">235</FONT>    /**<a name="line.235"></a>
<FONT color="green">236</FONT>     * Creates a new data writer to write on the specified stream.<a name="line.236"></a>
<FONT color="green">237</FONT>     * <a name="line.237"></a>
<FONT color="green">238</FONT>     * @param os The stream to the the data will be written.<a name="line.238"></a>
<FONT color="green">239</FONT>     */<a name="line.239"></a>
<FONT color="green">240</FONT>    public DataStreamWriter(OutputStream os) {<a name="line.240"></a>
<FONT color="green">241</FONT>            this.out = new BufferedWriter(new OutputStreamWriter(os));<a name="line.241"></a>
<FONT color="green">242</FONT>            this.canChangeSeparator = true;<a name="line.242"></a>
<FONT color="green">243</FONT>            this.separator = DefaultSeparator;<a name="line.243"></a>
<FONT color="green">244</FONT>            this.canAddDataSeries = true;<a name="line.244"></a>
<FONT color="green">245</FONT>            this.dataSeriesLabels = new ArrayList&lt;String&gt;();<a name="line.245"></a>
<FONT color="green">246</FONT>            this.currentSeriesIndex = 0;    <a name="line.246"></a>
<FONT color="green">247</FONT>            this.dataCache = new HashMap&lt;String, String&gt;();<a name="line.247"></a>
<FONT color="green">248</FONT>            this.ioException = null;        <a name="line.248"></a>
<FONT color="green">249</FONT>    }<a name="line.249"></a>
<FONT color="green">250</FONT>    <a name="line.250"></a>
<FONT color="green">251</FONT>    <a name="line.251"></a>
<FONT color="green">252</FONT>    /**<a name="line.252"></a>
<FONT color="green">253</FONT>     * Closes the underlying output stream.<a name="line.253"></a>
<FONT color="green">254</FONT>     * If any of the data values which have previously been cached by any of the<a name="line.254"></a>
<FONT color="green">255</FONT>     * {@code setDataValue(...)}-methods are not written yet, they wre written to the stream before it is closed.<a name="line.255"></a>
<FONT color="green">256</FONT>     * Once this method was invoken, no more data can be written. <a name="line.256"></a>
<FONT color="green">257</FONT>     */<a name="line.257"></a>
<FONT color="green">258</FONT>    public void close() {<a name="line.258"></a>
<FONT color="green">259</FONT>            if (!dataCache.isEmpty())<a name="line.259"></a>
<FONT color="green">260</FONT>                    writeDataSet();<a name="line.260"></a>
<FONT color="green">261</FONT>            try {           <a name="line.261"></a>
<FONT color="green">262</FONT>                    out.close();<a name="line.262"></a>
<FONT color="green">263</FONT>            } catch (IOException e) {<a name="line.263"></a>
<FONT color="green">264</FONT>                    ioException = e;<a name="line.264"></a>
<FONT color="green">265</FONT>            }<a name="line.265"></a>
<FONT color="green">266</FONT>    }<a name="line.266"></a>
<FONT color="green">267</FONT>    <a name="line.267"></a>
<FONT color="green">268</FONT>    /**<a name="line.268"></a>
<FONT color="green">269</FONT>     * Sets the separator between data columns and values. (Note - if the separator ends up being a substring<a name="line.269"></a>
<FONT color="green">270</FONT>     * of any data series label or any data value, than the parsing will lead to undefined results including<a name="line.270"></a>
<FONT color="green">271</FONT>     * possible unstable system behaviour).<a name="line.271"></a>
<FONT color="green">272</FONT>     * <a name="line.272"></a>
<FONT color="green">273</FONT>     * @param sep The new separator.<a name="line.273"></a>
<FONT color="green">274</FONT>     * @throws IllegalStateException If the separator cannot be changed because other data was already written.<a name="line.274"></a>
<FONT color="green">275</FONT>     * @throws IllegalArgumentException If the specified separator is not allowed.<a name="line.275"></a>
<FONT color="green">276</FONT>     * @see org.LiveGraph.dataFile.common.DataFormatTools#isValidSeparator(String)<a name="line.276"></a>
<FONT color="green">277</FONT>     */<a name="line.277"></a>
<FONT color="green">278</FONT>    public void setSeparator(String sep) {<a name="line.278"></a>
<FONT color="green">279</FONT>            if (!canChangeSeparator)<a name="line.279"></a>
<FONT color="green">280</FONT>                    throw new IllegalStateException("Separator cannot be changed any more");<a name="line.280"></a>
<FONT color="green">281</FONT>            <a name="line.281"></a>
<FONT color="green">282</FONT>            String problem = isValidSeparator(sep);<a name="line.282"></a>
<FONT color="green">283</FONT>            if (null != problem)<a name="line.283"></a>
<FONT color="green">284</FONT>                    throw new IllegalArgumentException(problem);<a name="line.284"></a>
<FONT color="green">285</FONT>            <a name="line.285"></a>
<FONT color="green">286</FONT>            separator = sep;<a name="line.286"></a>
<FONT color="green">287</FONT>    }<a name="line.287"></a>
<FONT color="green">288</FONT>    <a name="line.288"></a>
<FONT color="green">289</FONT>    /**<a name="line.289"></a>
<FONT color="green">290</FONT>     * If a non-default separator was set it is written to the output stream, unless other data<a name="line.290"></a>
<FONT color="green">291</FONT>     * was already written.<a name="line.291"></a>
<FONT color="green">292</FONT>     */<a name="line.292"></a>
<FONT color="green">293</FONT>    private void checkWriteSeparatorDefinition() {<a name="line.293"></a>
<FONT color="green">294</FONT>            <a name="line.294"></a>
<FONT color="green">295</FONT>            if (!canChangeSeparator)<a name="line.295"></a>
<FONT color="green">296</FONT>                    return;<a name="line.296"></a>
<FONT color="green">297</FONT>            <a name="line.297"></a>
<FONT color="green">298</FONT>            canChangeSeparator = false;<a name="line.298"></a>
<FONT color="green">299</FONT>            if (DefaultSeparator.equals(separator))<a name="line.299"></a>
<FONT color="green">300</FONT>                    return;<a name="line.300"></a>
<FONT color="green">301</FONT>            try {<a name="line.301"></a>
<FONT color="green">302</FONT>                    out.write(TAGSepDefinition);<a name="line.302"></a>
<FONT color="green">303</FONT>                    out.write(separator);<a name="line.303"></a>
<FONT color="green">304</FONT>                    out.write(TAGSepDefinition);<a name="line.304"></a>
<FONT color="green">305</FONT>                    out.newLine();<a name="line.305"></a>
<FONT color="green">306</FONT>                    out.flush();<a name="line.306"></a>
<FONT color="green">307</FONT>            } catch (IOException e) {<a name="line.307"></a>
<FONT color="green">308</FONT>                    ioException = e;<a name="line.308"></a>
<FONT color="green">309</FONT>            }<a name="line.309"></a>
<FONT color="green">310</FONT>    }<a name="line.310"></a>
<FONT color="green">311</FONT>    <a name="line.311"></a>
<FONT color="green">312</FONT>    /**<a name="line.312"></a>
<FONT color="green">313</FONT>     * Writes data series label information to the output stream.<a name="line.313"></a>
<FONT color="green">314</FONT>     */<a name="line.314"></a>
<FONT color="green">315</FONT>    private void checkWriteSeriesLabels() {<a name="line.315"></a>
<FONT color="green">316</FONT>            <a name="line.316"></a>
<FONT color="green">317</FONT>            if (!canAddDataSeries)<a name="line.317"></a>
<FONT color="green">318</FONT>                    return;<a name="line.318"></a>
<FONT color="green">319</FONT>            <a name="line.319"></a>
<FONT color="green">320</FONT>            canAddDataSeries = false;<a name="line.320"></a>
<FONT color="green">321</FONT>            try {<a name="line.321"></a>
<FONT color="green">322</FONT>                    String sep = "";<a name="line.322"></a>
<FONT color="green">323</FONT>                    for (String label : dataSeriesLabels) {<a name="line.323"></a>
<FONT color="green">324</FONT>                            out.write(sep);<a name="line.324"></a>
<FONT color="green">325</FONT>                            out.write(label);<a name="line.325"></a>
<FONT color="green">326</FONT>                            sep = this.separator;<a name="line.326"></a>
<FONT color="green">327</FONT>                    }<a name="line.327"></a>
<FONT color="green">328</FONT>                    out.newLine();<a name="line.328"></a>
<FONT color="green">329</FONT>                    out.flush();<a name="line.329"></a>
<FONT color="green">330</FONT>            } catch (IOException e) {<a name="line.330"></a>
<FONT color="green">331</FONT>                    ioException = e;<a name="line.331"></a>
<FONT color="green">332</FONT>            }       <a name="line.332"></a>
<FONT color="green">333</FONT>    }<a name="line.333"></a>
<FONT color="green">334</FONT>    <a name="line.334"></a>
<FONT color="green">335</FONT>    /**<a name="line.335"></a>
<FONT color="green">336</FONT>     * Writes the specified comment to the output stream.<a name="line.336"></a>
<FONT color="green">337</FONT>     * If a data values separator has been previously set, it is written to the stream before the comment line.<a name="line.337"></a>
<FONT color="green">338</FONT>     * A sepataror may not be set after invoking this method.<a name="line.338"></a>
<FONT color="green">339</FONT>     * <a name="line.339"></a>
<FONT color="green">340</FONT>     * @param comm A comment line.<a name="line.340"></a>
<FONT color="green">341</FONT>     */<a name="line.341"></a>
<FONT color="green">342</FONT>    public void writeComment(String comm) {<a name="line.342"></a>
<FONT color="green">343</FONT>            checkWriteSeparatorDefinition();<a name="line.343"></a>
<FONT color="green">344</FONT>            try {<a name="line.344"></a>
<FONT color="green">345</FONT>                    out.write(TAGComment);<a name="line.345"></a>
<FONT color="green">346</FONT>                    out.write(comm.trim());<a name="line.346"></a>
<FONT color="green">347</FONT>                    out.newLine();<a name="line.347"></a>
<FONT color="green">348</FONT>                    out.flush();<a name="line.348"></a>
<FONT color="green">349</FONT>            } catch (IOException e) {<a name="line.349"></a>
<FONT color="green">350</FONT>                    ioException = e;<a name="line.350"></a>
<FONT color="green">351</FONT>            }<a name="line.351"></a>
<FONT color="green">352</FONT>    }<a name="line.352"></a>
<FONT color="green">353</FONT>    <a name="line.353"></a>
<FONT color="green">354</FONT>    /**<a name="line.354"></a>
<FONT color="green">355</FONT>     * Writes the specified information or file description line to the output stream.<a name="line.355"></a>
<FONT color="green">356</FONT>     * If a data values separator has been previously set, it is written to the stream before the information line.<a name="line.356"></a>
<FONT color="green">357</FONT>     * A sepataror may not be set after invoking this method.<a name="line.357"></a>
<FONT color="green">358</FONT>     * <a name="line.358"></a>
<FONT color="green">359</FONT>     * @param info An information or file description line.<a name="line.359"></a>
<FONT color="green">360</FONT>     */<a name="line.360"></a>
<FONT color="green">361</FONT>    public void writeFileInfo(String info) {<a name="line.361"></a>
<FONT color="green">362</FONT>            checkWriteSeparatorDefinition();<a name="line.362"></a>
<FONT color="green">363</FONT>            try {<a name="line.363"></a>
<FONT color="green">364</FONT>                    out.write(TAGFileInfo);<a name="line.364"></a>
<FONT color="green">365</FONT>                    out.write(info.trim());<a name="line.365"></a>
<FONT color="green">366</FONT>                    out.newLine();<a name="line.366"></a>
<FONT color="green">367</FONT>                    out.flush();<a name="line.367"></a>
<FONT color="green">368</FONT>            } catch (IOException e) {<a name="line.368"></a>
<FONT color="green">369</FONT>                    ioException = e;<a name="line.369"></a>
<FONT color="green">370</FONT>            }<a name="line.370"></a>
<FONT color="green">371</FONT>    }<a name="line.371"></a>
<FONT color="green">372</FONT>    <a name="line.372"></a>
<FONT color="green">373</FONT>    /**<a name="line.373"></a>
<FONT color="green">374</FONT>     * Checks whether this writer knows a data series with the specified label.<a name="line.374"></a>
<FONT color="green">375</FONT>     * <a name="line.375"></a>
<FONT color="green">376</FONT>     * @param label A data series label.<a name="line.376"></a>
<FONT color="green">377</FONT>     * @return {@code true} if a data series has been defined on this writer,<a name="line.377"></a>
<FONT color="green">378</FONT>     * {@code false} otherwise.<a name="line.378"></a>
<FONT color="green">379</FONT>     */<a name="line.379"></a>
<FONT color="green">380</FONT>    public boolean dataSeriesExists(String label) {<a name="line.380"></a>
<FONT color="green">381</FONT>            return dataSeriesLabels.contains(label);<a name="line.381"></a>
<FONT color="green">382</FONT>    }<a name="line.382"></a>
<FONT color="green">383</FONT>    <a name="line.383"></a>
<FONT color="green">384</FONT>    <a name="line.384"></a>
<FONT color="green">385</FONT>    /**<a name="line.385"></a>
<FONT color="green">386</FONT>     * Defines a new data series with the specified label for this writer. The data columns<a name="line.386"></a>
<FONT color="green">387</FONT>     * representing the data series are placed in the order in which the data series have<a name="line.387"></a>
<FONT color="green">388</FONT>     * been defined.<a name="line.388"></a>
<FONT color="green">389</FONT>     *  <a name="line.389"></a>
<FONT color="green">390</FONT>     * @param label Label for the new data series.<a name="line.390"></a>
<FONT color="green">391</FONT>     * @throws NullPointerException If the label is {@code null}.<a name="line.391"></a>
<FONT color="green">392</FONT>     * @throws IllegalStateException If no more data series may be defined because datasets<a name="line.392"></a>
<FONT color="green">393</FONT>     * have already been written to the output stream.<a name="line.393"></a>
<FONT color="green">394</FONT>     */<a name="line.394"></a>
<FONT color="green">395</FONT>    public void addDataSeries(String label) {<a name="line.395"></a>
<FONT color="green">396</FONT>            if (null == label)<a name="line.396"></a>
<FONT color="green">397</FONT>                    throw new NullPointerException("Data series label may not be null");<a name="line.397"></a>
<FONT color="green">398</FONT>            <a name="line.398"></a>
<FONT color="green">399</FONT>            if (!canAddDataSeries)<a name="line.399"></a>
<FONT color="green">400</FONT>                    throw new IllegalStateException("Cannot add new data series at any more");<a name="line.400"></a>
<FONT color="green">401</FONT>            <a name="line.401"></a>
<FONT color="green">402</FONT>            label = label.trim();<a name="line.402"></a>
<FONT color="green">403</FONT>            <a name="line.403"></a>
<FONT color="green">404</FONT>            if (dataSeriesExists(label))<a name="line.404"></a>
<FONT color="green">405</FONT>                    return;<a name="line.405"></a>
<FONT color="green">406</FONT>            <a name="line.406"></a>
<FONT color="green">407</FONT>            dataSeriesLabels.add(label);<a name="line.407"></a>
<FONT color="green">408</FONT>    }<a name="line.408"></a>
<FONT color="green">409</FONT>    <a name="line.409"></a>
<FONT color="green">410</FONT>    /**<a name="line.410"></a>
<FONT color="green">411</FONT>     * Assigns the specified value to the specified data series in the current dataset.<a name="line.411"></a>
<FONT color="green">412</FONT>     * <a name="line.412"></a>
<FONT color="green">413</FONT>     * @param seriesLabel Label of the series to which {@code value} is to be assigned. <a name="line.413"></a>
<FONT color="green">414</FONT>     * @param value A value to include in the current dataset.<a name="line.414"></a>
<FONT color="green">415</FONT>     */<a name="line.415"></a>
<FONT color="green">416</FONT>    public void setDataValue(String seriesLabel, double value) {<a name="line.416"></a>
<FONT color="green">417</FONT>            if (null == seriesLabel)<a name="line.417"></a>
<FONT color="green">418</FONT>                    throw new NullPointerException("Data series label may not be null");<a name="line.418"></a>
<FONT color="green">419</FONT>            dataCache.put(seriesLabel.trim(), Double.toString(value));<a name="line.419"></a>
<FONT color="green">420</FONT>    }<a name="line.420"></a>
<FONT color="green">421</FONT>    <a name="line.421"></a>
<FONT color="green">422</FONT>    /**<a name="line.422"></a>
<FONT color="green">423</FONT>     * Assigns the specified value to the data series at the specified index in the<a name="line.423"></a>
<FONT color="green">424</FONT>     * current dataset.<a name="line.424"></a>
<FONT color="green">425</FONT>     * <a name="line.425"></a>
<FONT color="green">426</FONT>     * @param seriesIndex Column index of the series to which {@code value} is to be assigned. <a name="line.426"></a>
<FONT color="green">427</FONT>     * @param value A value to include in the current dataset.<a name="line.427"></a>
<FONT color="green">428</FONT>     * @throws IllegalArgumentException If {@code seriesIndex &lt; 0} or if<a name="line.428"></a>
<FONT color="green">429</FONT>     * {@code seriesIndex &gt;= (number of data-series defined for this writer)}. <a name="line.429"></a>
<FONT color="green">430</FONT>     */<a name="line.430"></a>
<FONT color="green">431</FONT>    public void setDataValue(int seriesIndex, double value) {<a name="line.431"></a>
<FONT color="green">432</FONT>            if (0 &gt; seriesIndex)<a name="line.432"></a>
<FONT color="green">433</FONT>                    throw new IllegalArgumentException("Series index may not be negative");<a name="line.433"></a>
<FONT color="green">434</FONT>            if (dataSeriesLabels.size() &lt;= seriesIndex)<a name="line.434"></a>
<FONT color="green">435</FONT>                    throw new IllegalArgumentException("Series index may not be &gt;= number of data series (" + <a name="line.435"></a>
<FONT color="green">436</FONT>                                                                                       seriesIndex + " &gt;= " + dataSeriesLabels.size()+")");<a name="line.436"></a>
<FONT color="green">437</FONT>            dataCache.put(dataSeriesLabels.get(seriesIndex), Double.toString(value));<a name="line.437"></a>
<FONT color="green">438</FONT>    }<a name="line.438"></a>
<FONT color="green">439</FONT>    <a name="line.439"></a>
<FONT color="green">440</FONT>    /**<a name="line.440"></a>
<FONT color="green">441</FONT>     * Assigns the specified value to the next data series in the current dataset.<a name="line.441"></a>
<FONT color="green">442</FONT>     * The "next"-pointer is reset each time a dataset is written to the stream.<a name="line.442"></a>
<FONT color="green">443</FONT>     *  <a name="line.443"></a>
<FONT color="green">444</FONT>     * @param value A value to include in the current dataset.<a name="line.444"></a>
<FONT color="green">445</FONT>     * @throws IllegalArgumentException If there are no more data series defined for this writer.<a name="line.445"></a>
<FONT color="green">446</FONT>     */<a name="line.446"></a>
<FONT color="green">447</FONT>    public void setDataValue(double value) {<a name="line.447"></a>
<FONT color="green">448</FONT>            setDataValue(currentSeriesIndex++, value);      <a name="line.448"></a>
<FONT color="green">449</FONT>    }<a name="line.449"></a>
<FONT color="green">450</FONT>    <a name="line.450"></a>
<FONT color="green">451</FONT>    /**<a name="line.451"></a>
<FONT color="green">452</FONT>     * Assigns the specified value to the specified data series in the current dataset.<a name="line.452"></a>
<FONT color="green">453</FONT>     * <a name="line.453"></a>
<FONT color="green">454</FONT>     * @param seriesLabel Label of the series to which {@code value} is to be assigned. <a name="line.454"></a>
<FONT color="green">455</FONT>     * @param value A value to include in the current dataset.<a name="line.455"></a>
<FONT color="green">456</FONT>     */<a name="line.456"></a>
<FONT color="green">457</FONT>    public void setDataValue(String seriesLabel, float value) {<a name="line.457"></a>
<FONT color="green">458</FONT>            if (null == seriesLabel)<a name="line.458"></a>
<FONT color="green">459</FONT>                    throw new NullPointerException("Data series label may not be null");<a name="line.459"></a>
<FONT color="green">460</FONT>            dataCache.put(seriesLabel.trim(), Float.toString(value));<a name="line.460"></a>
<FONT color="green">461</FONT>    }<a name="line.461"></a>
<FONT color="green">462</FONT>    <a name="line.462"></a>
<FONT color="green">463</FONT>    /**<a name="line.463"></a>
<FONT color="green">464</FONT>     * Assigns the specified value to the data series at the specified index in the<a name="line.464"></a>
<FONT color="green">465</FONT>     * current dataset.<a name="line.465"></a>
<FONT color="green">466</FONT>     * <a name="line.466"></a>
<FONT color="green">467</FONT>     * @param seriesIndex Column index of the series to which {@code value} is to be assigned. <a name="line.467"></a>
<FONT color="green">468</FONT>     * @param value A value to include in the current dataset.<a name="line.468"></a>
<FONT color="green">469</FONT>     * @throws IllegalArgumentException If {@code seriesIndex &lt; 0} or if<a name="line.469"></a>
<FONT color="green">470</FONT>     * {@code seriesIndex &gt;= (number of data-series defined for this writer)}. <a name="line.470"></a>
<FONT color="green">471</FONT>     */<a name="line.471"></a>
<FONT color="green">472</FONT>    public void setDataValue(int seriesIndex, float value) {<a name="line.472"></a>
<FONT color="green">473</FONT>            if (0 &gt; seriesIndex)<a name="line.473"></a>
<FONT color="green">474</FONT>                    throw new IllegalArgumentException("Series index may not be negative");<a name="line.474"></a>
<FONT color="green">475</FONT>            if (dataSeriesLabels.size() &lt;= seriesIndex)<a name="line.475"></a>
<FONT color="green">476</FONT>                    throw new IllegalArgumentException("Series index may not be &gt;= number of data series (" + <a name="line.476"></a>
<FONT color="green">477</FONT>                                                                                       seriesIndex + " &gt;=" + dataSeriesLabels.size()+")");<a name="line.477"></a>
<FONT color="green">478</FONT>            dataCache.put(dataSeriesLabels.get(seriesIndex), Float.toString(value));<a name="line.478"></a>
<FONT color="green">479</FONT>    }<a name="line.479"></a>
<FONT color="green">480</FONT>    <a name="line.480"></a>
<FONT color="green">481</FONT>    /**<a name="line.481"></a>
<FONT color="green">482</FONT>     * Assigns the specified value to the next data series in the current dataset.<a name="line.482"></a>
<FONT color="green">483</FONT>     * The "next"-pointer is reset each time a dataset is written to the stream.<a name="line.483"></a>
<FONT color="green">484</FONT>     *  <a name="line.484"></a>
<FONT color="green">485</FONT>     * @param value A value to include in the current dataset.<a name="line.485"></a>
<FONT color="green">486</FONT>     * @throws IllegalArgumentException If there are no more data series defined for this writer.<a name="line.486"></a>
<FONT color="green">487</FONT>     */<a name="line.487"></a>
<FONT color="green">488</FONT>    public void setDataValue(float value) {<a name="line.488"></a>
<FONT color="green">489</FONT>            setDataValue(currentSeriesIndex++, value);      <a name="line.489"></a>
<FONT color="green">490</FONT>    }<a name="line.490"></a>
<FONT color="green">491</FONT>    <a name="line.491"></a>
<FONT color="green">492</FONT>    /**<a name="line.492"></a>
<FONT color="green">493</FONT>     * Assigns the specified value to the specified data series in the current dataset.<a name="line.493"></a>
<FONT color="green">494</FONT>     * <a name="line.494"></a>
<FONT color="green">495</FONT>     * @param seriesLabel Label of the series to which {@code value} is to be assigned. <a name="line.495"></a>
<FONT color="green">496</FONT>     * @param value A value to include in the current dataset.<a name="line.496"></a>
<FONT color="green">497</FONT>     */<a name="line.497"></a>
<FONT color="green">498</FONT>    public void setDataValue(String seriesLabel, long value) {<a name="line.498"></a>
<FONT color="green">499</FONT>            if (null == seriesLabel)<a name="line.499"></a>
<FONT color="green">500</FONT>                    throw new NullPointerException("Data series label may not be null");<a name="line.500"></a>
<FONT color="green">501</FONT>            dataCache.put(seriesLabel.trim(), Long.toString(value));<a name="line.501"></a>
<FONT color="green">502</FONT>    }<a name="line.502"></a>
<FONT color="green">503</FONT>    <a name="line.503"></a>
<FONT color="green">504</FONT>    /**<a name="line.504"></a>
<FONT color="green">505</FONT>     * Assigns the specified value to the data series at the specified index in the<a name="line.505"></a>
<FONT color="green">506</FONT>     * current dataset.<a name="line.506"></a>
<FONT color="green">507</FONT>     * <a name="line.507"></a>
<FONT color="green">508</FONT>     * @param seriesIndex Column index of the series to which {@code value} is to be assigned. <a name="line.508"></a>
<FONT color="green">509</FONT>     * @param value A value to include in the current dataset.<a name="line.509"></a>
<FONT color="green">510</FONT>     * @throws IllegalArgumentException If {@code seriesIndex &lt; 0} or if<a name="line.510"></a>
<FONT color="green">511</FONT>     * {@code seriesIndex &gt;= (number of data-series defined for this writer)}. <a name="line.511"></a>
<FONT color="green">512</FONT>     */<a name="line.512"></a>
<FONT color="green">513</FONT>    public void setDataValue(int seriesIndex, long value) {<a name="line.513"></a>
<FONT color="green">514</FONT>            if (0 &gt; seriesIndex)<a name="line.514"></a>
<FONT color="green">515</FONT>                    throw new IllegalArgumentException("Series index may not be negative");<a name="line.515"></a>
<FONT color="green">516</FONT>            if (dataSeriesLabels.size() &lt;= seriesIndex)<a name="line.516"></a>
<FONT color="green">517</FONT>                    throw new IllegalArgumentException("Series index may not be &gt;= number of data series (" + <a name="line.517"></a>
<FONT color="green">518</FONT>                                                                                       seriesIndex + " &gt;=" + dataSeriesLabels.size()+")");<a name="line.518"></a>
<FONT color="green">519</FONT>            dataCache.put(dataSeriesLabels.get(seriesIndex), Long.toString(value));<a name="line.519"></a>
<FONT color="green">520</FONT>    }<a name="line.520"></a>
<FONT color="green">521</FONT>    <a name="line.521"></a>
<FONT color="green">522</FONT>    /**<a name="line.522"></a>
<FONT color="green">523</FONT>     * Assigns the specified value to the next data series in the current dataset.<a name="line.523"></a>
<FONT color="green">524</FONT>     * The "next"-pointer is reset each time a dataset is written to the stream.<a name="line.524"></a>
<FONT color="green">525</FONT>     *  <a name="line.525"></a>
<FONT color="green">526</FONT>     * @param value A value to include in the current dataset.<a name="line.526"></a>
<FONT color="green">527</FONT>     * @throws IllegalArgumentException If there are no more data series defined for this writer.<a name="line.527"></a>
<FONT color="green">528</FONT>     */<a name="line.528"></a>
<FONT color="green">529</FONT>    public void setDataValue(long value) {<a name="line.529"></a>
<FONT color="green">530</FONT>            setDataValue(currentSeriesIndex++, value);      <a name="line.530"></a>
<FONT color="green">531</FONT>    }<a name="line.531"></a>
<FONT color="green">532</FONT>    <a name="line.532"></a>
<FONT color="green">533</FONT>    /**<a name="line.533"></a>
<FONT color="green">534</FONT>     * Assigns the specified value to the specified data series in the current dataset.<a name="line.534"></a>
<FONT color="green">535</FONT>     * <a name="line.535"></a>
<FONT color="green">536</FONT>     * @param seriesLabel Label of the series to which {@code value} is to be assigned. <a name="line.536"></a>
<FONT color="green">537</FONT>     * @param value A value to include in the current dataset.<a name="line.537"></a>
<FONT color="green">538</FONT>     */<a name="line.538"></a>
<FONT color="green">539</FONT>    public void setDataValue(String seriesLabel, int value) {<a name="line.539"></a>
<FONT color="green">540</FONT>            if (null == seriesLabel)<a name="line.540"></a>
<FONT color="green">541</FONT>                    throw new NullPointerException("Data series label may not be null");<a name="line.541"></a>
<FONT color="green">542</FONT>            dataCache.put(seriesLabel.trim(), Integer.toString(value));<a name="line.542"></a>
<FONT color="green">543</FONT>    }<a name="line.543"></a>
<FONT color="green">544</FONT>    <a name="line.544"></a>
<FONT color="green">545</FONT>    /**<a name="line.545"></a>
<FONT color="green">546</FONT>     * Assigns the specified value to the data series at the specified index in the<a name="line.546"></a>
<FONT color="green">547</FONT>     * current dataset.<a name="line.547"></a>
<FONT color="green">548</FONT>     * <a name="line.548"></a>
<FONT color="green">549</FONT>     * @param seriesIndex Column index of the series to which {@code value} is to be assigned. <a name="line.549"></a>
<FONT color="green">550</FONT>     * @param value A value to include in the current dataset.<a name="line.550"></a>
<FONT color="green">551</FONT>     * @throws IllegalArgumentException If {@code seriesIndex &lt; 0} or if<a name="line.551"></a>
<FONT color="green">552</FONT>     * {@code seriesIndex &gt;= (number of data-series defined for this writer)}. <a name="line.552"></a>
<FONT color="green">553</FONT>     */<a name="line.553"></a>
<FONT color="green">554</FONT>    public void setDataValue(int seriesIndex, int value) {<a name="line.554"></a>
<FONT color="green">555</FONT>            if (0 &gt; seriesIndex)<a name="line.555"></a>
<FONT color="green">556</FONT>                    throw new IllegalArgumentException("Series index may not be negative");<a name="line.556"></a>
<FONT color="green">557</FONT>            if (dataSeriesLabels.size() &lt;= seriesIndex)<a name="line.557"></a>
<FONT color="green">558</FONT>                    throw new IllegalArgumentException("Series index may not be &gt;= number of data series (" + <a name="line.558"></a>
<FONT color="green">559</FONT>                                                                                       seriesIndex + " &gt;=" + dataSeriesLabels.size()+")");<a name="line.559"></a>
<FONT color="green">560</FONT>            dataCache.put(dataSeriesLabels.get(seriesIndex), Integer.toString(value));<a name="line.560"></a>
<FONT color="green">561</FONT>    }<a name="line.561"></a>
<FONT color="green">562</FONT>    <a name="line.562"></a>
<FONT color="green">563</FONT>    /**<a name="line.563"></a>
<FONT color="green">564</FONT>     * Assigns the specified value to the next data series in the current dataset.<a name="line.564"></a>
<FONT color="green">565</FONT>     * The "next"-pointer is reset each time a dataset is written to the stream.<a name="line.565"></a>
<FONT color="green">566</FONT>     *  <a name="line.566"></a>
<FONT color="green">567</FONT>     * @param value A value to include in the current dataset.<a name="line.567"></a>
<FONT color="green">568</FONT>     * @throws IllegalArgumentException If there are no more data series defined for this writer.<a name="line.568"></a>
<FONT color="green">569</FONT>     */<a name="line.569"></a>
<FONT color="green">570</FONT>    public void setDataValue(int value) {<a name="line.570"></a>
<FONT color="green">571</FONT>            setDataValue(currentSeriesIndex++, value);      <a name="line.571"></a>
<FONT color="green">572</FONT>    }<a name="line.572"></a>
<FONT color="green">573</FONT>    <a name="line.573"></a>
<FONT color="green">574</FONT>    /**<a name="line.574"></a>
<FONT color="green">575</FONT>     * Assigns the specified value to the specified data series in the current dataset.<a name="line.575"></a>
<FONT color="green">576</FONT>     * <a name="line.576"></a>
<FONT color="green">577</FONT>     * @param seriesLabel Label of the series to which {@code value} is to be assigned. <a name="line.577"></a>
<FONT color="green">578</FONT>     * @param value A value to include in the current dataset ({@code true} will be<a name="line.578"></a>
<FONT color="green">579</FONT>     * converted to {@code 1} and {@code false} will be converted to {@code 0}).<a name="line.579"></a>
<FONT color="green">580</FONT>     */<a name="line.580"></a>
<FONT color="green">581</FONT>    public void setDataValue(String seriesLabel, boolean value) {<a name="line.581"></a>
<FONT color="green">582</FONT>            if (null == seriesLabel)<a name="line.582"></a>
<FONT color="green">583</FONT>                    throw new NullPointerException("Data series label may not be null");<a name="line.583"></a>
<FONT color="green">584</FONT>            dataCache.put(seriesLabel.trim(), value ? "1" : "0");<a name="line.584"></a>
<FONT color="green">585</FONT>    }<a name="line.585"></a>
<FONT color="green">586</FONT>    <a name="line.586"></a>
<FONT color="green">587</FONT>    /**<a name="line.587"></a>
<FONT color="green">588</FONT>     * Assigns the specified value to the data series at the specified index in the<a name="line.588"></a>
<FONT color="green">589</FONT>     * current dataset.<a name="line.589"></a>
<FONT color="green">590</FONT>     * <a name="line.590"></a>
<FONT color="green">591</FONT>     * @param seriesIndex Column index of the series to which {@code value} is to be assigned. <a name="line.591"></a>
<FONT color="green">592</FONT>     * @param value A value to include in the current dataset ({@code true} will be<a name="line.592"></a>
<FONT color="green">593</FONT>     * converted to {@code 1} and {@code false} will be converted to {@code 0}).<a name="line.593"></a>
<FONT color="green">594</FONT>     * @throws IllegalArgumentException If {@code seriesIndex &lt; 0} or if<a name="line.594"></a>
<FONT color="green">595</FONT>     * {@code seriesIndex &gt;= (number of data-series defined for this writer)}. <a name="line.595"></a>
<FONT color="green">596</FONT>     */<a name="line.596"></a>
<FONT color="green">597</FONT>    public void setDataValue(int seriesIndex, boolean value) {<a name="line.597"></a>
<FONT color="green">598</FONT>            if (0 &gt; seriesIndex)<a name="line.598"></a>
<FONT color="green">599</FONT>                    throw new IllegalArgumentException("Series index may not be negative");<a name="line.599"></a>
<FONT color="green">600</FONT>            if (dataSeriesLabels.size() &lt;= seriesIndex)<a name="line.600"></a>
<FONT color="green">601</FONT>                    throw new IllegalArgumentException("Series index may not be &gt;= number of data series (" + <a name="line.601"></a>
<FONT color="green">602</FONT>                                                                                       seriesIndex + " &gt;=" + dataSeriesLabels.size()+")");<a name="line.602"></a>
<FONT color="green">603</FONT>            dataCache.put(dataSeriesLabels.get(seriesIndex), value ? "1" : "0");<a name="line.603"></a>
<FONT color="green">604</FONT>    }<a name="line.604"></a>
<FONT color="green">605</FONT>    <a name="line.605"></a>
<FONT color="green">606</FONT>    /**<a name="line.606"></a>
<FONT color="green">607</FONT>     * Assigns the specified value to the next data series in the current dataset.<a name="line.607"></a>
<FONT color="green">608</FONT>     * The "next"-pointer is reset each time a dataset is written to the stream.<a name="line.608"></a>
<FONT color="green">609</FONT>     *  <a name="line.609"></a>
<FONT color="green">610</FONT>     * @param value A value to include in the current dataset ({@code true} will be<a name="line.610"></a>
<FONT color="green">611</FONT>     * converted to {@code 1} and {@code false} will be converted to {@code 0}).<a name="line.611"></a>
<FONT color="green">612</FONT>     * @throws IllegalArgumentException If there are no more data series defined for this writer.<a name="line.612"></a>
<FONT color="green">613</FONT>     */<a name="line.613"></a>
<FONT color="green">614</FONT>    public void setDataValue(boolean value) {<a name="line.614"></a>
<FONT color="green">615</FONT>            setDataValue(currentSeriesIndex++, value);      <a name="line.615"></a>
<FONT color="green">616</FONT>    }<a name="line.616"></a>
<FONT color="green">617</FONT>    <a name="line.617"></a>
<FONT color="green">618</FONT>    /**<a name="line.618"></a>
<FONT color="green">619</FONT>     * Assigns the specified value to the specified data series in the current dataset.<a name="line.619"></a>
<FONT color="green">620</FONT>     * <a name="line.620"></a>
<FONT color="green">621</FONT>     * @param seriesLabel Label of the series to which {@code value} is to be assigned. <a name="line.621"></a>
<FONT color="green">622</FONT>     * @param value A value to include in the current dataset ({@code null} will be<a name="line.622"></a>
<FONT color="green">623</FONT>     * converted to the empty string {@code ""}).<a name="line.623"></a>
<FONT color="green">624</FONT>     */<a name="line.624"></a>
<FONT color="green">625</FONT>    public void setDataValue(String seriesLabel, String value) {<a name="line.625"></a>
<FONT color="green">626</FONT>            if (null == seriesLabel)<a name="line.626"></a>
<FONT color="green">627</FONT>                    throw new NullPointerException("Data series label may not be null");<a name="line.627"></a>
<FONT color="green">628</FONT>            dataCache.put(seriesLabel.trim(), null == value ? "" : value);<a name="line.628"></a>
<FONT color="green">629</FONT>    }<a name="line.629"></a>
<FONT color="green">630</FONT>    <a name="line.630"></a>
<FONT color="green">631</FONT>    /**<a name="line.631"></a>
<FONT color="green">632</FONT>     * Assigns the specified value to the data series at the specified index in the<a name="line.632"></a>
<FONT color="green">633</FONT>     * current dataset.<a name="line.633"></a>
<FONT color="green">634</FONT>     * <a name="line.634"></a>
<FONT color="green">635</FONT>     * @param seriesIndex Column index of the series to which {@code value} is to be assigned. <a name="line.635"></a>
<FONT color="green">636</FONT>     * @param value A value to include in the current dataset ({@code null} will be<a name="line.636"></a>
<FONT color="green">637</FONT>     * converted to the empty string {@code ""}).<a name="line.637"></a>
<FONT color="green">638</FONT>     * @throws IllegalArgumentException If {@code seriesIndex &lt; 0} or if<a name="line.638"></a>
<FONT color="green">639</FONT>     * {@code seriesIndex &gt;= (number of data-series defined for this writer)}. <a name="line.639"></a>
<FONT color="green">640</FONT>     */<a name="line.640"></a>
<FONT color="green">641</FONT>    public void setDataValue(int seriesIndex, String value) {<a name="line.641"></a>
<FONT color="green">642</FONT>            if (0 &gt; seriesIndex)<a name="line.642"></a>
<FONT color="green">643</FONT>                    throw new IllegalArgumentException("Series index may not be negative");<a name="line.643"></a>
<FONT color="green">644</FONT>            if (dataSeriesLabels.size() &lt;= seriesIndex)<a name="line.644"></a>
<FONT color="green">645</FONT>                    throw new IllegalArgumentException("Series index may not be &gt;= number of data series (" + <a name="line.645"></a>
<FONT color="green">646</FONT>                                                                                       seriesIndex + " &gt;=" + dataSeriesLabels.size()+")");<a name="line.646"></a>
<FONT color="green">647</FONT>            dataCache.put(dataSeriesLabels.get(seriesIndex), null == value ? "" : value);<a name="line.647"></a>
<FONT color="green">648</FONT>    }<a name="line.648"></a>
<FONT color="green">649</FONT>    <a name="line.649"></a>
<FONT color="green">650</FONT>    /**<a name="line.650"></a>
<FONT color="green">651</FONT>     * Assigns the specified value to the next data series in the current dataset.<a name="line.651"></a>
<FONT color="green">652</FONT>     * The "next"-pointer is reset each time a dataset is written to the stream.<a name="line.652"></a>
<FONT color="green">653</FONT>     *  <a name="line.653"></a>
<FONT color="green">654</FONT>     * @param value A value to include in the current dataset ({@code null} will be<a name="line.654"></a>
<FONT color="green">655</FONT>     * converted to the empty string {@code ""}).<a name="line.655"></a>
<FONT color="green">656</FONT>     * @throws IllegalArgumentException If there are no more data series defined for this writer.<a name="line.656"></a>
<FONT color="green">657</FONT>     */<a name="line.657"></a>
<FONT color="green">658</FONT>    public void setDataValue(String value) {<a name="line.658"></a>
<FONT color="green">659</FONT>            setDataValue(currentSeriesIndex++, value);      <a name="line.659"></a>
<FONT color="green">660</FONT>    }<a name="line.660"></a>
<FONT color="green">661</FONT>    <a name="line.661"></a>
<FONT color="green">662</FONT>    /**<a name="line.662"></a>
<FONT color="green">663</FONT>     * Gets the data value which has been previously associated with the specified data series in the<a name="line.663"></a>
<FONT color="green">664</FONT>     * current dataset.<a name="line.664"></a>
<FONT color="green">665</FONT>     * <a name="line.665"></a>
<FONT color="green">666</FONT>     * @param seriesLabel The label of the data series to query.<a name="line.666"></a>
<FONT color="green">667</FONT>     * @return The data value which has been previously associated with the specified series in the<a name="line.667"></a>
<FONT color="green">668</FONT>     * current dataset as a {@code String} or {@code null} if no value was associated with the specified<a name="line.668"></a>
<FONT color="green">669</FONT>     * data series. <a name="line.669"></a>
<FONT color="green">670</FONT>     */<a name="line.670"></a>
<FONT color="green">671</FONT>    public String getDataValue(String seriesLabel) {<a name="line.671"></a>
<FONT color="green">672</FONT>            if (null == seriesLabel)<a name="line.672"></a>
<FONT color="green">673</FONT>                    throw new NullPointerException("Data series label may not be null");<a name="line.673"></a>
<FONT color="green">674</FONT>            return dataCache.get(seriesLabel.trim());<a name="line.674"></a>
<FONT color="green">675</FONT>    }<a name="line.675"></a>
<FONT color="green">676</FONT>    <a name="line.676"></a>
<FONT color="green">677</FONT>    /**<a name="line.677"></a>
<FONT color="green">678</FONT>     * Gets the data value which has been previously associated with the specified data series in the<a name="line.678"></a>
<FONT color="green">679</FONT>     * current dataset.<a name="line.679"></a>
<FONT color="green">680</FONT>     * <a name="line.680"></a>
<FONT color="green">681</FONT>     * @param seriesIndex Column index of the data series to query.<a name="line.681"></a>
<FONT color="green">682</FONT>     * @return The data value which has been previously associated with the specified series in the<a name="line.682"></a>
<FONT color="green">683</FONT>     * current dataset as a {@code String} or {@code null} if no value was associated with the specified<a name="line.683"></a>
<FONT color="green">684</FONT>     * data series. <a name="line.684"></a>
<FONT color="green">685</FONT>     */<a name="line.685"></a>
<FONT color="green">686</FONT>    public String getDataValue(int seriesIndex) {<a name="line.686"></a>
<FONT color="green">687</FONT>            if (0 &gt; seriesIndex)<a name="line.687"></a>
<FONT color="green">688</FONT>                    throw new IllegalArgumentException("Series index may not be negative");<a name="line.688"></a>
<FONT color="green">689</FONT>            if (dataSeriesLabels.size() &lt;= seriesIndex)<a name="line.689"></a>
<FONT color="green">690</FONT>                    throw new IllegalArgumentException("Series index may not be &gt;= number of data series (" + <a name="line.690"></a>
<FONT color="green">691</FONT>                                                                                       seriesIndex + " &gt;=" + dataSeriesLabels.size()+")");<a name="line.691"></a>
<FONT color="green">692</FONT>            <a name="line.692"></a>
<FONT color="green">693</FONT>            return dataCache.get(dataSeriesLabels.get(seriesIndex));<a name="line.693"></a>
<FONT color="green">694</FONT>    }<a name="line.694"></a>
<FONT color="green">695</FONT>    <a name="line.695"></a>
<FONT color="green">696</FONT>    /**<a name="line.696"></a>
<FONT color="green">697</FONT>     * Writes the current dataset to the output stream.<a name="line.697"></a>
<FONT color="green">698</FONT>     * If a data separator was explicitly defined and not yet written, it is written to the output stream<a name="line.698"></a>
<FONT color="green">699</FONT>     * before the data.<a name="line.699"></a>
<FONT color="green">700</FONT>     * If the data series (column) labels were not yet written, they are written to the output stream<a name="line.700"></a>
<FONT color="green">701</FONT>     * before the data.<a name="line.701"></a>
<FONT color="green">702</FONT>     * After invoking this method the data separator cannot be changed and no more new data series can be defined.<a name="line.702"></a>
<FONT color="green">703</FONT>     */<a name="line.703"></a>
<FONT color="green">704</FONT>    public void writeDataSet() {<a name="line.704"></a>
<FONT color="green">705</FONT>            checkWriteSeparatorDefinition();<a name="line.705"></a>
<FONT color="green">706</FONT>            checkWriteSeriesLabels();<a name="line.706"></a>
<FONT color="green">707</FONT>            try {<a name="line.707"></a>
<FONT color="green">708</FONT>                    String sep = "";<a name="line.708"></a>
<FONT color="green">709</FONT>                    String val = null;<a name="line.709"></a>
<FONT color="green">710</FONT>                    for (String label : dataSeriesLabels) {<a name="line.710"></a>
<FONT color="green">711</FONT>                            val = dataCache.get(label);<a name="line.711"></a>
<FONT color="green">712</FONT>                            if (null == val)<a name="line.712"></a>
<FONT color="green">713</FONT>                                    val = "";<a name="line.713"></a>
<FONT color="green">714</FONT>                            out.write(sep);                 <a name="line.714"></a>
<FONT color="green">715</FONT>                            out.write(val);<a name="line.715"></a>
<FONT color="green">716</FONT>                            sep = this.separator;<a name="line.716"></a>
<FONT color="green">717</FONT>                    }<a name="line.717"></a>
<FONT color="green">718</FONT>                    out.newLine();<a name="line.718"></a>
<FONT color="green">719</FONT>                    out.flush();<a name="line.719"></a>
<FONT color="green">720</FONT>            } catch (IOException e) {<a name="line.720"></a>
<FONT color="green">721</FONT>                    ioException = e;<a name="line.721"></a>
<FONT color="green">722</FONT>            }<a name="line.722"></a>
<FONT color="green">723</FONT>            dataCache.clear();<a name="line.723"></a>
<FONT color="green">724</FONT>            currentSeriesIndex = 0;<a name="line.724"></a>
<FONT color="green">725</FONT>    }<a name="line.725"></a>
<FONT color="green">726</FONT>    <a name="line.726"></a>
<FONT color="green">727</FONT>    /**<a name="line.727"></a>
<FONT color="green">728</FONT>     * Check whether a recent operation caused an {@code IOException}. <a name="line.728"></a>
<FONT color="green">729</FONT>     * @return {@code true} if an {@code IOException} was encountered after this writer was created or after<a name="line.729"></a>
<FONT color="green">730</FONT>     * the last call to {@link #resetIOException()}, {@code false} otherwise.<a name="line.730"></a>
<FONT color="green">731</FONT>     */<a name="line.731"></a>
<FONT color="green">732</FONT>    public boolean hadIOException() {<a name="line.732"></a>
<FONT color="green">733</FONT>            return (null != ioException);<a name="line.733"></a>
<FONT color="green">734</FONT>    }<a name="line.734"></a>
<FONT color="green">735</FONT>    <a name="line.735"></a>
<FONT color="green">736</FONT>    /**<a name="line.736"></a>
<FONT color="green">737</FONT>     * Gets the last {@code IOException} encountered by this writer.<a name="line.737"></a>
<FONT color="green">738</FONT>     * <a name="line.738"></a>
<FONT color="green">739</FONT>     * @return If {@link #hadIOException()} returns {@code true} - the last {@code IOException} encountered<a name="line.739"></a>
<FONT color="green">740</FONT>     * by this writer, otherwise - {@code null}.<a name="line.740"></a>
<FONT color="green">741</FONT>     */<a name="line.741"></a>
<FONT color="green">742</FONT>    public IOException getIOException() {<a name="line.742"></a>
<FONT color="green">743</FONT>            return ioException;<a name="line.743"></a>
<FONT color="green">744</FONT>    }<a name="line.744"></a>
<FONT color="green">745</FONT>    <a name="line.745"></a>
<FONT color="green">746</FONT>    /**<a name="line.746"></a>
<FONT color="green">747</FONT>     * Deletes any internal state concerned with previously encountered {@code IOException}s.<a name="line.747"></a>
<FONT color="green">748</FONT>     *<a name="line.748"></a>
<FONT color="green">749</FONT>     */<a name="line.749"></a>
<FONT color="green">750</FONT>    public void resetIOException() {<a name="line.750"></a>
<FONT color="green">751</FONT>            ioException = null;<a name="line.751"></a>
<FONT color="green">752</FONT>    }<a name="line.752"></a>
<FONT color="green">753</FONT>    <a name="line.753"></a>
<FONT color="green">754</FONT>    } // public class DataStreamWriter<a name="line.754"></a>




























































</PRE>
</BODY>
</HTML>
