package ie.tcd.gmf.visgrid.graph.actions;

import org.LiveGraph.LiveGraph;
import org.LiveGraph.settings.DataFileSettings;
import org.eclipse.jface.action.IAction;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.ui.IWorkbenchWindow;
import org.eclipse.ui.IWorkbenchWindowActionDelegate;
import org.eclipse.jface.dialogs.MessageDialog;

/**
 * Our sample action implements workbench action delegate.
 * The action proxy will be created by the workbench and
 * shown in the UI. When the user tries to use the action,
 * this delegate will be created and execution will be 
 * delegated to it.
 * @see IWorkbenchWindowActionDelegate
 */
public class LiveGraph implements IWorkbenchWindowActionDelegate {
	private IWorkbenchWindow window;
	/**
	 * The constructor.
	 */
	public LiveGraph() {
	}

	/**
	 * The action has been activated. The argument of the
	 * method represents the 'real' action sitting
	 * in the workbench UI.
	 * @see IWorkbenchWindowActionDelegate#run
	 */
	public void run(IAction action) {
		try {
			// Set the settings and save the settings file
			DataFileSettings dfs = new DataFileSettings();
			dfs.setDataFile(graph.getDataLoc());
			dfs.setUpdateFrequency(1000);
			// Create the paramaters to be in visGridGraphData dir and launch
			LiveGraph app = LiveGraph.application();
			String loc = this.graph.saveLocation.getPath().toString();
			// save the settings above, ie. datafilesettings
			dfs.save(loc+"dataFileSettings.lgdfs");
			String[] params = new String[] {"-dfs",loc+ "dataFileSettings.lgdfs","-gs",loc+"graphSettings.lggs","-dss","dataSeriesSettings.lgdss"};
			app.execStandalone(params);
		} catch (Exception e){
			System.err.println("Error when starting liveGraph");
			e.printStackTrace();
		}
	}

	/**
	 * Selection in the workbench has been changed. We 
	 * can change the state of the 'real' action here
	 * if we want, but this can only happen after 
	 * the delegate has been created.
	 * @see IWorkbenchWindowActionDelegate#selectionChanged
	 */
	public void selectionChanged(IAction action, ISelection selection) {
	}

	/**
	 * We can use this method to dispose of any system
	 * resources we previously allocated.
	 * @see IWorkbenchWindowActionDelegate#dispose
	 */
	public void dispose() {
	}

	/**
	 * We will cache window object in order to
	 * be able to provide parent shell for the message dialog.
	 * @see IWorkbenchWindowActionDelegate#init
	 */
	public void init(IWorkbenchWindow window) {
		this.window = window;
	}
}