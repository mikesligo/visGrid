<HTML>
<BODY BGCOLOR="white">
<PRE>
<FONT color="green">001</FONT>    package org.LiveGraph;<a name="line.1"></a>
<FONT color="green">002</FONT>    <a name="line.2"></a>
<FONT color="green">003</FONT>    import java.io.File;<a name="line.3"></a>
<FONT color="green">004</FONT>    import java.util.HashMap;<a name="line.4"></a>
<FONT color="green">005</FONT>    import java.util.Map;<a name="line.5"></a>
<FONT color="green">006</FONT>    <a name="line.6"></a>
<FONT color="green">007</FONT>    import javax.swing.JOptionPane;<a name="line.7"></a>
<FONT color="green">008</FONT>    <a name="line.8"></a>
<FONT color="green">009</FONT>    import org.LiveGraph.dataCache.DataCache;<a name="line.9"></a>
<FONT color="green">010</FONT>    import org.LiveGraph.dataCache.UpdateInvoker;<a name="line.10"></a>
<FONT color="green">011</FONT>    import org.LiveGraph.gui.DataFileSettingsWindow;<a name="line.11"></a>
<FONT color="green">012</FONT>    import org.LiveGraph.gui.GraphSettingsWindow;<a name="line.12"></a>
<FONT color="green">013</FONT>    import org.LiveGraph.gui.MainWindow;<a name="line.13"></a>
<FONT color="green">014</FONT>    import org.LiveGraph.gui.PlotWindow;<a name="line.14"></a>
<FONT color="green">015</FONT>    import org.LiveGraph.gui.SeriesSettingsWindow;<a name="line.15"></a>
<FONT color="green">016</FONT>    import org.LiveGraph.plot.GraphExporter;<a name="line.16"></a>
<FONT color="green">017</FONT>    import org.LiveGraph.plot.Plotter;<a name="line.17"></a>
<FONT color="green">018</FONT>    import org.LiveGraph.settings.DataFileSettings;<a name="line.18"></a>
<FONT color="green">019</FONT>    import org.LiveGraph.settings.DataSeriesSettings;<a name="line.19"></a>
<FONT color="green">020</FONT>    import org.LiveGraph.settings.ErrorWhileSettingHasChangedProcessingException;<a name="line.20"></a>
<FONT color="green">021</FONT>    import org.LiveGraph.settings.GraphSettings;<a name="line.21"></a>
<FONT color="green">022</FONT>    <a name="line.22"></a>
<FONT color="green">023</FONT>    import com.softnetConsult.utils.exceptions.ThrowableTools;<a name="line.23"></a>
<FONT color="green">024</FONT>    <a name="line.24"></a>
<FONT color="green">025</FONT>    <a name="line.25"></a>
<FONT color="green">026</FONT>    /**<a name="line.26"></a>
<FONT color="green">027</FONT>     * This is the main executable class of the LiveGraph plotter application.<a name="line.27"></a>
<FONT color="green">028</FONT>     * An instance of this class represents the application itself. The tasks of this<a name="line.28"></a>
<FONT color="green">029</FONT>     * class is to interpret the command line parameters, to set-up and to start-up<a name="line.29"></a>
<FONT color="green">030</FONT>     * the GUI and the back-end of the application, and to provide some<a name="line.30"></a>
<FONT color="green">031</FONT>     * functions which are used by different modules of the application to communicate<a name="line.31"></a>
<FONT color="green">032</FONT>     * with each other and to access global data, such as settings.<a name="line.32"></a>
<FONT color="green">033</FONT>     * <a name="line.33"></a>
<FONT color="green">034</FONT>     * &lt;p style="font-size:smaller;"&gt;This product includes software developed by the<a name="line.34"></a>
<FONT color="green">035</FONT>     *    &lt;strong&gt;LiveGraph&lt;/strong&gt; project and its contributors.&lt;br /&gt;<a name="line.35"></a>
<FONT color="green">036</FONT>     *    (&lt;a href="http://www.live-graph.org" target="_blank"&gt;http://www.live-graph.org&lt;/a&gt;)&lt;br /&gt;<a name="line.36"></a>
<FONT color="green">037</FONT>     *    Copyright (c) 2007 G. Paperin.&lt;br /&gt;<a name="line.37"></a>
<FONT color="green">038</FONT>     *    All rights reserved.<a name="line.38"></a>
<FONT color="green">039</FONT>     * &lt;/p&gt;<a name="line.39"></a>
<FONT color="green">040</FONT>     * &lt;p style="font-size:smaller;"&gt;File: LiveGraph.java&lt;/p&gt;<a name="line.40"></a>
<FONT color="green">041</FONT>     * &lt;p style="font-size:smaller;"&gt;Redistribution and use in source and binary forms, with or<a name="line.41"></a>
<FONT color="green">042</FONT>     *    without modification, are permitted provided that the following terms and conditions are met:<a name="line.42"></a>
<FONT color="green">043</FONT>     * &lt;/p&gt;<a name="line.43"></a>
<FONT color="green">044</FONT>     * &lt;p style="font-size:smaller;"&gt;1. Redistributions of source code must retain the above<a name="line.44"></a>
<FONT color="green">045</FONT>     *    acknowledgement of the LiveGraph project and its web-site, the above copyright notice,<a name="line.45"></a>
<FONT color="green">046</FONT>     *    this list of conditions and the following disclaimer.&lt;br /&gt;<a name="line.46"></a>
<FONT color="green">047</FONT>     *    2. Redistributions in binary form must reproduce the above acknowledgement of the<a name="line.47"></a>
<FONT color="green">048</FONT>     *    LiveGraph project and its web-site, the above copyright notice, this list of conditions<a name="line.48"></a>
<FONT color="green">049</FONT>     *    and the following disclaimer in the documentation and/or other materials provided with<a name="line.49"></a>
<FONT color="green">050</FONT>     *    the distribution.&lt;br /&gt;<a name="line.50"></a>
<FONT color="green">051</FONT>     *    3. All advertising materials mentioning features or use of this software or any derived<a name="line.51"></a>
<FONT color="green">052</FONT>     *    software must display the following acknowledgement:&lt;br /&gt;<a name="line.52"></a>
<FONT color="green">053</FONT>     *    &lt;em&gt;This product includes software developed by the LiveGraph project and its<a name="line.53"></a>
<FONT color="green">054</FONT>     *    contributors.&lt;br /&gt;(http://www.live-graph.org)&lt;/em&gt;&lt;br /&gt;<a name="line.54"></a>
<FONT color="green">055</FONT>     *    4. All advertising materials distributed in form of HTML pages or any other technology<a name="line.55"></a>
<FONT color="green">056</FONT>     *    permitting active hyper-links that mention features or use of this software or any<a name="line.56"></a>
<FONT color="green">057</FONT>     *    derived software must display the acknowledgment specified in condition 3 of this<a name="line.57"></a>
<FONT color="green">058</FONT>     *    agreement, and in addition, include a visible and working hyper-link to the LiveGraph<a name="line.58"></a>
<FONT color="green">059</FONT>     *    homepage (http://www.live-graph.org).<a name="line.59"></a>
<FONT color="green">060</FONT>     * &lt;/p&gt;<a name="line.60"></a>
<FONT color="green">061</FONT>     * &lt;p style="font-size:smaller;"&gt;THIS SOFTWARE IS PROVIDED &amp;quot;AS IS&amp;quot;, WITHOUT WARRANTY<a name="line.61"></a>
<FONT color="green">062</FONT>     *    OF ANY KIND, EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF<a name="line.62"></a>
<FONT color="green">063</FONT>     *    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  NONINFRINGEMENT. IN NO EVENT SHALL<a name="line.63"></a>
<FONT color="green">064</FONT>     *    THE AUTHORS, CONTRIBUTORS OR COPYRIGHT  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER<a name="line.64"></a>
<FONT color="green">065</FONT>     *    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING  FROM, OUT OF OR<a name="line.65"></a>
<FONT color="green">066</FONT>     *    IN CONNECTION WITH THE SOFTWARE OR THE USE OR  OTHER DEALINGS IN THE SOFTWARE.<a name="line.66"></a>
<FONT color="green">067</FONT>     * &lt;/p&gt; <a name="line.67"></a>
<FONT color="green">068</FONT>     *  <a name="line.68"></a>
<FONT color="green">069</FONT>     * @author Greg Paperin (&lt;a href="http://www.paperin.org" target="_blank"&gt;http://www.paperin.org&lt;/a&gt;)<a name="line.69"></a>
<FONT color="green">070</FONT>     * @version {@value org.LiveGraph.LiveGraph#version}<a name="line.70"></a>
<FONT color="green">071</FONT>     */<a name="line.71"></a>
<FONT color="green">072</FONT>    public class LiveGraph {<a name="line.72"></a>
<FONT color="green">073</FONT>    <a name="line.73"></a>
<FONT color="green">074</FONT>    /**<a name="line.74"></a>
<FONT color="green">075</FONT>     * LiveGraph software version.<a name="line.75"></a>
<FONT color="green">076</FONT>     */<a name="line.76"></a>
<FONT color="green">077</FONT>    public static final String version = "1.1.0";<a name="line.77"></a>
<FONT color="green">078</FONT>    <a name="line.78"></a>
<FONT color="green">079</FONT>    // Static stuff {<a name="line.79"></a>
<FONT color="green">080</FONT>    <a name="line.80"></a>
<FONT color="green">081</FONT>    /**<a name="line.81"></a>
<FONT color="green">082</FONT>     * Singleton application instance.<a name="line.82"></a>
<FONT color="green">083</FONT>     */<a name="line.83"></a>
<FONT color="green">084</FONT>    private static LiveGraph app = null;<a name="line.84"></a>
<FONT color="green">085</FONT>    <a name="line.85"></a>
<FONT color="green">086</FONT>    /**<a name="line.86"></a>
<FONT color="green">087</FONT>     * Singleton application access method.<a name="line.87"></a>
<FONT color="green">088</FONT>     * <a name="line.88"></a>
<FONT color="green">089</FONT>     * @return The singleton application object.<a name="line.89"></a>
<FONT color="green">090</FONT>     */<a name="line.90"></a>
<FONT color="green">091</FONT>    public static LiveGraph application() {<a name="line.91"></a>
<FONT color="green">092</FONT>            if (null == LiveGraph.app)<a name="line.92"></a>
<FONT color="green">093</FONT>                    LiveGraph.app = new LiveGraph();<a name="line.93"></a>
<FONT color="green">094</FONT>            return LiveGraph.app;<a name="line.94"></a>
<FONT color="green">095</FONT>    }<a name="line.95"></a>
<FONT color="green">096</FONT>    <a name="line.96"></a>
<FONT color="green">097</FONT>    /**<a name="line.97"></a>
<FONT color="green">098</FONT>     * Program entry point.<a name="line.98"></a>
<FONT color="green">099</FONT>     * Creates an application instance and calls the {@link #exec(String[])} method.<a name="line.99"></a>
<FONT color="green">100</FONT>     * <a name="line.100"></a>
<FONT color="green">101</FONT>     * @param args Command line parameters.<a name="line.101"></a>
<FONT color="green">102</FONT>     */<a name="line.102"></a>
<FONT color="green">103</FONT>    public static void main(String [] args) {       <a name="line.103"></a>
<FONT color="green">104</FONT>            LiveGraph.application().exec(args);<a name="line.104"></a>
<FONT color="green">105</FONT>    }<a name="line.105"></a>
<FONT color="green">106</FONT>    <a name="line.106"></a>
<FONT color="green">107</FONT>    // } end of static stuff.<a name="line.107"></a>
<FONT color="green">108</FONT>    <a name="line.108"></a>
<FONT color="green">109</FONT>    <a name="line.109"></a>
<FONT color="green">110</FONT>    /**<a name="line.110"></a>
<FONT color="green">111</FONT>     * Application's data update invoker.<a name="line.111"></a>
<FONT color="green">112</FONT>     */<a name="line.112"></a>
<FONT color="green">113</FONT>    private UpdateInvoker updateInvoker = null;<a name="line.113"></a>
<FONT color="green">114</FONT>    <a name="line.114"></a>
<FONT color="green">115</FONT>    <a name="line.115"></a>
<FONT color="green">116</FONT>    /**<a name="line.116"></a>
<FONT color="green">117</FONT>     * Main GUI window of the application. <a name="line.117"></a>
<FONT color="green">118</FONT>     */<a name="line.118"></a>
<FONT color="green">119</FONT>    private MainWindow mainWindow = null;<a name="line.119"></a>
<FONT color="green">120</FONT>    <a name="line.120"></a>
<FONT color="green">121</FONT>    /**<a name="line.121"></a>
<FONT color="green">122</FONT>     * GUI window for data file settings.<a name="line.122"></a>
<FONT color="green">123</FONT>     */<a name="line.123"></a>
<FONT color="green">124</FONT>    private DataFileSettingsWindow dataFileSettingsWindow = null;<a name="line.124"></a>
<FONT color="green">125</FONT>    <a name="line.125"></a>
<FONT color="green">126</FONT>    /**<a name="line.126"></a>
<FONT color="green">127</FONT>     * GUI window for graph settings.<a name="line.127"></a>
<FONT color="green">128</FONT>     */<a name="line.128"></a>
<FONT color="green">129</FONT>    private GraphSettingsWindow graphSettingsWindow = null;<a name="line.129"></a>
<FONT color="green">130</FONT>    <a name="line.130"></a>
<FONT color="green">131</FONT>    /**<a name="line.131"></a>
<FONT color="green">132</FONT>     * GUI window for data series settings.<a name="line.132"></a>
<FONT color="green">133</FONT>     */<a name="line.133"></a>
<FONT color="green">134</FONT>    private SeriesSettingsWindow seriesSettingsWindow = null;<a name="line.134"></a>
<FONT color="green">135</FONT>    <a name="line.135"></a>
<FONT color="green">136</FONT>    /**<a name="line.136"></a>
<FONT color="green">137</FONT>     * GUI window for the actual graph plot.<a name="line.137"></a>
<FONT color="green">138</FONT>     */<a name="line.138"></a>
<FONT color="green">139</FONT>    private PlotWindow plotWindow = null;<a name="line.139"></a>
<FONT color="green">140</FONT>    <a name="line.140"></a>
<FONT color="green">141</FONT>    <a name="line.141"></a>
<FONT color="green">142</FONT>    /**<a name="line.142"></a>
<FONT color="green">143</FONT>     * Holds the data file settings for the application.<a name="line.143"></a>
<FONT color="green">144</FONT>     */<a name="line.144"></a>
<FONT color="green">145</FONT>    private DataFileSettings dataFileSettings = null;<a name="line.145"></a>
<FONT color="green">146</FONT>    <a name="line.146"></a>
<FONT color="green">147</FONT>    /**<a name="line.147"></a>
<FONT color="green">148</FONT>     * Holds the graph settings for the application.<a name="line.148"></a>
<FONT color="green">149</FONT>     */<a name="line.149"></a>
<FONT color="green">150</FONT>    private GraphSettings graphSettings = null;<a name="line.150"></a>
<FONT color="green">151</FONT>    <a name="line.151"></a>
<FONT color="green">152</FONT>    /**<a name="line.152"></a>
<FONT color="green">153</FONT>     * Holds the data series settings for the application.<a name="line.153"></a>
<FONT color="green">154</FONT>     */<a name="line.154"></a>
<FONT color="green">155</FONT>    private DataSeriesSettings seriesSettings = null;<a name="line.155"></a>
<FONT color="green">156</FONT>    <a name="line.156"></a>
<FONT color="green">157</FONT>    /**<a name="line.157"></a>
<FONT color="green">158</FONT>     * Holds the graph exporter.<a name="line.158"></a>
<FONT color="green">159</FONT>     */<a name="line.159"></a>
<FONT color="green">160</FONT>    private GraphExporter graphExporter = null;<a name="line.160"></a>
<FONT color="green">161</FONT>    <a name="line.161"></a>
<FONT color="green">162</FONT>    <a name="line.162"></a>
<FONT color="green">163</FONT>    /**<a name="line.163"></a>
<FONT color="green">164</FONT>     * Main program method.<a name="line.164"></a>
<FONT color="green">165</FONT>     * It parses the command line parameters, sets up the GUI and the back-end components<a name="line.165"></a>
<FONT color="green">166</FONT>     * of the application and configures the their communication. It then loads the default<a name="line.166"></a>
<FONT color="green">167</FONT>     * settings and passes the execution control to the main Swing GUI loop. <a name="line.167"></a>
<FONT color="green">168</FONT>     * <a name="line.168"></a>
<FONT color="green">169</FONT>     * @param args Command line arguments.<a name="line.169"></a>
<FONT color="green">170</FONT>     */<a name="line.170"></a>
<FONT color="green">171</FONT>    public void exec(String [] args) {<a name="line.171"></a>
<FONT color="green">172</FONT>            <a name="line.172"></a>
<FONT color="green">173</FONT>            // Setup exception handling:<a name="line.173"></a>
<FONT color="green">174</FONT>            installUncaughtExceptionHandler();<a name="line.174"></a>
<FONT color="green">175</FONT>            <a name="line.175"></a>
<FONT color="green">176</FONT>            // Buffer for names of the settings files to load automatically:<a name="line.176"></a>
<FONT color="green">177</FONT>            Map&lt;String, String&gt; startupFiles = new HashMap&lt;String, String&gt;();<a name="line.177"></a>
<FONT color="green">178</FONT>            <a name="line.178"></a>
<FONT color="green">179</FONT>            // Parse the command line arguments and combine the results with default settings:<a name="line.179"></a>
<FONT color="green">180</FONT>            String argsParseErrorMsg = getInitialSettingsFiles(args, startupFiles);<a name="line.180"></a>
<FONT color="green">181</FONT>            <a name="line.181"></a>
<FONT color="green">182</FONT>            // Create settings holder objects:<a name="line.182"></a>
<FONT color="green">183</FONT>            dataFileSettings = new DataFileSettings();<a name="line.183"></a>
<FONT color="green">184</FONT>            graphSettings = new GraphSettings();<a name="line.184"></a>
<FONT color="green">185</FONT>            seriesSettings = new DataSeriesSettings();<a name="line.185"></a>
<FONT color="green">186</FONT>            <a name="line.186"></a>
<FONT color="green">187</FONT>            // Set-up communication between different settings objects:<a name="line.187"></a>
<FONT color="green">188</FONT>            graphSettings.addObserver(seriesSettings);<a name="line.188"></a>
<FONT color="green">189</FONT>            <a name="line.189"></a>
<FONT color="green">190</FONT>            // Create the data cache and the data update invoker,<a name="line.190"></a>
<FONT color="green">191</FONT>            // set-up their communication with other objects,<a name="line.191"></a>
<FONT color="green">192</FONT>            // and create the data update invocation thread:<a name="line.192"></a>
<FONT color="green">193</FONT>            DataCache dataCache = new DataCache();<a name="line.193"></a>
<FONT color="green">194</FONT>            updateInvoker = new UpdateInvoker();<a name="line.194"></a>
<FONT color="green">195</FONT>            updateInvoker.setDataCache(dataCache);<a name="line.195"></a>
<FONT color="green">196</FONT>            dataFileSettings.addObserver(updateInvoker);<a name="line.196"></a>
<FONT color="green">197</FONT>            Thread fileUpdateInvokerThread = new Thread(updateInvoker, "Update invoker thread");<a name="line.197"></a>
<FONT color="green">198</FONT>            <a name="line.198"></a>
<FONT color="green">199</FONT>            // Create the graph plotter and set-up its communication with other objects:<a name="line.199"></a>
<FONT color="green">200</FONT>            Plotter mainPlotter = new Plotter(dataCache);<a name="line.200"></a>
<FONT color="green">201</FONT>            dataCache.addObserver(mainPlotter);<a name="line.201"></a>
<FONT color="green">202</FONT>            graphSettings.addObserver(mainPlotter);<a name="line.202"></a>
<FONT color="green">203</FONT>            seriesSettings.addObserver(mainPlotter);<a name="line.203"></a>
<FONT color="green">204</FONT>            <a name="line.204"></a>
<FONT color="green">205</FONT>            // Create the graphExporter:<a name="line.205"></a>
<FONT color="green">206</FONT>            this.graphExporter = new GraphExporter(mainPlotter);<a name="line.206"></a>
<FONT color="green">207</FONT>            <a name="line.207"></a>
<FONT color="green">208</FONT>            // Create the main application window:<a name="line.208"></a>
<FONT color="green">209</FONT>            mainWindow = new MainWindow();<a name="line.209"></a>
<FONT color="green">210</FONT>            mainWindow.setVisible(true);<a name="line.210"></a>
<FONT color="green">211</FONT>            <a name="line.211"></a>
<FONT color="green">212</FONT>            // Create the data file settings window and set-up its communication with other objects:<a name="line.212"></a>
<FONT color="green">213</FONT>            dataFileSettingsWindow = new DataFileSettingsWindow();<a name="line.213"></a>
<FONT color="green">214</FONT>            setDisplayDataFileSettingsWindow(true);<a name="line.214"></a>
<FONT color="green">215</FONT>            updateInvoker.addObserver(dataFileSettingsWindow);<a name="line.215"></a>
<FONT color="green">216</FONT>            dataCache.addObserver(dataFileSettingsWindow);<a name="line.216"></a>
<FONT color="green">217</FONT>            dataFileSettings.addObserver(dataFileSettingsWindow);<a name="line.217"></a>
<FONT color="green">218</FONT>            <a name="line.218"></a>
<FONT color="green">219</FONT>            // Create the graph settings window and set-up its communication with other objects:<a name="line.219"></a>
<FONT color="green">220</FONT>            graphSettingsWindow = new GraphSettingsWindow();<a name="line.220"></a>
<FONT color="green">221</FONT>            setDisplayGraphSettingsWindow(true);<a name="line.221"></a>
<FONT color="green">222</FONT>            dataCache.addObserver(graphSettingsWindow);<a name="line.222"></a>
<FONT color="green">223</FONT>            graphSettings.addObserver(graphSettingsWindow);<a name="line.223"></a>
<FONT color="green">224</FONT>            <a name="line.224"></a>
<FONT color="green">225</FONT>            // Create the data series settings window and set-up its communication with other objects:<a name="line.225"></a>
<FONT color="green">226</FONT>            seriesSettingsWindow = new SeriesSettingsWindow();<a name="line.226"></a>
<FONT color="green">227</FONT>            setDisplaySeriesSettingsWindow(true);<a name="line.227"></a>
<FONT color="green">228</FONT>            dataCache.addObserver(seriesSettingsWindow);<a name="line.228"></a>
<FONT color="green">229</FONT>            seriesSettings.addObserver(seriesSettingsWindow);<a name="line.229"></a>
<FONT color="green">230</FONT>            graphSettings.addObserver(seriesSettingsWindow);<a name="line.230"></a>
<FONT color="green">231</FONT>            <a name="line.231"></a>
<FONT color="green">232</FONT>            // Create the graph plot window and set-up its communication with other objects:<a name="line.232"></a>
<FONT color="green">233</FONT>            plotWindow = new PlotWindow(mainPlotter);<a name="line.233"></a>
<FONT color="green">234</FONT>            setDisplayPlotWindow(true);<a name="line.234"></a>
<FONT color="green">235</FONT>            plotWindow.addSeriesHighlightListeners(seriesSettingsWindow);<a name="line.235"></a>
<FONT color="green">236</FONT>            dataCache.addObserver(plotWindow);<a name="line.236"></a>
<FONT color="green">237</FONT>            seriesSettings.addObserver(plotWindow);<a name="line.237"></a>
<FONT color="green">238</FONT>            graphSettings.addObserver(plotWindow);<a name="line.238"></a>
<FONT color="green">239</FONT>            <a name="line.239"></a>
<FONT color="green">240</FONT>            // Start the data update invocation thread:<a name="line.240"></a>
<FONT color="green">241</FONT>            fileUpdateInvokerThread.start();<a name="line.241"></a>
<FONT color="green">242</FONT>            <a name="line.242"></a>
<FONT color="green">243</FONT>            // Display any possible error messages about the command line arguments:<a name="line.243"></a>
<FONT color="green">244</FONT>            if (null != argsParseErrorMsg)<a name="line.244"></a>
<FONT color="green">245</FONT>                    logErrorLn(argsParseErrorMsg);<a name="line.245"></a>
<FONT color="green">246</FONT>            <a name="line.246"></a>
<FONT color="green">247</FONT>            // Load default or command-line specified graph settings:<a name="line.247"></a>
<FONT color="green">248</FONT>            if (startupFiles.containsKey("GraphSettings")) {<a name="line.248"></a>
<FONT color="green">249</FONT>                    String fn = startupFiles.get("GraphSettings");<a name="line.249"></a>
<FONT color="green">250</FONT>                    try {<a name="line.250"></a>
<FONT color="green">251</FONT>                            if (graphSettings.load(fn))<a name="line.251"></a>
<FONT color="green">252</FONT>                                    logSuccessLn("Initial graph settings loaded from \"" + fn + "\".");<a name="line.252"></a>
<FONT color="green">253</FONT>                            else<a name="line.253"></a>
<FONT color="green">254</FONT>                                    logErrorLn("Error while loading graph settings from \"" + fn + "\".");<a name="line.254"></a>
<FONT color="green">255</FONT>                    } catch (ErrorWhileSettingHasChangedProcessingException e) {<a name="line.255"></a>
<FONT color="green">256</FONT>                            logErrorLn("There was a problem while loading initial graph settings: \n"<a name="line.256"></a>
<FONT color="green">257</FONT>                                             + "    " + (null != e.getCause() ? e.getCause().getMessage() : e.getMessage()) + ".");                 <a name="line.257"></a>
<FONT color="green">258</FONT>                    }<a name="line.258"></a>
<FONT color="green">259</FONT>            }<a name="line.259"></a>
<FONT color="green">260</FONT>            <a name="line.260"></a>
<FONT color="green">261</FONT>            // Load default or command-line specified data series settings:<a name="line.261"></a>
<FONT color="green">262</FONT>            if (startupFiles.containsKey("DataSeriesSettings")) {<a name="line.262"></a>
<FONT color="green">263</FONT>                    String fn = startupFiles.get("DataSeriesSettings");<a name="line.263"></a>
<FONT color="green">264</FONT>                    try {<a name="line.264"></a>
<FONT color="green">265</FONT>                            if (seriesSettings.load(fn))<a name="line.265"></a>
<FONT color="green">266</FONT>                                    logSuccessLn("Initial data series settings loaded from \"" + fn + "\".");<a name="line.266"></a>
<FONT color="green">267</FONT>                            else<a name="line.267"></a>
<FONT color="green">268</FONT>                                    logErrorLn("Error while loading data series settings from \"" + fn + "\".");<a name="line.268"></a>
<FONT color="green">269</FONT>                    } catch (ErrorWhileSettingHasChangedProcessingException e) {<a name="line.269"></a>
<FONT color="green">270</FONT>                            logErrorLn("There was a problem while loading initial data series settings: \n"<a name="line.270"></a>
<FONT color="green">271</FONT>                                             + "    " + (null != e.getCause() ? e.getCause().getMessage() : e.getMessage()) + ".");<a name="line.271"></a>
<FONT color="green">272</FONT>                    }<a name="line.272"></a>
<FONT color="green">273</FONT>            }<a name="line.273"></a>
<FONT color="green">274</FONT>            <a name="line.274"></a>
<FONT color="green">275</FONT>            // Load default or command-line specified data file settings:<a name="line.275"></a>
<FONT color="green">276</FONT>            if (startupFiles.containsKey("DataFileSettings")) {<a name="line.276"></a>
<FONT color="green">277</FONT>                    String fn = startupFiles.get("DataFileSettings");<a name="line.277"></a>
<FONT color="green">278</FONT>                    try {<a name="line.278"></a>
<FONT color="green">279</FONT>                            if (dataFileSettings.load(fn))<a name="line.279"></a>
<FONT color="green">280</FONT>                                    logSuccessLn("Initial data file settings loaded from \"" + fn + "\".");<a name="line.280"></a>
<FONT color="green">281</FONT>                            else<a name="line.281"></a>
<FONT color="green">282</FONT>                                    logErrorLn("Error while loading data file settings from \"" + fn + "\".");<a name="line.282"></a>
<FONT color="green">283</FONT>                    } catch (ErrorWhileSettingHasChangedProcessingException e) {<a name="line.283"></a>
<FONT color="green">284</FONT>                            logErrorLn("There was a problem while loading initial data file settings: \n"<a name="line.284"></a>
<FONT color="green">285</FONT>                                             + "    " + (null != e.getCause() ? e.getCause().getMessage() : e.getMessage()) + ".");<a name="line.285"></a>
<FONT color="green">286</FONT>                            <a name="line.286"></a>
<FONT color="green">287</FONT>                    }<a name="line.287"></a>
<FONT color="green">288</FONT>            }<a name="line.288"></a>
<FONT color="green">289</FONT>            <a name="line.289"></a>
<FONT color="green">290</FONT>            if (!runsCorrectJavaVersion()) {<a name="line.290"></a>
<FONT color="green">291</FONT>                    JOptionPane.showMessageDialog(null, "The Java runtime environment you are using may not "<a name="line.291"></a>
<FONT color="green">292</FONT>                                                                                      + "support all program features.\n\n"<a name="line.292"></a>
<FONT color="green">293</FONT>                                                                                      + "LiveGraph is targeted for Java version 1.6 or later, "<a name="line.293"></a>
<FONT color="green">294</FONT>                                                                                      + "however, it may run on earlier Java versions with a "<a name="line.294"></a>
<FONT color="green">295</FONT>                                                                                      + "reduced feature set.\nNote that various error messages "<a name="line.295"></a>
<FONT color="green">296</FONT>                                                                                      + "may be displayed when accessing the unsupported features.\n\n"<a name="line.296"></a>
<FONT color="green">297</FONT>                                                                                      + "Your current Java version is " + getJavaSpecificationVersion(),<a name="line.297"></a>
<FONT color="green">298</FONT>                                                                              "Incompatible Java version", JOptionPane.WARNING_MESSAGE);<a name="line.298"></a>
<FONT color="green">299</FONT>            }<a name="line.299"></a>
<FONT color="green">300</FONT>            <a name="line.300"></a>
<FONT color="green">301</FONT>    } // public void exec(String [] args)<a name="line.301"></a>
<FONT color="green">302</FONT>    <a name="line.302"></a>
<FONT color="green">303</FONT>    /**<a name="line.303"></a>
<FONT color="green">304</FONT>     * Determines the current Java specification version. <a name="line.304"></a>
<FONT color="green">305</FONT>     * @return The current Java specification version or {@code "unknown"} if it could not be obtained.<a name="line.305"></a>
<FONT color="green">306</FONT>     */<a name="line.306"></a>
<FONT color="green">307</FONT>    public String getJavaSpecificationVersion() {<a name="line.307"></a>
<FONT color="green">308</FONT>            try {<a name="line.308"></a>
<FONT color="green">309</FONT>                    return System.getProperty("java.specification.version");<a name="line.309"></a>
<FONT color="green">310</FONT>            } catch (Throwable e) {<a name="line.310"></a>
<FONT color="green">311</FONT>                    return "unknown";<a name="line.311"></a>
<FONT color="green">312</FONT>            }<a name="line.312"></a>
<FONT color="green">313</FONT>    }<a name="line.313"></a>
<FONT color="green">314</FONT>    <a name="line.314"></a>
<FONT color="green">315</FONT>    /**<a name="line.315"></a>
<FONT color="green">316</FONT>     * Determines whether the currect Java version is appropriate. This is done based on the system<a name="line.316"></a>
<FONT color="green">317</FONT>     * property {@code java.specification.version}. Java version {@code 1.6} or higher is considered ok.<a name="line.317"></a>
<FONT color="green">318</FONT>     * @return Whether the currect Java version is appropriate.<a name="line.318"></a>
<FONT color="green">319</FONT>     */<a name="line.319"></a>
<FONT color="green">320</FONT>    public boolean runsCorrectJavaVersion() {<a name="line.320"></a>
<FONT color="green">321</FONT>            <a name="line.321"></a>
<FONT color="green">322</FONT>            String specVer = getJavaSpecificationVersion(); <a name="line.322"></a>
<FONT color="green">323</FONT>                    <a name="line.323"></a>
<FONT color="green">324</FONT>            if (specVer.equalsIgnoreCase("unknown"))<a name="line.324"></a>
<FONT color="green">325</FONT>                    return false;<a name="line.325"></a>
<FONT color="green">326</FONT>            <a name="line.326"></a>
<FONT color="green">327</FONT>            int p = specVer.indexOf(".");<a name="line.327"></a>
<FONT color="green">328</FONT>            if (0 &gt; p)<a name="line.328"></a>
<FONT color="green">329</FONT>                    return false;<a name="line.329"></a>
<FONT color="green">330</FONT>            <a name="line.330"></a>
<FONT color="green">331</FONT>            int mainVer = Integer.parseInt(specVer.substring(0, p));<a name="line.331"></a>
<FONT color="green">332</FONT>            if (1 &gt; mainVer)<a name="line.332"></a>
<FONT color="green">333</FONT>                    return false;<a name="line.333"></a>
<FONT color="green">334</FONT>            if (1 &lt; mainVer)<a name="line.334"></a>
<FONT color="green">335</FONT>                    return true;<a name="line.335"></a>
<FONT color="green">336</FONT>            <a name="line.336"></a>
<FONT color="green">337</FONT>            if (specVer.length() - 1 &lt;= p)<a name="line.337"></a>
<FONT color="green">338</FONT>                    return false;<a name="line.338"></a>
<FONT color="green">339</FONT>            <a name="line.339"></a>
<FONT color="green">340</FONT>            int subVer =  Integer.parseInt(specVer.substring(p + 1, p + 2));<a name="line.340"></a>
<FONT color="green">341</FONT>            if (6 &gt; subVer)<a name="line.341"></a>
<FONT color="green">342</FONT>                    return false;<a name="line.342"></a>
<FONT color="green">343</FONT>            <a name="line.343"></a>
<FONT color="green">344</FONT>            return true;<a name="line.344"></a>
<FONT color="green">345</FONT>    }<a name="line.345"></a>
<FONT color="green">346</FONT>    <a name="line.346"></a>
<FONT color="green">347</FONT>    /**<a name="line.347"></a>
<FONT color="green">348</FONT>     * Parses the command line arguments for file names for initial settings and combines the results<a name="line.348"></a>
<FONT color="green">349</FONT>     * with default settings file names.<a name="line.349"></a>
<FONT color="green">350</FONT>     * <a name="line.350"></a>
<FONT color="green">351</FONT>     * @param args Command line arguments.<a name="line.351"></a>
<FONT color="green">352</FONT>     * @param startupFiles A table to hold the results.<a name="line.352"></a>
<FONT color="green">353</FONT>     * @return {@code null} if no error occured or the error message if there was an error (e.g. incorrect<a name="line.353"></a>
<FONT color="green">354</FONT>     * command line arguments).<a name="line.354"></a>
<FONT color="green">355</FONT>     */<a name="line.355"></a>
<FONT color="green">356</FONT>    private String getInitialSettingsFiles(String [] args, Map&lt;String, String&gt; startupFiles) {<a name="line.356"></a>
<FONT color="green">357</FONT>    <a name="line.357"></a>
<FONT color="green">358</FONT>            String errMsg = getInitialSettingsFromCommandLine(args, startupFiles);<a name="line.358"></a>
<FONT color="green">359</FONT>            setDefaultInitialSettingsFiles(startupFiles);<a name="line.359"></a>
<FONT color="green">360</FONT>            return errMsg;<a name="line.360"></a>
<FONT color="green">361</FONT>    } // getInitialSettingsFiles<a name="line.361"></a>
<FONT color="green">362</FONT>    <a name="line.362"></a>
<FONT color="green">363</FONT>    /**<a name="line.363"></a>
<FONT color="green">364</FONT>     * Parses the command line arguments for file names for initial settings.<a name="line.364"></a>
<FONT color="green">365</FONT>     * <a name="line.365"></a>
<FONT color="green">366</FONT>     * @param args Command line arguments.<a name="line.366"></a>
<FONT color="green">367</FONT>     * @param startupFiles A table to hold the results.<a name="line.367"></a>
<FONT color="green">368</FONT>     * @return {@code null} if no error occured or the error message if there was an error (e.g. incorrect<a name="line.368"></a>
<FONT color="green">369</FONT>     * command line arguments).<a name="line.369"></a>
<FONT color="green">370</FONT>     */<a name="line.370"></a>
<FONT color="green">371</FONT>    private String getInitialSettingsFromCommandLine(String [] args, Map&lt;String, String&gt; startupFiles) {<a name="line.371"></a>
<FONT color="green">372</FONT>            <a name="line.372"></a>
<FONT color="green">373</FONT>            if (0 != args.length &amp;&amp; 2 != args.length &amp;&amp; 4 != args.length &amp;&amp; 6 != args.length) {<a name="line.373"></a>
<FONT color="green">374</FONT>                    return "Command line parameters are invalid and were ignored. \n"<a name="line.374"></a>
<FONT color="green">375</FONT>                             + "    Legal command line arguments are as follows: \n"<a name="line.375"></a>
<FONT color="green">376</FONT>                             + "    &gt; java edu.monash.LiveGraph.LiveGraph [-dfs \"{data file settings file}\"] \n"<a name="line.376"></a>
<FONT color="green">377</FONT>                             + "                                          [-gs \"{graph settings file}\"] \n"<a name="line.377"></a>
<FONT color="green">378</FONT>                             + "                                          [-dss \"{data series settings file}\"] \n"<a name="line.378"></a>
<FONT color="green">379</FONT>                             + "    This means the program expects either 0, 2, 4 or 6 command line arguments. \n"<a name="line.379"></a>
<FONT color="green">380</FONT>                             + "    However, " + args.length + " argument" + (1==args.length?" was":"s were") + " passed.";<a name="line.380"></a>
<FONT color="green">381</FONT>            }<a name="line.381"></a>
<FONT color="green">382</FONT>            <a name="line.382"></a>
<FONT color="green">383</FONT>            String errMsg = "";<a name="line.383"></a>
<FONT color="green">384</FONT>            String s = null;<a name="line.384"></a>
<FONT color="green">385</FONT>            <a name="line.385"></a>
<FONT color="green">386</FONT>            if (2 &lt;= args.length) {              <a name="line.386"></a>
<FONT color="green">387</FONT>                    s = tryParseCommandLineArgument(args[0], args[1], startupFiles);<a name="line.387"></a>
<FONT color="green">388</FONT>                    if (null != s &amp;&amp; 0 &lt; errMsg.length())<a name="line.388"></a>
<FONT color="green">389</FONT>                            s += "\n";<a name="line.389"></a>
<FONT color="green">390</FONT>                    if (null != s)<a name="line.390"></a>
<FONT color="green">391</FONT>                            errMsg += s;<a name="line.391"></a>
<FONT color="green">392</FONT>            }<a name="line.392"></a>
<FONT color="green">393</FONT>            <a name="line.393"></a>
<FONT color="green">394</FONT>            if (4 &lt;= args.length) {<a name="line.394"></a>
<FONT color="green">395</FONT>                    s = tryParseCommandLineArgument(args[2], args[3], startupFiles);<a name="line.395"></a>
<FONT color="green">396</FONT>                    if (null != s &amp;&amp; 0 &lt; errMsg.length())<a name="line.396"></a>
<FONT color="green">397</FONT>                            s += "\n";<a name="line.397"></a>
<FONT color="green">398</FONT>                    if (null != s)<a name="line.398"></a>
<FONT color="green">399</FONT>                            errMsg += s;<a name="line.399"></a>
<FONT color="green">400</FONT>            }<a name="line.400"></a>
<FONT color="green">401</FONT>            <a name="line.401"></a>
<FONT color="green">402</FONT>            if (6 &lt;= args.length) {<a name="line.402"></a>
<FONT color="green">403</FONT>                    s = tryParseCommandLineArgument(args[4], args[5], startupFiles);<a name="line.403"></a>
<FONT color="green">404</FONT>                    if (null != s &amp;&amp; 0 &lt; errMsg.length())<a name="line.404"></a>
<FONT color="green">405</FONT>                            s += "\n";<a name="line.405"></a>
<FONT color="green">406</FONT>                    if (null != s)<a name="line.406"></a>
<FONT color="green">407</FONT>                            errMsg += s;<a name="line.407"></a>
<FONT color="green">408</FONT>            }<a name="line.408"></a>
<FONT color="green">409</FONT>            <a name="line.409"></a>
<FONT color="green">410</FONT>            if (0 == errMsg.length())<a name="line.410"></a>
<FONT color="green">411</FONT>                    return null;<a name="line.411"></a>
<FONT color="green">412</FONT>            <a name="line.412"></a>
<FONT color="green">413</FONT>            return errMsg;<a name="line.413"></a>
<FONT color="green">414</FONT>    } // getInitialSettingsFromCommandLine<a name="line.414"></a>
<FONT color="green">415</FONT>    <a name="line.415"></a>
<FONT color="green">416</FONT>    /**<a name="line.416"></a>
<FONT color="green">417</FONT>     * Processes two consecutive command line parameters.<a name="line.417"></a>
<FONT color="green">418</FONT>     * <a name="line.418"></a>
<FONT color="green">419</FONT>     * @param flag Flag specifier command line parameter.<a name="line.419"></a>
<FONT color="green">420</FONT>     * @param filename Filename specifier command line parameter.<a name="line.420"></a>
<FONT color="green">421</FONT>     * @param startupFiles A table to hold the results.<a name="line.421"></a>
<FONT color="green">422</FONT>     * @return {@code null} if no error occured or the error message if there was an error (e.g. incorrect<a name="line.422"></a>
<FONT color="green">423</FONT>     * command line arguments).<a name="line.423"></a>
<FONT color="green">424</FONT>     */<a name="line.424"></a>
<FONT color="green">425</FONT>    private String tryParseCommandLineArgument(String flag, String filename, Map&lt;String, String&gt; startupFiles) {<a name="line.425"></a>
<FONT color="green">426</FONT>            <a name="line.426"></a>
<FONT color="green">427</FONT>            if (flag.equalsIgnoreCase("-dfs")) {<a name="line.427"></a>
<FONT color="green">428</FONT>                    File f = new File(filename);<a name="line.428"></a>
<FONT color="green">429</FONT>                    if (!f.exists())<a name="line.429"></a>
<FONT color="green">430</FONT>                            return "Could not load the data file settings from the file specified on the command line "<a name="line.430"></a>
<FONT color="green">431</FONT>                                 + "because the file does not exist. \n"<a name="line.431"></a>
<FONT color="green">432</FONT>                                 + "    (" + filename + ")";<a name="line.432"></a>
<FONT color="green">433</FONT>                    startupFiles.put("DataFileSettings", f.getAbsolutePath());<a name="line.433"></a>
<FONT color="green">434</FONT>                    return null;<a name="line.434"></a>
<FONT color="green">435</FONT>            }<a name="line.435"></a>
<FONT color="green">436</FONT>            <a name="line.436"></a>
<FONT color="green">437</FONT>            if (flag.equalsIgnoreCase("-gs")) {<a name="line.437"></a>
<FONT color="green">438</FONT>                    File f = new File(filename);<a name="line.438"></a>
<FONT color="green">439</FONT>                    if (!f.exists())<a name="line.439"></a>
<FONT color="green">440</FONT>                            return "Could not load the graph settings from the file specified on the command line "<a name="line.440"></a>
<FONT color="green">441</FONT>                                 + "because the file does not exist. \n"<a name="line.441"></a>
<FONT color="green">442</FONT>                                 + "    (" + filename + ")";<a name="line.442"></a>
<FONT color="green">443</FONT>                    startupFiles.put("GraphSettings", f.getAbsolutePath());<a name="line.443"></a>
<FONT color="green">444</FONT>                    return null;<a name="line.444"></a>
<FONT color="green">445</FONT>            }<a name="line.445"></a>
<FONT color="green">446</FONT>            <a name="line.446"></a>
<FONT color="green">447</FONT>            if (flag.equalsIgnoreCase("-dss")) {<a name="line.447"></a>
<FONT color="green">448</FONT>                    File f = new File(filename);<a name="line.448"></a>
<FONT color="green">449</FONT>                    if (!f.exists())<a name="line.449"></a>
<FONT color="green">450</FONT>                            return "Could not load the graph settings from the file specified on the command line "<a name="line.450"></a>
<FONT color="green">451</FONT>                                 + "because the file does not exist. \n"<a name="line.451"></a>
<FONT color="green">452</FONT>                                 + "    (" + filename + ")";<a name="line.452"></a>
<FONT color="green">453</FONT>                    startupFiles.put("DataSeriesSettings", f.getAbsolutePath());<a name="line.453"></a>
<FONT color="green">454</FONT>                    return null;<a name="line.454"></a>
<FONT color="green">455</FONT>            }<a name="line.455"></a>
<FONT color="green">456</FONT>            <a name="line.456"></a>
<FONT color="green">457</FONT>            return "Invalid command line flag \"" + flag + "\" will be ignored. \n"<a name="line.457"></a>
<FONT color="green">458</FONT>                     + "    The subsequent command line argument \"" + filename + "\" will also be ignored.";<a name="line.458"></a>
<FONT color="green">459</FONT>    } // tryParseCommandLineArgument<a name="line.459"></a>
<FONT color="green">460</FONT>    <a name="line.460"></a>
<FONT color="green">461</FONT>    <a name="line.461"></a>
<FONT color="green">462</FONT>    /**<a name="line.462"></a>
<FONT color="green">463</FONT>     * If some settings were not specified to be loaded from a file via the command line,<a name="line.463"></a>
<FONT color="green">464</FONT>     * this method is used to specify default files for loading the settings, provided the<a name="line.464"></a>
<FONT color="green">465</FONT>     * defualt files exist.<a name="line.465"></a>
<FONT color="green">466</FONT>     * <a name="line.466"></a>
<FONT color="green">467</FONT>     * @param startupFiles A table to hold the results.<a name="line.467"></a>
<FONT color="green">468</FONT>     */<a name="line.468"></a>
<FONT color="green">469</FONT>    private void setDefaultInitialSettingsFiles(Map&lt;String, String&gt; startupFiles) {<a name="line.469"></a>
<FONT color="green">470</FONT>            <a name="line.470"></a>
<FONT color="green">471</FONT>            if (! startupFiles.containsKey("DataFileSettings")) {<a name="line.471"></a>
<FONT color="green">472</FONT>                    File f = new File("session" + DataFileSettings.preferredFileExtension); <a name="line.472"></a>
<FONT color="green">473</FONT>                    if (f.exists())<a name="line.473"></a>
<FONT color="green">474</FONT>                            startupFiles.put("DataFileSettings", f.getAbsolutePath());<a name="line.474"></a>
<FONT color="green">475</FONT>            }<a name="line.475"></a>
<FONT color="green">476</FONT>            <a name="line.476"></a>
<FONT color="green">477</FONT>            if (! startupFiles.containsKey("GraphSettings")) {<a name="line.477"></a>
<FONT color="green">478</FONT>                    File f = new File("session" + GraphSettings.preferredFileExtension); <a name="line.478"></a>
<FONT color="green">479</FONT>                    if (f.exists())<a name="line.479"></a>
<FONT color="green">480</FONT>                            startupFiles.put("GraphSettings", f.getAbsolutePath());<a name="line.480"></a>
<FONT color="green">481</FONT>            }<a name="line.481"></a>
<FONT color="green">482</FONT>            <a name="line.482"></a>
<FONT color="green">483</FONT>            if (! startupFiles.containsKey("DataSeriesSettings")) {<a name="line.483"></a>
<FONT color="green">484</FONT>                    File f = new File("session" + DataSeriesSettings.preferredFileExtension); <a name="line.484"></a>
<FONT color="green">485</FONT>                    if (f.exists())<a name="line.485"></a>
<FONT color="green">486</FONT>                            startupFiles.put("DataSeriesSettings", f.getAbsolutePath());<a name="line.486"></a>
<FONT color="green">487</FONT>            }<a name="line.487"></a>
<FONT color="green">488</FONT>    } // setDefaultInitialSettingsFiles<a name="line.488"></a>
<FONT color="green">489</FONT>    <a name="line.489"></a>
<FONT color="green">490</FONT>    /**<a name="line.490"></a>
<FONT color="green">491</FONT>     * Prints an info message to the main window message area.<a name="line.491"></a>
<FONT color="green">492</FONT>     * <a name="line.492"></a>
<FONT color="green">493</FONT>     * @param o The message.<a name="line.493"></a>
<FONT color="green">494</FONT>     */<a name="line.494"></a>
<FONT color="green">495</FONT>    public void logInfoLn(Object o) {<a name="line.495"></a>
<FONT color="green">496</FONT>            mainWindow.logInfoLn(o.toString());<a name="line.496"></a>
<FONT color="green">497</FONT>    }<a name="line.497"></a>
<FONT color="green">498</FONT>    <a name="line.498"></a>
<FONT color="green">499</FONT>    /**<a name="line.499"></a>
<FONT color="green">500</FONT>     * Prints an error message to the main window message area.<a name="line.500"></a>
<FONT color="green">501</FONT>     * <a name="line.501"></a>
<FONT color="green">502</FONT>     * @param o The message.<a name="line.502"></a>
<FONT color="green">503</FONT>     */<a name="line.503"></a>
<FONT color="green">504</FONT>    public void logErrorLn(Object o) {<a name="line.504"></a>
<FONT color="green">505</FONT>            mainWindow.logErrorLn(o.toString());<a name="line.505"></a>
<FONT color="green">506</FONT>    }<a name="line.506"></a>
<FONT color="green">507</FONT>    <a name="line.507"></a>
<FONT color="green">508</FONT>    /**<a name="line.508"></a>
<FONT color="green">509</FONT>     * Prints an success message to the main window message area.<a name="line.509"></a>
<FONT color="green">510</FONT>     * <a name="line.510"></a>
<FONT color="green">511</FONT>     * @param o The message.<a name="line.511"></a>
<FONT color="green">512</FONT>     */<a name="line.512"></a>
<FONT color="green">513</FONT>    public void logSuccessLn(Object o) {<a name="line.513"></a>
<FONT color="green">514</FONT>            mainWindow.logSuccessLn(o.toString());<a name="line.514"></a>
<FONT color="green">515</FONT>    }<a name="line.515"></a>
<FONT color="green">516</FONT>    <a name="line.516"></a>
<FONT color="green">517</FONT>    /**<a name="line.517"></a>
<FONT color="green">518</FONT>     * Displays or hides the data file settings window.<a name="line.518"></a>
<FONT color="green">519</FONT>     * <a name="line.519"></a>
<FONT color="green">520</FONT>     * @param state Whether to display ({@code true}) or to hide ({@code false}).<a name="line.520"></a>
<FONT color="green">521</FONT>     */<a name="line.521"></a>
<FONT color="green">522</FONT>    public void setDisplayDataFileSettingsWindow(boolean state) {   <a name="line.522"></a>
<FONT color="green">523</FONT>            dataFileSettingsWindow.setVisible(state);<a name="line.523"></a>
<FONT color="green">524</FONT>            mainWindow.fileSettingsDisplayStateChanged(state);<a name="line.524"></a>
<FONT color="green">525</FONT>    }<a name="line.525"></a>
<FONT color="green">526</FONT>    <a name="line.526"></a>
<FONT color="green">527</FONT>    /**<a name="line.527"></a>
<FONT color="green">528</FONT>     * Displays or hides the graph settings window.<a name="line.528"></a>
<FONT color="green">529</FONT>     * <a name="line.529"></a>
<FONT color="green">530</FONT>     * @param state Whether to display ({@code true}) or to hide ({@code false}).<a name="line.530"></a>
<FONT color="green">531</FONT>     */<a name="line.531"></a>
<FONT color="green">532</FONT>    public void setDisplayGraphSettingsWindow(boolean state) {      <a name="line.532"></a>
<FONT color="green">533</FONT>            graphSettingsWindow.setVisible(state);<a name="line.533"></a>
<FONT color="green">534</FONT>            mainWindow.graphSettingsDisplayStateChanged(state);<a name="line.534"></a>
<FONT color="green">535</FONT>    }<a name="line.535"></a>
<FONT color="green">536</FONT>    <a name="line.536"></a>
<FONT color="green">537</FONT>    /**<a name="line.537"></a>
<FONT color="green">538</FONT>     * Displays or hides the data series settings window.<a name="line.538"></a>
<FONT color="green">539</FONT>     * <a name="line.539"></a>
<FONT color="green">540</FONT>     * @param state Whether to display ({@code true}) or to hide ({@code false}).<a name="line.540"></a>
<FONT color="green">541</FONT>     */<a name="line.541"></a>
<FONT color="green">542</FONT>    public void setDisplaySeriesSettingsWindow(boolean state) {     <a name="line.542"></a>
<FONT color="green">543</FONT>            seriesSettingsWindow.setVisible(state);<a name="line.543"></a>
<FONT color="green">544</FONT>            mainWindow.seriesSettingsDisplayStateChanged(state);<a name="line.544"></a>
<FONT color="green">545</FONT>    }<a name="line.545"></a>
<FONT color="green">546</FONT>    <a name="line.546"></a>
<FONT color="green">547</FONT>    /**<a name="line.547"></a>
<FONT color="green">548</FONT>     * Displays or hides plot window.<a name="line.548"></a>
<FONT color="green">549</FONT>     * <a name="line.549"></a>
<FONT color="green">550</FONT>     * @param state Whether to display ({@code true}) or to hide ({@code false}).<a name="line.550"></a>
<FONT color="green">551</FONT>     */<a name="line.551"></a>
<FONT color="green">552</FONT>    public void setDisplayPlotWindow(boolean state) {       <a name="line.552"></a>
<FONT color="green">553</FONT>            plotWindow.setVisible(state);<a name="line.553"></a>
<FONT color="green">554</FONT>            mainWindow.plotDisplayStateChanged(state);<a name="line.554"></a>
<FONT color="green">555</FONT>    }<a name="line.555"></a>
<FONT color="green">556</FONT>    <a name="line.556"></a>
<FONT color="green">557</FONT>    /**<a name="line.557"></a>
<FONT color="green">558</FONT>     * This method is called by the main window when it is closed. This method<a name="line.558"></a>
<FONT color="green">559</FONT>     * initiates the disposing of all windows and the data update invocation<a name="line.559"></a>
<FONT color="green">560</FONT>     * thread in order to correctly close the application and save all settings<a name="line.560"></a>
<FONT color="green">561</FONT>     * to default files. <a name="line.561"></a>
<FONT color="green">562</FONT>     */<a name="line.562"></a>
<FONT color="green">563</FONT>    public void disposeGUIAndExit() {<a name="line.563"></a>
<FONT color="green">564</FONT>            mainWindow.dispose();<a name="line.564"></a>
<FONT color="green">565</FONT>            dataFileSettingsWindow.dispose();<a name="line.565"></a>
<FONT color="green">566</FONT>            graphSettingsWindow.dispose();<a name="line.566"></a>
<FONT color="green">567</FONT>            seriesSettingsWindow.dispose();<a name="line.567"></a>
<FONT color="green">568</FONT>            plotWindow.dispose();<a name="line.568"></a>
<FONT color="green">569</FONT>            graphExporter.disposeInternalGUI();<a name="line.569"></a>
<FONT color="green">570</FONT>            updateInvoker.setMustQuit(true);<a name="line.570"></a>
<FONT color="green">571</FONT>            <a name="line.571"></a>
<FONT color="green">572</FONT>            dataFileSettings.save("session" + DataFileSettings.preferredFileExtension);<a name="line.572"></a>
<FONT color="green">573</FONT>            graphSettings.save("session" + GraphSettings.preferredFileExtension);<a name="line.573"></a>
<FONT color="green">574</FONT>            seriesSettings.save("session" + DataSeriesSettings.preferredFileExtension);<a name="line.574"></a>
<FONT color="green">575</FONT>    }<a name="line.575"></a>
<FONT color="green">576</FONT>    <a name="line.576"></a>
<FONT color="green">577</FONT>    /**<a name="line.577"></a>
<FONT color="green">578</FONT>     * Gets the application's global data file settings.<a name="line.578"></a>
<FONT color="green">579</FONT>     * <a name="line.579"></a>
<FONT color="green">580</FONT>     * @return Global data file settings.<a name="line.580"></a>
<FONT color="green">581</FONT>     */<a name="line.581"></a>
<FONT color="green">582</FONT>    public DataFileSettings getDataFileSettings() {<a name="line.582"></a>
<FONT color="green">583</FONT>            return dataFileSettings;<a name="line.583"></a>
<FONT color="green">584</FONT>    }<a name="line.584"></a>
<FONT color="green">585</FONT>    <a name="line.585"></a>
<FONT color="green">586</FONT>    /**<a name="line.586"></a>
<FONT color="green">587</FONT>     * Gets the application's global graph settings.<a name="line.587"></a>
<FONT color="green">588</FONT>     * <a name="line.588"></a>
<FONT color="green">589</FONT>     * @return Global graph settings.<a name="line.589"></a>
<FONT color="green">590</FONT>     */<a name="line.590"></a>
<FONT color="green">591</FONT>    public GraphSettings getGraphSettings() {<a name="line.591"></a>
<FONT color="green">592</FONT>            return graphSettings;<a name="line.592"></a>
<FONT color="green">593</FONT>    }<a name="line.593"></a>
<FONT color="green">594</FONT>    <a name="line.594"></a>
<FONT color="green">595</FONT>    <a name="line.595"></a>
<FONT color="green">596</FONT>    /**<a name="line.596"></a>
<FONT color="green">597</FONT>     * Gets the application's global data series settings.<a name="line.597"></a>
<FONT color="green">598</FONT>     * <a name="line.598"></a>
<FONT color="green">599</FONT>     * @return Global data series settings.<a name="line.599"></a>
<FONT color="green">600</FONT>     */<a name="line.600"></a>
<FONT color="green">601</FONT>    public DataSeriesSettings getDataSeriesSettings() {<a name="line.601"></a>
<FONT color="green">602</FONT>            return seriesSettings;<a name="line.602"></a>
<FONT color="green">603</FONT>    }<a name="line.603"></a>
<FONT color="green">604</FONT>    <a name="line.604"></a>
<FONT color="green">605</FONT>    public GraphExporter getGraphExporter() {<a name="line.605"></a>
<FONT color="green">606</FONT>            return graphExporter;<a name="line.606"></a>
<FONT color="green">607</FONT>    }<a name="line.607"></a>
<FONT color="green">608</FONT>    <a name="line.608"></a>
<FONT color="green">609</FONT>    /**<a name="line.609"></a>
<FONT color="green">610</FONT>     * Causes the next data update.<a name="line.610"></a>
<FONT color="green">611</FONT>     */<a name="line.611"></a>
<FONT color="green">612</FONT>    public void initiateDataUpdate() {<a name="line.612"></a>
<FONT color="green">613</FONT>            updateInvoker.update();<a name="line.613"></a>
<FONT color="green">614</FONT>    }<a name="line.614"></a>
<FONT color="green">615</FONT>    <a name="line.615"></a>
<FONT color="green">616</FONT>    private void installUncaughtExceptionHandler() {<a name="line.616"></a>
<FONT color="green">617</FONT>            <a name="line.617"></a>
<FONT color="green">618</FONT>            try {<a name="line.618"></a>
<FONT color="green">619</FONT>                    UncaughtExceptionHandler handler = new UncaughtExceptionHandler();<a name="line.619"></a>
<FONT color="green">620</FONT>                    Thread.setDefaultUncaughtExceptionHandler(handler);<a name="line.620"></a>
<FONT color="green">621</FONT>                    <a name="line.621"></a>
<FONT color="green">622</FONT>            } catch (SecurityException e) {<a name="line.622"></a>
<FONT color="green">623</FONT>                    e.printStackTrace();<a name="line.623"></a>
<FONT color="green">624</FONT>            }<a name="line.624"></a>
<FONT color="green">625</FONT>    }<a name="line.625"></a>
<FONT color="green">626</FONT>    <a name="line.626"></a>
<FONT color="green">627</FONT>    private class UncaughtExceptionHandler implements Thread.UncaughtExceptionHandler {<a name="line.627"></a>
<FONT color="green">628</FONT>            public void uncaughtException(Thread t, Throwable e) {<a name="line.628"></a>
<FONT color="green">629</FONT>                    try {<a name="line.629"></a>
<FONT color="green">630</FONT>                            String err = ThrowableTools.stackTraceToString(e);<a name="line.630"></a>
<FONT color="green">631</FONT>                            if (null == mainWindow) {<a name="line.631"></a>
<FONT color="green">632</FONT>                                    String h = "Error in thread \"" + t.getName() + "\"";<a name="line.632"></a>
<FONT color="green">633</FONT>                                    JOptionPane.showMessageDialog(null, err, h, JOptionPane.ERROR_MESSAGE);<a name="line.633"></a>
<FONT color="green">634</FONT>                            } else {<a name="line.634"></a>
<FONT color="green">635</FONT>                                    logErrorLn(err);<a name="line.635"></a>
<FONT color="green">636</FONT>                            }<a name="line.636"></a>
<FONT color="green">637</FONT>                    } finally {<a name="line.637"></a>
<FONT color="green">638</FONT>                            e.printStackTrace();<a name="line.638"></a>
<FONT color="green">639</FONT>                    }<a name="line.639"></a>
<FONT color="green">640</FONT>                    //throw new Error(e);<a name="line.640"></a>
<FONT color="green">641</FONT>        }<a name="line.641"></a>
<FONT color="green">642</FONT>    } // private class UncaughtExceptionHandler<a name="line.642"></a>
<FONT color="green">643</FONT>    <a name="line.643"></a>
<FONT color="green">644</FONT>    } // public class LiveGraph<a name="line.644"></a>




























































</PRE>
</BODY>
</HTML>
