	package testLink.diagram.part;

	/**
 * @generated
 */
public class TestLinkDiagramUpdater {
		
		/**
 * @generated
 */
public static java.util.List<testLink.diagram.part.TestLinkNodeDescriptor> getSemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		switch (testLink.diagram.part.TestLinkVisualIDRegistry.getVisualID(view)) {
		case testLink.diagram.edit.parts.ATopEditPart.VISUAL_ID:
	return getATop_1000SemanticChildren(view);
	}
		return java.util.Collections.emptyList();
}
	
	/**
 * @generated
 */
public static java.util.List<testLink.diagram.part.TestLinkNodeDescriptor> getATop_1000SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (!view.isSetElement()) {
	return java.util.Collections.emptyList();
}
testLink.ATop modelElement = (testLink.ATop) view.getElement();
	java.util.LinkedList<testLink.diagram.part.TestLinkNodeDescriptor> result = new java.util.LinkedList<testLink.diagram.part.TestLinkNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getEReference6().iterator(); it.hasNext();) {
		testLink.One childElement = (testLink.One) it.next();
					int visualID = testLink.diagram.part.TestLinkVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == testLink.diagram.edit.parts.OneEditPart.VISUAL_ID) {
	result.add(new testLink.diagram.part.TestLinkNodeDescriptor(childElement, visualID));
	continue;
}
	}
						for (java.util.Iterator<?> it = modelElement.getEReference4().iterator(); it.hasNext();) {
		testLink.Three childElement = (testLink.Three) it.next();
					int visualID = testLink.diagram.part.TestLinkVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == testLink.diagram.edit.parts.ThreeEditPart.VISUAL_ID) {
	result.add(new testLink.diagram.part.TestLinkNodeDescriptor(childElement, visualID));
	continue;
}
	}
						for (java.util.Iterator<?> it = modelElement.getEReference5().iterator(); it.hasNext();) {
		testLink.Two childElement = (testLink.Two) it.next();
					int visualID = testLink.diagram.part.TestLinkVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == testLink.diagram.edit.parts.TwoEditPart.VISUAL_ID) {
	result.add(new testLink.diagram.part.TestLinkNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}
	
		/**
 * @generated
 */
public static java.util.List<testLink.diagram.part.TestLinkLinkDescriptor> getContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
		switch (testLink.diagram.part.TestLinkVisualIDRegistry.getVisualID(view)) {
		case testLink.diagram.edit.parts.ATopEditPart.VISUAL_ID:
	return getATop_1000ContainedLinks(view);
case testLink.diagram.edit.parts.OneEditPart.VISUAL_ID:
	return getOne_2001ContainedLinks(view);
case testLink.diagram.edit.parts.ThreeEditPart.VISUAL_ID:
	return getThree_2002ContainedLinks(view);
case testLink.diagram.edit.parts.TwoEditPart.VISUAL_ID:
	return getTwo_2003ContainedLinks(view);
	}
		return java.util.Collections.emptyList();
}
	
		/**
 * @generated
 */
public static java.util.List<testLink.diagram.part.TestLinkLinkDescriptor> getIncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
		switch (testLink.diagram.part.TestLinkVisualIDRegistry.getVisualID(view)) {
		case testLink.diagram.edit.parts.OneEditPart.VISUAL_ID:
	return getOne_2001IncomingLinks(view);
case testLink.diagram.edit.parts.ThreeEditPart.VISUAL_ID:
	return getThree_2002IncomingLinks(view);
case testLink.diagram.edit.parts.TwoEditPart.VISUAL_ID:
	return getTwo_2003IncomingLinks(view);
	}
		return java.util.Collections.emptyList();
}
	
		/**
 * @generated
 */
public static java.util.List<testLink.diagram.part.TestLinkLinkDescriptor> getOutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
		switch (testLink.diagram.part.TestLinkVisualIDRegistry.getVisualID(view)) {
		case testLink.diagram.edit.parts.OneEditPart.VISUAL_ID:
	return getOne_2001OutgoingLinks(view);
case testLink.diagram.edit.parts.ThreeEditPart.VISUAL_ID:
	return getThree_2002OutgoingLinks(view);
case testLink.diagram.edit.parts.TwoEditPart.VISUAL_ID:
	return getTwo_2003OutgoingLinks(view);
	}
		return java.util.Collections.emptyList();
}
		
/**
 * @generated
 */
public static java.util.List<testLink.diagram.part.TestLinkLinkDescriptor> getATop_1000ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<testLink.diagram.part.TestLinkLinkDescriptor> getOne_2001ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	testLink.One modelElement = (testLink.One) view.getElement();
		java.util.LinkedList<testLink.diagram.part.TestLinkLinkDescriptor> result = new java.util.LinkedList<testLink.diagram.part.TestLinkLinkDescriptor>();
		result.addAll(getOutgoingFeatureModelFacetLinks_Link_EReference0_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<testLink.diagram.part.TestLinkLinkDescriptor> getThree_2002ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	testLink.Three modelElement = (testLink.Three) view.getElement();
		java.util.LinkedList<testLink.diagram.part.TestLinkLinkDescriptor> result = new java.util.LinkedList<testLink.diagram.part.TestLinkLinkDescriptor>();
		result.addAll(getOutgoingFeatureModelFacetLinks_Link_EReference0_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<testLink.diagram.part.TestLinkLinkDescriptor> getTwo_2003ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	testLink.Two modelElement = (testLink.Two) view.getElement();
		java.util.LinkedList<testLink.diagram.part.TestLinkLinkDescriptor> result = new java.util.LinkedList<testLink.diagram.part.TestLinkLinkDescriptor>();
		result.addAll(getOutgoingFeatureModelFacetLinks_Link_EReference0_4001(modelElement));	
	return result;
}
		
/**
 * @generated
 */
public static java.util.List<testLink.diagram.part.TestLinkLinkDescriptor> getOne_2001IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	testLink.One modelElement = (testLink.One) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<testLink.diagram.part.TestLinkLinkDescriptor> result = new java.util.LinkedList<testLink.diagram.part.TestLinkLinkDescriptor>();
		result.addAll(getIncomingFeatureModelFacetLinks_Link_EReference0_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<testLink.diagram.part.TestLinkLinkDescriptor> getThree_2002IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	testLink.Three modelElement = (testLink.Three) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<testLink.diagram.part.TestLinkLinkDescriptor> result = new java.util.LinkedList<testLink.diagram.part.TestLinkLinkDescriptor>();
		result.addAll(getIncomingFeatureModelFacetLinks_Link_EReference0_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<testLink.diagram.part.TestLinkLinkDescriptor> getTwo_2003IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	testLink.Two modelElement = (testLink.Two) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<testLink.diagram.part.TestLinkLinkDescriptor> result = new java.util.LinkedList<testLink.diagram.part.TestLinkLinkDescriptor>();
		result.addAll(getIncomingFeatureModelFacetLinks_Link_EReference0_4001(modelElement, crossReferences));	
	return result;
}
		
/**
 * @generated
 */
public static java.util.List<testLink.diagram.part.TestLinkLinkDescriptor> getOne_2001OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	testLink.One modelElement = (testLink.One) view.getElement();
		java.util.LinkedList<testLink.diagram.part.TestLinkLinkDescriptor> result = new java.util.LinkedList<testLink.diagram.part.TestLinkLinkDescriptor>();
		result.addAll(getOutgoingFeatureModelFacetLinks_Link_EReference0_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<testLink.diagram.part.TestLinkLinkDescriptor> getThree_2002OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	testLink.Three modelElement = (testLink.Three) view.getElement();
		java.util.LinkedList<testLink.diagram.part.TestLinkLinkDescriptor> result = new java.util.LinkedList<testLink.diagram.part.TestLinkLinkDescriptor>();
		result.addAll(getOutgoingFeatureModelFacetLinks_Link_EReference0_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<testLink.diagram.part.TestLinkLinkDescriptor> getTwo_2003OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	testLink.Two modelElement = (testLink.Two) view.getElement();
		java.util.LinkedList<testLink.diagram.part.TestLinkLinkDescriptor> result = new java.util.LinkedList<testLink.diagram.part.TestLinkLinkDescriptor>();
		result.addAll(getOutgoingFeatureModelFacetLinks_Link_EReference0_4001(modelElement));	
	return result;
}
		
/**
 * @generated
 */
private static java.util.Collection<testLink.diagram.part.TestLinkLinkDescriptor> getIncomingFeatureModelFacetLinks_Link_EReference0_4001(testLink.Link target, java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences) {
	java.util.LinkedList<testLink.diagram.part.TestLinkLinkDescriptor> result = new java.util.LinkedList<testLink.diagram.part.TestLinkLinkDescriptor>();
	java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting> settings = crossReferences.get(target);
	for (org.eclipse.emf.ecore.EStructuralFeature.Setting setting : settings) {
		if (setting.getEStructuralFeature() == testLink.TestLinkPackage.eINSTANCE.getLink_EReference0()) {
	result.add(new testLink.diagram.part.TestLinkLinkDescriptor(setting.getEObject(), target, testLink.diagram.providers.TestLinkElementTypes.LinkEReference0_4001, testLink.diagram.edit.parts.LinkEReference0EditPart.VISUAL_ID));
}
	}
	return result;	
}
		
	/**
 * @generated
 */
private static java.util.Collection<testLink.diagram.part.TestLinkLinkDescriptor> getOutgoingFeatureModelFacetLinks_Link_EReference0_4001(testLink.Link source) {
	java.util.LinkedList<testLink.diagram.part.TestLinkLinkDescriptor> result = new java.util.LinkedList<testLink.diagram.part.TestLinkLinkDescriptor>();
		for (java.util.Iterator<?> destinations = source.getEReference0().iterator(); destinations.hasNext();) {
		testLink.Link destination = (testLink.Link) destinations.next();
		result.add(new testLink.diagram.part.TestLinkLinkDescriptor(source, destination, testLink.diagram.providers.TestLinkElementTypes.LinkEReference0_4001, testLink.diagram.edit.parts.LinkEReference0EditPart.VISUAL_ID));
		}
		return result;
}

	}
