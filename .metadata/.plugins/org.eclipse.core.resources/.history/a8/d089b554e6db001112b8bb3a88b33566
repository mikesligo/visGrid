package updatelabels.edit.parts;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.gef.EditPolicy;
import org.eclipse.gmf.runtime.diagram.core.listener.NotificationListener;
import org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel;
import org.eclipse.gmf.runtime.notation.View;

import visGrid.diagram.edit.parts.HouseAir_temperatureEditPart;

import example.gmf.labelmapping.referenced.diagram.custom.edit.policy.SuperEntityModelChangedEditPolicy;
import example.gmf.labelmapping.referenced.model.core.diagram.edit.parts.EntityEditPart;

public class HouseAir_temperatureEditPartOverride extends HouseAir_temperatureEditPart implements InfoLabelProvider {
	private boolean didInitialViewUpdate;

	public HouseAir_temperatureEditPartOverride(View view) {
		super(view);
		didInitialViewUpdate = false;
	}

	private void initializeSuperEntityLabel() {
		if (!didInitialViewUpdate) {
			EditPolicy editPolicy = getEditPolicy(SuperEntityModelChangedEditPolicy.MODEL_CHANGED_ROLE);
			if (editPolicy instanceof SuperEntityModelChangedEditPolicy) {
				SuperEntityModelChangedEditPolicy policy = (SuperEntityModelChangedEditPolicy) editPolicy;
				didInitialViewUpdate = policy.updateSuperEntityLabel();
			}
		}
	}

	@Override
	protected void createDefaultEditPolicies() {
		super.createDefaultEditPolicies();
		String role = SuperEntityModelChangedEditPolicy.MODEL_CHANGED_ROLE;
		EditPolicy originalPolicy = getEditPolicy(role);
		installEditPolicy(role, new SuperEntityModelChangedEditPolicy(role, originalPolicy));
		// try to update view if not already done
		initializeSuperEntityLabel();
	}

	@Override
	public WrappingLabel getInfoLabel() {
		EntityFigure entityFigure = getPrimaryShape();
		return entityFigure.getFigureReferencedEntityInfoFigure();
	}

	@Override
	public void installListenerFilter(String filterId, NotificationListener listener, EObject element,
			EStructuralFeature feature) {
		addListenerFilter(filterId, listener, element, feature);
	}

	@Override
	public void uninstallListenerFilter(String filterId) {
		removeListenerFilter(filterId);
	}

}
