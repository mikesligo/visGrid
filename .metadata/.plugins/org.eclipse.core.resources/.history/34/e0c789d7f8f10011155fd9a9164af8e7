<HTML>
<BODY BGCOLOR="white">
<PRE>
<FONT color="green">001</FONT>    package org.LiveGraph.settings;<a name="line.1"></a>
<FONT color="green">002</FONT>    <a name="line.2"></a>
<FONT color="green">003</FONT>    import java.io.FileInputStream;<a name="line.3"></a>
<FONT color="green">004</FONT>    import java.io.FileOutputStream;<a name="line.4"></a>
<FONT color="green">005</FONT>    import java.io.IOException;<a name="line.5"></a>
<FONT color="green">006</FONT>    import java.util.Properties;<a name="line.6"></a>
<FONT color="green">007</FONT>    <a name="line.7"></a>
<FONT color="green">008</FONT>    import org.LiveGraph.LiveGraph;<a name="line.8"></a>
<FONT color="green">009</FONT>    <a name="line.9"></a>
<FONT color="green">010</FONT>    /**<a name="line.10"></a>
<FONT color="green">011</FONT>     * Encapsulates the settings concerned with reading the data file, the update frequency<a name="line.11"></a>
<FONT color="green">012</FONT>     * and the caching method. <a name="line.12"></a>
<FONT color="green">013</FONT>     * <a name="line.13"></a>
<FONT color="green">014</FONT>     * &lt;p style="font-size:smaller;"&gt;This product includes software developed by the<a name="line.14"></a>
<FONT color="green">015</FONT>     *    &lt;strong&gt;LiveGraph&lt;/strong&gt; project and its contributors.&lt;br /&gt;<a name="line.15"></a>
<FONT color="green">016</FONT>     *    (&lt;a href="http://www.live-graph.org" target="_blank"&gt;http://www.live-graph.org&lt;/a&gt;)&lt;br /&gt;<a name="line.16"></a>
<FONT color="green">017</FONT>     *    Copyright (c) 2007 G. Paperin.&lt;br /&gt;<a name="line.17"></a>
<FONT color="green">018</FONT>     *    All rights reserved.<a name="line.18"></a>
<FONT color="green">019</FONT>     * &lt;/p&gt;<a name="line.19"></a>
<FONT color="green">020</FONT>     * &lt;p style="font-size:smaller;"&gt;File: DataFileSettings.java&lt;/p&gt; <a name="line.20"></a>
<FONT color="green">021</FONT>     * &lt;p style="font-size:smaller;"&gt;Redistribution and use in source and binary forms, with or<a name="line.21"></a>
<FONT color="green">022</FONT>     *    without modification, are permitted provided that the following terms and conditions are met:<a name="line.22"></a>
<FONT color="green">023</FONT>     * &lt;/p&gt;<a name="line.23"></a>
<FONT color="green">024</FONT>     * &lt;p style="font-size:smaller;"&gt;1. Redistributions of source code must retain the above<a name="line.24"></a>
<FONT color="green">025</FONT>     *    acknowledgement of the LiveGraph project and its web-site, the above copyright notice,<a name="line.25"></a>
<FONT color="green">026</FONT>     *    this list of conditions and the following disclaimer.&lt;br /&gt;<a name="line.26"></a>
<FONT color="green">027</FONT>     *    2. Redistributions in binary form must reproduce the above acknowledgement of the<a name="line.27"></a>
<FONT color="green">028</FONT>     *    LiveGraph project and its web-site, the above copyright notice, this list of conditions<a name="line.28"></a>
<FONT color="green">029</FONT>     *    and the following disclaimer in the documentation and/or other materials provided with<a name="line.29"></a>
<FONT color="green">030</FONT>     *    the distribution.&lt;br /&gt;<a name="line.30"></a>
<FONT color="green">031</FONT>     *    3. All advertising materials mentioning features or use of this software or any derived<a name="line.31"></a>
<FONT color="green">032</FONT>     *    software must display the following acknowledgement:&lt;br /&gt;<a name="line.32"></a>
<FONT color="green">033</FONT>     *    &lt;em&gt;This product includes software developed by the LiveGraph project and its<a name="line.33"></a>
<FONT color="green">034</FONT>     *    contributors.&lt;br /&gt;(http://www.live-graph.org)&lt;/em&gt;&lt;br /&gt;<a name="line.34"></a>
<FONT color="green">035</FONT>     *    4. All advertising materials distributed in form of HTML pages or any other technology<a name="line.35"></a>
<FONT color="green">036</FONT>     *    permitting active hyper-links that mention features or use of this software or any<a name="line.36"></a>
<FONT color="green">037</FONT>     *    derived software must display the acknowledgment specified in condition 3 of this<a name="line.37"></a>
<FONT color="green">038</FONT>     *    agreement, and in addition, include a visible and working hyper-link to the LiveGraph<a name="line.38"></a>
<FONT color="green">039</FONT>     *    homepage (http://www.live-graph.org).<a name="line.39"></a>
<FONT color="green">040</FONT>     * &lt;/p&gt;<a name="line.40"></a>
<FONT color="green">041</FONT>     * &lt;p style="font-size:smaller;"&gt;THIS SOFTWARE IS PROVIDED &amp;quot;AS IS&amp;quot;, WITHOUT WARRANTY<a name="line.41"></a>
<FONT color="green">042</FONT>     *    OF ANY KIND, EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF<a name="line.42"></a>
<FONT color="green">043</FONT>     *    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  NONINFRINGEMENT. IN NO EVENT SHALL<a name="line.43"></a>
<FONT color="green">044</FONT>     *    THE AUTHORS, CONTRIBUTORS OR COPYRIGHT  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER<a name="line.44"></a>
<FONT color="green">045</FONT>     *    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING  FROM, OUT OF OR<a name="line.45"></a>
<FONT color="green">046</FONT>     *    IN CONNECTION WITH THE SOFTWARE OR THE USE OR  OTHER DEALINGS IN THE SOFTWARE.<a name="line.46"></a>
<FONT color="green">047</FONT>     * &lt;/p&gt;<a name="line.47"></a>
<FONT color="green">048</FONT>     * <a name="line.48"></a>
<FONT color="green">049</FONT>     * @author Greg Paperin (&lt;a href="http://www.paperin.org" target="_blank"&gt;http://www.paperin.org&lt;/a&gt;)<a name="line.49"></a>
<FONT color="green">050</FONT>     * @version {@value org.LiveGraph.LiveGraph#version}<a name="line.50"></a>
<FONT color="green">051</FONT>     */<a name="line.51"></a>
<FONT color="green">052</FONT>    public class DataFileSettings extends ObservableSettings {<a name="line.52"></a>
<FONT color="green">053</FONT>    <a name="line.53"></a>
<FONT color="green">054</FONT>    /**<a name="line.54"></a>
<FONT color="green">055</FONT>     * Standard file extension.<a name="line.55"></a>
<FONT color="green">056</FONT>     */<a name="line.56"></a>
<FONT color="green">057</FONT>    public static final String preferredFileExtension = ".lgdfs";<a name="line.57"></a>
<FONT color="green">058</FONT>    <a name="line.58"></a>
<FONT color="green">059</FONT>    /**<a name="line.59"></a>
<FONT color="green">060</FONT>     * Default settings.<a name="line.60"></a>
<FONT color="green">061</FONT>     */<a name="line.61"></a>
<FONT color="green">062</FONT>    private static final Properties defaultValues = new Properties();<a name="line.62"></a>
<FONT color="green">063</FONT>    static {<a name="line.63"></a>
<FONT color="green">064</FONT>            defaultValues.setProperty("DataFile", "");<a name="line.64"></a>
<FONT color="green">065</FONT>            defaultValues.setProperty("ShowOnlyTailData", "0");<a name="line.65"></a>
<FONT color="green">066</FONT>            defaultValues.setProperty("DoNotCacheData", "0");<a name="line.66"></a>
<FONT color="green">067</FONT>            defaultValues.setProperty("UpdateFrequency", "-1");<a name="line.67"></a>
<FONT color="green">068</FONT>    }<a name="line.68"></a>
<FONT color="green">069</FONT>    <a name="line.69"></a>
<FONT color="green">070</FONT>    /**<a name="line.70"></a>
<FONT color="green">071</FONT>     * Holds the current settings.<a name="line.71"></a>
<FONT color="green">072</FONT>     */<a name="line.72"></a>
<FONT color="green">073</FONT>    private Properties values = null;<a name="line.73"></a>
<FONT color="green">074</FONT>    <a name="line.74"></a>
<FONT color="green">075</FONT>    /**<a name="line.75"></a>
<FONT color="green">076</FONT>     * Creates a new data file settings object with the default settings values.<a name="line.76"></a>
<FONT color="green">077</FONT>     */<a name="line.77"></a>
<FONT color="green">078</FONT>    public DataFileSettings() {<a name="line.78"></a>
<FONT color="green">079</FONT>            super();<a name="line.79"></a>
<FONT color="green">080</FONT>            values = new Properties();<a name="line.80"></a>
<FONT color="green">081</FONT>            values.putAll(defaultValues);<a name="line.81"></a>
<FONT color="green">082</FONT>    }<a name="line.82"></a>
<FONT color="green">083</FONT>    <a name="line.83"></a>
<FONT color="green">084</FONT>    /**<a name="line.84"></a>
<FONT color="green">085</FONT>     * Creates a new data file settings object and loads the settings values from<a name="line.85"></a>
<FONT color="green">086</FONT>     * the specified file.<a name="line.86"></a>
<FONT color="green">087</FONT>     *  <a name="line.87"></a>
<FONT color="green">088</FONT>     * @param fileName File to load the settings from.<a name="line.88"></a>
<FONT color="green">089</FONT>     */<a name="line.89"></a>
<FONT color="green">090</FONT>    public DataFileSettings(String fileName) {<a name="line.90"></a>
<FONT color="green">091</FONT>            this();<a name="line.91"></a>
<FONT color="green">092</FONT>            load(fileName);<a name="line.92"></a>
<FONT color="green">093</FONT>    }<a name="line.93"></a>
<FONT color="green">094</FONT>    <a name="line.94"></a>
<FONT color="green">095</FONT>    /**<a name="line.95"></a>
<FONT color="green">096</FONT>     * Loads the settings from a specified file.<a name="line.96"></a>
<FONT color="green">097</FONT>     * <a name="line.97"></a>
<FONT color="green">098</FONT>     * @param fileName The file to load the settings from.<a name="line.98"></a>
<FONT color="green">099</FONT>     * @return {@code true} if the settings were loaded, {@code false} if an exception occured. <a name="line.99"></a>
<FONT color="green">100</FONT>     */<a name="line.100"></a>
<FONT color="green">101</FONT>    public boolean load(String fileName) {<a name="line.101"></a>
<FONT color="green">102</FONT>            try {<a name="line.102"></a>
<FONT color="green">103</FONT>                    FileInputStream in = new FileInputStream(fileName);<a name="line.103"></a>
<FONT color="green">104</FONT>                    try { values.loadFromXML(in); notifyObservers("load"); }<a name="line.104"></a>
<FONT color="green">105</FONT>                    finally { in.close(); }<a name="line.105"></a>
<FONT color="green">106</FONT>                    return true;<a name="line.106"></a>
<FONT color="green">107</FONT>            } catch(IOException e) {<a name="line.107"></a>
<FONT color="green">108</FONT>                    e.printStackTrace();<a name="line.108"></a>
<FONT color="green">109</FONT>                    return false;<a name="line.109"></a>
<FONT color="green">110</FONT>            }<a name="line.110"></a>
<FONT color="green">111</FONT>    }<a name="line.111"></a>
<FONT color="green">112</FONT>    <a name="line.112"></a>
<FONT color="green">113</FONT>    /**<a name="line.113"></a>
<FONT color="green">114</FONT>     * Saves the settings to a specified file.<a name="line.114"></a>
<FONT color="green">115</FONT>     * <a name="line.115"></a>
<FONT color="green">116</FONT>     * @param fileName The file to save the settings to.<a name="line.116"></a>
<FONT color="green">117</FONT>     * @return {@code true} if the settings were saved, {@code false} if an exception occured. <a name="line.117"></a>
<FONT color="green">118</FONT>     */<a name="line.118"></a>
<FONT color="green">119</FONT>    public boolean save(String fileName) {<a name="line.119"></a>
<FONT color="green">120</FONT>            try {<a name="line.120"></a>
<FONT color="green">121</FONT>                    FileOutputStream out = new FileOutputStream(fileName);<a name="line.121"></a>
<FONT color="green">122</FONT>                    try { values.storeToXML(out, "LiveGraph version " + LiveGraph.version + ". DataFileSettings."); }<a name="line.122"></a>
<FONT color="green">123</FONT>                    finally { out.close(); }<a name="line.123"></a>
<FONT color="green">124</FONT>                    return true;<a name="line.124"></a>
<FONT color="green">125</FONT>            } catch(IOException e) {<a name="line.125"></a>
<FONT color="green">126</FONT>                    e.printStackTrace();<a name="line.126"></a>
<FONT color="green">127</FONT>                    return false;<a name="line.127"></a>
<FONT color="green">128</FONT>            }<a name="line.128"></a>
<FONT color="green">129</FONT>    }<a name="line.129"></a>
<FONT color="green">130</FONT>    <a name="line.130"></a>
<FONT color="green">131</FONT>    /**<a name="line.131"></a>
<FONT color="green">132</FONT>     * Gets the data file.<a name="line.132"></a>
<FONT color="green">133</FONT>     * <a name="line.133"></a>
<FONT color="green">134</FONT>     * @return Name of the data stream to plot.<a name="line.134"></a>
<FONT color="green">135</FONT>     */<a name="line.135"></a>
<FONT color="green">136</FONT>    public String getDataFile() { return values.getProperty("DataFile"); }<a name="line.136"></a>
<FONT color="green">137</FONT>    <a name="line.137"></a>
<FONT color="green">138</FONT>    /**<a name="line.138"></a>
<FONT color="green">139</FONT>     * Sets the data file.<a name="line.139"></a>
<FONT color="green">140</FONT>     * <a name="line.140"></a>
<FONT color="green">141</FONT>     * @param fn Name of the data stream to plot.<a name="line.141"></a>
<FONT color="green">142</FONT>     */<a name="line.142"></a>
<FONT color="green">143</FONT>    public void setDataFile(String fn) {<a name="line.143"></a>
<FONT color="green">144</FONT>            values.setProperty("DataFile", fn);<a name="line.144"></a>
<FONT color="green">145</FONT>            notifyObservers("DataFile");<a name="line.145"></a>
<FONT color="green">146</FONT>    }<a name="line.146"></a>
<FONT color="green">147</FONT>    <a name="line.147"></a>
<FONT color="green">148</FONT>    <a name="line.148"></a>
<FONT color="green">149</FONT>    /**<a name="line.149"></a>
<FONT color="green">150</FONT>     * Gets whether to plot only tail data.<a name="line.150"></a>
<FONT color="green">151</FONT>     *  <a name="line.151"></a>
<FONT color="green">152</FONT>     * @return {@code true} if only the datasets at the end of the data setream should be plotted,<a name="line.152"></a>
<FONT color="green">153</FONT>     * {@code false} if data sets should be sampled from the complete data stream.<a name="line.153"></a>
<FONT color="green">154</FONT>     */<a name="line.154"></a>
<FONT color="green">155</FONT>    public boolean getShowOnlyTailData() { return "1".equalsIgnoreCase(values.getProperty("ShowOnlyTailData")); }<a name="line.155"></a>
<FONT color="green">156</FONT>    <a name="line.156"></a>
<FONT color="green">157</FONT>    /**<a name="line.157"></a>
<FONT color="green">158</FONT>     * Setts whether to plot only tail data.<a name="line.158"></a>
<FONT color="green">159</FONT>     *  <a name="line.159"></a>
<FONT color="green">160</FONT>     * @param v {@code true} if only the datasets at the end of the data setream should be plotted,<a name="line.160"></a>
<FONT color="green">161</FONT>     * {@code false} if data sets should be sampled from the complete data stream.<a name="line.161"></a>
<FONT color="green">162</FONT>     */<a name="line.162"></a>
<FONT color="green">163</FONT>    public void setShowOnlyTailData(boolean v) {<a name="line.163"></a>
<FONT color="green">164</FONT>            values.setProperty("ShowOnlyTailData", v ? "1" : "0");<a name="line.164"></a>
<FONT color="green">165</FONT>            notifyObservers("ShowOnlyTailData");<a name="line.165"></a>
<FONT color="green">166</FONT>    }<a name="line.166"></a>
<FONT color="green">167</FONT>    <a name="line.167"></a>
<FONT color="green">168</FONT>    /**<a name="line.168"></a>
<FONT color="green">169</FONT>     * Gets whether the data stream should not be cached in memory.<a name="line.169"></a>
<FONT color="green">170</FONT>     *  <a name="line.170"></a>
<FONT color="green">171</FONT>     * @return {@code true} if the data stream should be read from the start each time the graph is updated,<a name="line.171"></a>
<FONT color="green">172</FONT>     * {@code false} if data should be cached in memory and only the new data sets should be read on each update. <a name="line.172"></a>
<FONT color="green">173</FONT>     */<a name="line.173"></a>
<FONT color="green">174</FONT>    public boolean getDoNotCacheData() { return "1".equalsIgnoreCase(values.getProperty("DoNotCacheData")); }<a name="line.174"></a>
<FONT color="green">175</FONT>    <a name="line.175"></a>
<FONT color="green">176</FONT>    /**<a name="line.176"></a>
<FONT color="green">177</FONT>     * Sets whether the data stream should not be cached in memory.<a name="line.177"></a>
<FONT color="green">178</FONT>     *  <a name="line.178"></a>
<FONT color="green">179</FONT>     * @param v {@code true} if the data stream should be read from the start each time the graph is updated,<a name="line.179"></a>
<FONT color="green">180</FONT>     * {@code false} if data should be cached in memory and only the new data sets should be read on each update. <a name="line.180"></a>
<FONT color="green">181</FONT>     */<a name="line.181"></a>
<FONT color="green">182</FONT>    public void setDoNotCacheData(boolean v) {<a name="line.182"></a>
<FONT color="green">183</FONT>            values.setProperty("DoNotCacheData", v ? "1" : "0");<a name="line.183"></a>
<FONT color="green">184</FONT>            notifyObservers("DoNotCacheData");<a name="line.184"></a>
<FONT color="green">185</FONT>    }<a name="line.185"></a>
<FONT color="green">186</FONT>    <a name="line.186"></a>
<FONT color="green">187</FONT>    /**<a name="line.187"></a>
<FONT color="green">188</FONT>     * Gets the interval between automatic graph updates.<a name="line.188"></a>
<FONT color="green">189</FONT>     * <a name="line.189"></a>
<FONT color="green">190</FONT>     * @return The number of milliseconds to wait between trying to read from the data stream next time.<a name="line.190"></a>
<FONT color="green">191</FONT>     * If this values is {@code &lt; 1} no automatic update should be initiated.<a name="line.191"></a>
<FONT color="green">192</FONT>     */<a name="line.192"></a>
<FONT color="green">193</FONT>    public long getUpdateFrequency() { return Long.parseLong(values.getProperty("UpdateFrequency")); }<a name="line.193"></a>
<FONT color="green">194</FONT>    <a name="line.194"></a>
<FONT color="green">195</FONT>    /**<a name="line.195"></a>
<FONT color="green">196</FONT>     * Sets the interval between automatic graph updates.<a name="line.196"></a>
<FONT color="green">197</FONT>     * <a name="line.197"></a>
<FONT color="green">198</FONT>     * @param f The number of milliseconds to wait between trying to read from the data stream next time.<a name="line.198"></a>
<FONT color="green">199</FONT>     * Pass a value {@code f &lt; 1} to indicate that no automatic update should be initiated.<a name="line.199"></a>
<FONT color="green">200</FONT>     */<a name="line.200"></a>
<FONT color="green">201</FONT>    public void setUpdateFrequency(long f) {<a name="line.201"></a>
<FONT color="green">202</FONT>            values.setProperty("UpdateFrequency", ""+f);<a name="line.202"></a>
<FONT color="green">203</FONT>            notifyObservers("UpdateFrequency");<a name="line.203"></a>
<FONT color="green">204</FONT>    }<a name="line.204"></a>
<FONT color="green">205</FONT>    <a name="line.205"></a>
<FONT color="green">206</FONT>    } // public class DataFileSettings<a name="line.206"></a>




























































</PRE>
</BODY>
</HTML>
