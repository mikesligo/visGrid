<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc (build 1.6.0) on Sun Jun 03 18:12:10 EST 2007 -->
<META http-equiv="Content-Type" content="text/html; charset=utf-8">
<TITLE>
DataStreamReader
</TITLE>

<META NAME="date" CONTENT="2007-06-03">

<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../LiveGraph-JavaDoc.css" TITLE="Style">

<SCRIPT type="text/javascript">
function windowTitle()
{
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="DataStreamReader";
    }
}
</SCRIPT>
<NOSCRIPT>
</NOSCRIPT>

</HEAD>

<BODY BGCOLOR="white" onload="windowTitle();">
<HR>


<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="class-use/DataStreamReader.html"><FONT CLASS="NavBarFont1"><B>Use</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
<a href=http://www.live-graph.org target=_blank>LiveGraph</a><br />data visualisation and analysis framework</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../org/LiveGraph/dataFile/read/DataStreamObserverAdapter.html" title="class in org.LiveGraph.dataFile.read"><B>PREV CLASS</B></A>&nbsp;
&nbsp;NEXT CLASS</FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html?org/LiveGraph/dataFile/read/DataStreamReader.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="DataStreamReader.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
org.LiveGraph.dataFile.read</FONT>
<BR>
Class DataStreamReader</H2>
<PRE>
java.lang.Object
  <IMG SRC="../../../../resources/inherit.gif" ALT="extended by "><B>org.LiveGraph.dataFile.read.DataStreamReader</B>
</PRE>
<DL>
<DT><B>All Implemented Interfaces:</B> <DD>java.io.Closeable</DD>
</DL>
<HR>
<DL>
<DT><PRE>public class <A HREF="../../../../src-html/org/LiveGraph/dataFile/read/DataStreamReader.html#line.78"><B>DataStreamReader</B></A><DT>extends java.lang.Object<DT>implements java.io.Closeable</DL>
</PRE>

<P>
A reader for a data stream (usually, a CSV file). This reader
 will parse the data stream and extract the file information, the data
 series headings and the actual data.<br />
 <br />
 The information extracted from the data stream is passed to the application
 using an observer pattern: after a line was parsed, the appropriate 
 <code>notifyXXXX(...)</code>-method of this class is called with the extracted
 information. The <code>notifyXXXX(...)</code>-methods dispatch appropriate
 notifications to all <A HREF="../../../../org/LiveGraph/dataFile/read/DataStreamObserver.html" title="interface in org.LiveGraph.dataFile.read"><CODE>DataStreamObserver</CODE></A>-objects registered with this
 <code>DataStreamReader</code>-instance.<br />
 If required, an application may also overwrite the <code>notifyXXXX(...)</code>-methods
 to handle data read events.<br /> 
 <br />
 See <A HREF="../../../../org/LiveGraph/dataFile/write/DataStreamWriter.html" title="class in org.LiveGraph.dataFile.write"><CODE>DataStreamWriter</CODE></A> for the details of the
 data file format.<br />
 <br />
 Note, that this class has a different role than it did in version 1.01 of the
 LiveGraph API. The <code>DataStreamReader</code> class from version 1.01 is replaced by
 <A HREF="../../../../org/LiveGraph/dataCache/DataStreamToCacheReader.html" title="class in org.LiveGraph.dataCache"><CODE>DataStreamToCacheReader</CODE></A>.
 
 <p><strong>LiveGraph</strong> (http://www.live-graph.org).</p>
 <p>Copyright (c) 2007 by G. Paperin.</p>
 <p>File: DataStreamReader.java</p> 
 <p style="font-size:smaller;">Redistribution and use in source and binary forms, with or
    without modification, are permitted provided that the following terms and conditions are met:
 </p>
 <p style="font-size:smaller;">1. Redistributions of source code must retain the above
    acknowledgement of the LiveGraph project and its web-site, the above copyright notice,
    this list of conditions and the following disclaimer.<br />
    2. Redistributions in binary form must reproduce the above acknowledgement of the
    LiveGraph project and its web-site, the above copyright notice, this list of conditions
    and the following disclaimer in the documentation and/or other materials provided with
    the distribution.<br />
    3. All advertising materials mentioning features or use of this software or any derived
    software must display the following acknowledgement:<br />
    <em>This product includes software developed by the LiveGraph project and its
    contributors.<br />(http://www.live-graph.org)</em><br />
    4. All advertising materials distributed in form of HTML pages or any other technology
    permitting active hyper-links that mention features or use of this software or any
    derived software must display the acknowledgment specified in condition 3 of this
    agreement, and in addition, include a visible and working hyper-link to the LiveGraph
    homepage (http://www.live-graph.org).
 </p>
 <p style="font-size:smaller;">THIS SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY
    OF ANY KIND, EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS, CONTRIBUTORS OR COPYRIGHT  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING  FROM, OUT OF OR
    IN CONNECTION WITH THE SOFTWARE OR THE USE OR  OTHER DEALINGS IN THE SOFTWARE.
 </p>
<P>

<P>
<DL>
<DT><B>Version:</B></DT>
  <DD><A HREF="../../../../org/LiveGraph/LiveGraph.html#version">"1.1.0"</A></DD>
<DT><B>Author:</B></DT>
  <DD>Greg Paperin (http://www.paperin.org)</DD>
<DT><B>See Also:</B><DD><A HREF="../../../../org/LiveGraph/dataFile/read/DataStreamObserver.html" title="interface in org.LiveGraph.dataFile.read"><CODE>DataStreamObserver</CODE></A>, 
<A HREF="../../../../org/LiveGraph/dataFile/read/DataStreamObserverAdapter.html" title="class in org.LiveGraph.dataFile.read"><CODE>DataStreamObserverAdapter</CODE></A>, 
<A HREF="../../../../org/LiveGraph/dataCache/DataStreamToCacheReader.html" title="class in org.LiveGraph.dataCache"><CODE>DataStreamToCacheReader</CODE></A></DL>
<HR>

<P>
<!-- =========== FIELD SUMMARY =========== -->

<A NAME="field_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Field Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>private &nbsp;java.io.BufferedReader</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/LiveGraph/dataFile/read/DataStreamReader.html#in">in</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Data stream reader.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>private &nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/LiveGraph/dataFile/read/DataStreamReader.html#labelsSet">labelsSet</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether the data series headings are already set-up.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>private &nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/LiveGraph/dataFile/read/DataStreamReader.html#nextDatasetFileIndex">nextDatasetFileIndex</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The data stream index of the next data record.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>private &nbsp;java.util.List&lt;<A HREF="../../../../org/LiveGraph/dataFile/read/DataStreamObserver.html" title="interface in org.LiveGraph.dataFile.read">DataStreamObserver</A>&gt;</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/LiveGraph/dataFile/read/DataStreamReader.html#observers">observers</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Observers who want to know what's on the data stream.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>private &nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/LiveGraph/dataFile/read/DataStreamReader.html#separator">separator</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Data values separator.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>private &nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/LiveGraph/dataFile/read/DataStreamReader.html#separatorSet">separatorSet</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether the data values separator was already finalised.</TD>
</TR>
</TABLE>
&nbsp;
<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../../org/LiveGraph/dataFile/read/DataStreamReader.html#DataStreamReader(java.io.InputStream)">DataStreamReader</A></B>(java.io.InputStream&nbsp;is)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a data reader on the specified stream.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../../org/LiveGraph/dataFile/read/DataStreamReader.html#DataStreamReader(java.io.InputStream, org.LiveGraph.dataFile.read.DataStreamObserver)">DataStreamReader</A></B>(java.io.InputStream&nbsp;is,
                                 <A HREF="../../../../org/LiveGraph/dataFile/read/DataStreamObserver.html" title="interface in org.LiveGraph.dataFile.read">DataStreamObserver</A>&nbsp;observer)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a data reader on the specified stream and add one initial observer.</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Method Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/LiveGraph/dataFile/read/DataStreamReader.html#addObserver(org.LiveGraph.dataFile.read.DataStreamObserver)">addObserver</A></B>(<A HREF="../../../../org/LiveGraph/dataFile/read/DataStreamObserver.html" title="interface in org.LiveGraph.dataFile.read">DataStreamObserver</A>&nbsp;observer)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Adds an observer to this parser.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/LiveGraph/dataFile/read/DataStreamReader.html#close()">close</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Closes the underlying data stream.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.util.List&lt;java.lang.Double&gt;</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/LiveGraph/dataFile/read/DataStreamReader.html#convertTokensToDoubles(java.util.List)">convertTokensToDoubles</A></B>(java.util.List&lt;java.lang.String&gt;&nbsp;tokens)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This static utility method converts a list of <code>String</code> tokens (presumably just parsed
 from a data line) to a list of <code>Double</code> objects containing the tokens' values; tokens
 that cannot be parsed to a <code>Double</code> are represented by <code>null</code>-objects in the
 resulting list.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/LiveGraph/dataFile/read/DataStreamReader.html#countObservers()">countObservers</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Counts this parser's observers.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.util.List&lt;java.lang.String&gt;</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/LiveGraph/dataFile/read/DataStreamReader.html#createUniqueLabels(java.util.List, boolean)">createUniqueLabels</A></B>(java.util.List&lt;java.lang.String&gt;&nbsp;rawLabels,
                                     boolean&nbsp;allowEmptyLabels)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This static utility method converts a list of strings (presumably representing a list of
 labels just parsed from the data file) to a list of strings where each string is unique
 in respect to its <code>equals</code> method (case sensitive); this happens by attaching 
 counters to repreated strings: for instance, <code>["boo", "foo", "boo"]</code> it converted to
 <code>["boo (1)", "foo", "boo (2)"]</code>.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/LiveGraph/dataFile/read/DataStreamReader.html#hasObserver(org.LiveGraph.dataFile.read.DataStreamObserver)">hasObserver</A></B>(<A HREF="../../../../org/LiveGraph/dataFile/read/DataStreamObserver.html" title="interface in org.LiveGraph.dataFile.read">DataStreamObserver</A>&nbsp;observer)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checks whether the specified observer is registered with this parser.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/LiveGraph/dataFile/read/DataStreamReader.html#notifyCommentLine(java.lang.String)">notifyCommentLine</A></B>(java.lang.String&nbsp;comment)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Notifies observers regestered with this parser of a "comment line parsed"-event.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/LiveGraph/dataFile/read/DataStreamReader.html#notifyDataLineRead(java.util.List, int)">notifyDataLineRead</A></B>(java.util.List&lt;java.lang.String&gt;&nbsp;dataTokens,
                                     int&nbsp;datasetIndex)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Notifies observers regestered with this parser of a "dataset parsed"-event.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/LiveGraph/dataFile/read/DataStreamReader.html#notifyFileInfoLine(java.lang.String)">notifyFileInfoLine</A></B>(java.lang.String&nbsp;info)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Notifies observers regestered with this parser of a "file info line parsed"-event.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/LiveGraph/dataFile/read/DataStreamReader.html#notifyLabelsSet(java.util.List)">notifyLabelsSet</A></B>(java.util.List&lt;java.lang.String&gt;&nbsp;labels)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Notifies observers regestered with this parser of a "data series labels parsed"-event.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/LiveGraph/dataFile/read/DataStreamReader.html#notifySeparatorSet(java.lang.String)">notifySeparatorSet</A></B>(java.lang.String&nbsp;separator)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Notifies observers regestered with this parser of a "data values separator set"-event.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>private &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/LiveGraph/dataFile/read/DataStreamReader.html#processCommentLine(java.lang.String)">processCommentLine</A></B>(java.lang.String&nbsp;line)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parses a comments line.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>private &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/LiveGraph/dataFile/read/DataStreamReader.html#processDataLine(java.lang.String)">processDataLine</A></B>(java.lang.String&nbsp;line)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parses a data line.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>private &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/LiveGraph/dataFile/read/DataStreamReader.html#processFileInfoLine(java.lang.String)">processFileInfoLine</A></B>(java.lang.String&nbsp;line)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parses a file information line.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>private &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/LiveGraph/dataFile/read/DataStreamReader.html#processLine(java.lang.String)">processLine</A></B>(java.lang.String&nbsp;line)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Examines a data line and dispatches to a specialised parsing routine.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>private &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/LiveGraph/dataFile/read/DataStreamReader.html#processSeparatorDefinitionLine(java.lang.String)">processSeparatorDefinitionLine</A></B>(java.lang.String&nbsp;line)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parses a data values separator definition line.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>private &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/LiveGraph/dataFile/read/DataStreamReader.html#processSeriesLabelsLine(java.lang.String)">processSeriesLabelsLine</A></B>(java.lang.String&nbsp;line)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parses a data series headings line.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/LiveGraph/dataFile/read/DataStreamReader.html#readFromStream()">readFromStream</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Reads as many data lines from the underlying stream as there are available and parses them.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/LiveGraph/dataFile/read/DataStreamReader.html#readFromStream(int)">readFromStream</A></B>(int&nbsp;maxLines)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Reads up to a specified number of data lines from the underlying stream, and parses the lines.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/LiveGraph/dataFile/read/DataStreamReader.html#ready()">ready</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tells whether this reader's underlying data stream is ready to be read.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/LiveGraph/dataFile/read/DataStreamReader.html#removeObserver(org.LiveGraph.dataFile.read.DataStreamObserver)">removeObserver</A></B>(<A HREF="../../../../org/LiveGraph/dataFile/read/DataStreamObserver.html" title="interface in org.LiveGraph.dataFile.read">DataStreamObserver</A>&nbsp;observer)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;De-registeres the specified observer from this parser.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class java.lang.Object</B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ============ FIELD DETAIL =========== -->

<A NAME="field_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Field Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="in"><!-- --></A><H3>
in</H3>
<PRE>
private java.io.BufferedReader <A HREF="../../../../src-html/org/LiveGraph/dataFile/read/DataStreamReader.html#line.83"><B>in</B></A></PRE>
<DL>
<DD>Data stream reader.
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="separator"><!-- --></A><H3>
separator</H3>
<PRE>
private java.lang.String <A HREF="../../../../src-html/org/LiveGraph/dataFile/read/DataStreamReader.html#line.88"><B>separator</B></A></PRE>
<DL>
<DD>Data values separator.
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="separatorSet"><!-- --></A><H3>
separatorSet</H3>
<PRE>
private boolean <A HREF="../../../../src-html/org/LiveGraph/dataFile/read/DataStreamReader.html#line.93"><B>separatorSet</B></A></PRE>
<DL>
<DD>Whether the data values separator was already finalised.
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="labelsSet"><!-- --></A><H3>
labelsSet</H3>
<PRE>
private boolean <A HREF="../../../../src-html/org/LiveGraph/dataFile/read/DataStreamReader.html#line.98"><B>labelsSet</B></A></PRE>
<DL>
<DD>Whether the data series headings are already set-up.
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="nextDatasetFileIndex"><!-- --></A><H3>
nextDatasetFileIndex</H3>
<PRE>
private int <A HREF="../../../../src-html/org/LiveGraph/dataFile/read/DataStreamReader.html#line.103"><B>nextDatasetFileIndex</B></A></PRE>
<DL>
<DD>The data stream index of the next data record.
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="observers"><!-- --></A><H3>
observers</H3>
<PRE>
private java.util.List&lt;<A HREF="../../../../org/LiveGraph/dataFile/read/DataStreamObserver.html" title="interface in org.LiveGraph.dataFile.read">DataStreamObserver</A>&gt; <A HREF="../../../../src-html/org/LiveGraph/dataFile/read/DataStreamReader.html#line.108"><B>observers</B></A></PRE>
<DL>
<DD>Observers who want to know what's on the data stream.
<P>
<DL>
</DL>
</DL>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="DataStreamReader(java.io.InputStream)"><!-- --></A><H3>
DataStreamReader</H3>
<PRE>
public <A HREF="../../../../src-html/org/LiveGraph/dataFile/read/DataStreamReader.html#line.116"><B>DataStreamReader</B></A>(java.io.InputStream&nbsp;is)</PRE>
<DL>
<DD>Creates a data reader on the specified stream.
<P>
<DL>
<DT><B>Parameters:</B><DD><CODE>is</CODE> - The stream from which to read.</DL>
</DL>
<HR>

<A NAME="DataStreamReader(java.io.InputStream, org.LiveGraph.dataFile.read.DataStreamObserver)"><!-- --></A><H3>
DataStreamReader</H3>
<PRE>
public <A HREF="../../../../src-html/org/LiveGraph/dataFile/read/DataStreamReader.html#line.135"><B>DataStreamReader</B></A>(java.io.InputStream&nbsp;is,
                        <A HREF="../../../../org/LiveGraph/dataFile/read/DataStreamObserver.html" title="interface in org.LiveGraph.dataFile.read">DataStreamObserver</A>&nbsp;observer)</PRE>
<DL>
<DD>Creates a data reader on the specified stream and add one initial observer.
<P>
<DL>
<DT><B>Parameters:</B><DD><CODE>is</CODE> - The stream from which to read.<DD><CODE>observer</CODE> - An observer for the data stream contents.</DL>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Method Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="ready()"><!-- --></A><H3>
ready</H3>
<PRE>
public boolean <A HREF="../../../../src-html/org/LiveGraph/dataFile/read/DataStreamReader.html#line.149"><B>ready</B></A>()
              throws java.io.IOException</PRE>
<DL>
<DD>Tells whether this reader's underlying data stream is ready to be read.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD><code>true</code> if the next <code>readFromStream()</code> is guaranteed not to block for input,
 <code>false</code> otherwise. Note that returning <code>false</code> does not guarantee that the next read
 will block.
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - If an I/O error occurs.</DL>
</DD>
</DL>
<HR>

<A NAME="close()"><!-- --></A><H3>
close</H3>
<PRE>
public void <A HREF="../../../../src-html/org/LiveGraph/dataFile/read/DataStreamReader.html#line.157"><B>close</B></A>()
           throws java.io.IOException</PRE>
<DL>
<DD>Closes the underlying data stream. Further reading is not possible after calling this method.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>close</CODE> in interface <CODE>java.io.Closeable</CODE></DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - If an I/O error occurs.</DL>
</DD>
</DL>
<HR>

<A NAME="readFromStream()"><!-- --></A><H3>
readFromStream</H3>
<PRE>
public int <A HREF="../../../../src-html/org/LiveGraph/dataFile/read/DataStreamReader.html#line.171"><B>readFromStream</B></A>()
                   throws java.io.IOException,
                          <A HREF="../../../../org/LiveGraph/dataFile/common/DataFormatException.html" title="class in org.LiveGraph.dataFile.common">DataFormatException</A></PRE>
<DL>
<DD>Reads as many data lines from the underlying stream as there are available and parses them.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The number on non-empty data lines read.
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - If an I/O error occurs.
<DD><CODE><A HREF="../../../../org/LiveGraph/dataFile/common/DataFormatException.html" title="class in org.LiveGraph.dataFile.common">DataFormatException</A></CODE> - If the data stream contents do not conform with the expected data
 stream format.<DT><B>See Also:</B><DD><A HREF="../../../../org/LiveGraph/dataFile/write/DataStreamWriter.html" title="class in org.LiveGraph.dataFile.write"><CODE>DataStreamWriter</CODE></A>, 
<A HREF="../../../../org/LiveGraph/dataFile/read/DataStreamReader.html#readFromStream(int)"><CODE>readFromStream(int)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="readFromStream(int)"><!-- --></A><H3>
readFromStream</H3>
<PRE>
public int <A HREF="../../../../src-html/org/LiveGraph/dataFile/read/DataStreamReader.html#line.188"><B>readFromStream</B></A>(int&nbsp;maxLines)
                   throws java.io.IOException,
                          <A HREF="../../../../org/LiveGraph/dataFile/common/DataFormatException.html" title="class in org.LiveGraph.dataFile.common">DataFormatException</A></PRE>
<DL>
<DD>Reads up to a specified number of data lines from the underlying stream, and parses the lines.
 Reading is stopped when the specified number of lines in reached or if no more lines are available.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>maxLines</CODE> - The maximum number of data lines to read (empty lines are ignored and not counted,
 but all other lines including comment lines are counted). If negative, all available lines will
 be read.
<DT><B>Returns:</B><DD>The number on non-empty data lines read.
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - If an I/O error occurs.
<DD><CODE><A HREF="../../../../org/LiveGraph/dataFile/common/DataFormatException.html" title="class in org.LiveGraph.dataFile.common">DataFormatException</A></CODE> - If the data stream contents do not conform with the expected data
 stream format.<DT><B>See Also:</B><DD><A HREF="../../../../org/LiveGraph/dataFile/write/DataStreamWriter.html" title="class in org.LiveGraph.dataFile.write"><CODE>DataStreamWriter</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="notifySeparatorSet(java.lang.String)"><!-- --></A><H3>
notifySeparatorSet</H3>
<PRE>
protected void <A HREF="../../../../src-html/org/LiveGraph/dataFile/read/DataStreamReader.html#line.208"><B>notifySeparatorSet</B></A>(java.lang.String&nbsp;separator)</PRE>
<DL>
<DD>Notifies observers regestered with this parser of a "data values separator set"-event.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>separator</CODE> - New data separator to be passed to the observers.</DL>
</DD>
</DL>
<HR>

<A NAME="notifyCommentLine(java.lang.String)"><!-- --></A><H3>
notifyCommentLine</H3>
<PRE>
protected void <A HREF="../../../../src-html/org/LiveGraph/dataFile/read/DataStreamReader.html#line.218"><B>notifyCommentLine</B></A>(java.lang.String&nbsp;comment)</PRE>
<DL>
<DD>Notifies observers regestered with this parser of a "comment line parsed"-event.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>comment</CODE> - The parsed comment line to be passed to the observers.</DL>
</DD>
</DL>
<HR>

<A NAME="notifyFileInfoLine(java.lang.String)"><!-- --></A><H3>
notifyFileInfoLine</H3>
<PRE>
protected void <A HREF="../../../../src-html/org/LiveGraph/dataFile/read/DataStreamReader.html#line.228"><B>notifyFileInfoLine</B></A>(java.lang.String&nbsp;info)</PRE>
<DL>
<DD>Notifies observers regestered with this parser of a "file info line parsed"-event.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>info</CODE> - The parsed file info to be passed to the observers.</DL>
</DD>
</DL>
<HR>

<A NAME="notifyLabelsSet(java.util.List)"><!-- --></A><H3>
notifyLabelsSet</H3>
<PRE>
protected void <A HREF="../../../../src-html/org/LiveGraph/dataFile/read/DataStreamReader.html#line.238"><B>notifyLabelsSet</B></A>(java.util.List&lt;java.lang.String&gt;&nbsp;labels)</PRE>
<DL>
<DD>Notifies observers regestered with this parser of a "data series labels parsed"-event.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>labels</CODE> - The parsed data series labels to be passed to the observers.</DL>
</DD>
</DL>
<HR>

<A NAME="notifyDataLineRead(java.util.List, int)"><!-- --></A><H3>
notifyDataLineRead</H3>
<PRE>
protected void <A HREF="../../../../src-html/org/LiveGraph/dataFile/read/DataStreamReader.html#line.249"><B>notifyDataLineRead</B></A>(java.util.List&lt;java.lang.String&gt;&nbsp;dataTokens,
                                  int&nbsp;datasetIndex)</PRE>
<DL>
<DD>Notifies observers regestered with this parser of a "dataset parsed"-event.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>dataTokens</CODE> - The parsed data tokens to be passed to the observers.<DD><CODE>datasetIndex</CODE> - The file index of the parsed dataset to be passed to the observers.</DL>
</DD>
</DL>
<HR>

<A NAME="addObserver(org.LiveGraph.dataFile.read.DataStreamObserver)"><!-- --></A><H3>
addObserver</H3>
<PRE>
public boolean <A HREF="../../../../src-html/org/LiveGraph/dataFile/read/DataStreamReader.html#line.261"><B>addObserver</B></A>(<A HREF="../../../../org/LiveGraph/dataFile/read/DataStreamObserver.html" title="interface in org.LiveGraph.dataFile.read">DataStreamObserver</A>&nbsp;observer)</PRE>
<DL>
<DD>Adds an observer to this parser.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>observer</CODE> - The observer to add.
<DT><B>Returns:</B><DD><code>if the specified observer cound not be added because it was already registered</code>,
 <code>true otherwise</code>.</DL>
</DD>
</DL>
<HR>

<A NAME="hasObserver(org.LiveGraph.dataFile.read.DataStreamObserver)"><!-- --></A><H3>
hasObserver</H3>
<PRE>
public boolean <A HREF="../../../../src-html/org/LiveGraph/dataFile/read/DataStreamReader.html#line.274"><B>hasObserver</B></A>(<A HREF="../../../../org/LiveGraph/dataFile/read/DataStreamObserver.html" title="interface in org.LiveGraph.dataFile.read">DataStreamObserver</A>&nbsp;observer)</PRE>
<DL>
<DD>Checks whether the specified observer is registered with this parser.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>observer</CODE> - An observer.
<DT><B>Returns:</B><DD><code>true</code> if the specified <code>observer</code> is not <code>null</code> and is regestered
 with this parser, <code>false</code> otherwise.</DL>
</DD>
</DL>
<HR>

<A NAME="removeObserver(org.LiveGraph.dataFile.read.DataStreamObserver)"><!-- --></A><H3>
removeObserver</H3>
<PRE>
public boolean <A HREF="../../../../src-html/org/LiveGraph/dataFile/read/DataStreamReader.html#line.287"><B>removeObserver</B></A>(<A HREF="../../../../org/LiveGraph/dataFile/read/DataStreamObserver.html" title="interface in org.LiveGraph.dataFile.read">DataStreamObserver</A>&nbsp;observer)</PRE>
<DL>
<DD>De-registeres the specified observer from this parser.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>observer</CODE> - An observer.
<DT><B>Returns:</B><DD><code>true</code> if the specified observer is not <code>null</code> and was on the 
 list of registered observers and is now removed from this list, <code>false</code> otherwise.</DL>
</DD>
</DL>
<HR>

<A NAME="countObservers()"><!-- --></A><H3>
countObservers</H3>
<PRE>
public int <A HREF="../../../../src-html/org/LiveGraph/dataFile/read/DataStreamReader.html#line.298"><B>countObservers</B></A>()</PRE>
<DL>
<DD>Counts this parser's observers.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The number of observers registered with this parser.</DL>
</DD>
</DL>
<HR>

<A NAME="convertTokensToDoubles(java.util.List)"><!-- --></A><H3>
convertTokensToDoubles</H3>
<PRE>
public static java.util.List&lt;java.lang.Double&gt; <A HREF="../../../../src-html/org/LiveGraph/dataFile/read/DataStreamReader.html#line.311"><B>convertTokensToDoubles</B></A>(java.util.List&lt;java.lang.String&gt;&nbsp;tokens)</PRE>
<DL>
<DD>This static utility method converts a list of <code>String</code> tokens (presumably just parsed
 from a data line) to a list of <code>Double</code> objects containing the tokens' values; tokens
 that cannot be parsed to a <code>Double</code> are represented by <code>null</code>-objects in the
 resulting list.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>tokens</CODE> - A list of data tokens.
<DT><B>Returns:</B><DD>A list of the double values of the specified tokens.</DL>
</DD>
</DL>
<HR>

<A NAME="createUniqueLabels(java.util.List, boolean)"><!-- --></A><H3>
createUniqueLabels</H3>
<PRE>
public static java.util.List&lt;java.lang.String&gt; <A HREF="../../../../src-html/org/LiveGraph/dataFile/read/DataStreamReader.html#line.348"><B>createUniqueLabels</B></A>(java.util.List&lt;java.lang.String&gt;&nbsp;rawLabels,
                                                                  boolean&nbsp;allowEmptyLabels)</PRE>
<DL>
<DD>This static utility method converts a list of strings (presumably representing a list of
 labels just parsed from the data file) to a list of strings where each string is unique
 in respect to its <code>equals</code> method (case sensitive); this happens by attaching 
 counters to repreated strings: for instance, <code>["boo", "foo", "boo"]</code> it converted to
 <code>["boo (1)", "foo", "boo (2)"]</code>.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>rawLabels</CODE> - The list of labels to convert.<DD><CODE>allowEmptyLabels</CODE> - If this is <code>false</code>, all empty strings (<code>""</code>) are converted
 to underscores (<code>"_"</code>) before possibly applying the counters.
<DT><B>Returns:</B><DD>A list of unique data series labels based on the specified list.</DL>
</DD>
</DL>
<HR>

<A NAME="processLine(java.lang.String)"><!-- --></A><H3>
processLine</H3>
<PRE>
private void <A HREF="../../../../src-html/org/LiveGraph/dataFile/read/DataStreamReader.html#line.395"><B>processLine</B></A>(java.lang.String&nbsp;line)
                  throws <A HREF="../../../../org/LiveGraph/dataFile/common/DataFormatException.html" title="class in org.LiveGraph.dataFile.common">DataFormatException</A></PRE>
<DL>
<DD>Examines a data line and dispatches to a specialised parsing routine.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>line</CODE> - A data line.
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/LiveGraph/dataFile/common/DataFormatException.html" title="class in org.LiveGraph.dataFile.common">DataFormatException</A></CODE> - If the data stream contents do not conform with the expected data
 stream format.</DL>
</DD>
</DL>
<HR>

<A NAME="processSeparatorDefinitionLine(java.lang.String)"><!-- --></A><H3>
processSeparatorDefinitionLine</H3>
<PRE>
private void <A HREF="../../../../src-html/org/LiveGraph/dataFile/read/DataStreamReader.html#line.431"><B>processSeparatorDefinitionLine</B></A>(java.lang.String&nbsp;line)
                                     throws <A HREF="../../../../org/LiveGraph/dataFile/common/DataFormatException.html" title="class in org.LiveGraph.dataFile.common">DataFormatException</A></PRE>
<DL>
<DD>Parses a data values separator definition line.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>line</CODE> - Data line to parse.
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/LiveGraph/dataFile/common/DataFormatException.html" title="class in org.LiveGraph.dataFile.common">DataFormatException</A></CODE> - If the data line contents are not in the expected format.</DL>
</DD>
</DL>
<HR>

<A NAME="processCommentLine(java.lang.String)"><!-- --></A><H3>
processCommentLine</H3>
<PRE>
private void <A HREF="../../../../src-html/org/LiveGraph/dataFile/read/DataStreamReader.html#line.456"><B>processCommentLine</B></A>(java.lang.String&nbsp;line)
                         throws <A HREF="../../../../org/LiveGraph/dataFile/common/DataFormatException.html" title="class in org.LiveGraph.dataFile.common">DataFormatException</A></PRE>
<DL>
<DD>Parses a comments line.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>line</CODE> - Data line to parse.
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/LiveGraph/dataFile/common/DataFormatException.html" title="class in org.LiveGraph.dataFile.common">DataFormatException</A></CODE> - If the data line contents are not in the expected format.</DL>
</DD>
</DL>
<HR>

<A NAME="processFileInfoLine(java.lang.String)"><!-- --></A><H3>
processFileInfoLine</H3>
<PRE>
private void <A HREF="../../../../src-html/org/LiveGraph/dataFile/read/DataStreamReader.html#line.471"><B>processFileInfoLine</B></A>(java.lang.String&nbsp;line)
                          throws <A HREF="../../../../org/LiveGraph/dataFile/common/DataFormatException.html" title="class in org.LiveGraph.dataFile.common">DataFormatException</A></PRE>
<DL>
<DD>Parses a file information line.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>line</CODE> - Data line to parse.
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/LiveGraph/dataFile/common/DataFormatException.html" title="class in org.LiveGraph.dataFile.common">DataFormatException</A></CODE> - If the data line contents are not in the expected format.</DL>
</DD>
</DL>
<HR>

<A NAME="processSeriesLabelsLine(java.lang.String)"><!-- --></A><H3>
processSeriesLabelsLine</H3>
<PRE>
private void <A HREF="../../../../src-html/org/LiveGraph/dataFile/read/DataStreamReader.html#line.486"><B>processSeriesLabelsLine</B></A>(java.lang.String&nbsp;line)
                              throws <A HREF="../../../../org/LiveGraph/dataFile/common/DataFormatException.html" title="class in org.LiveGraph.dataFile.common">DataFormatException</A></PRE>
<DL>
<DD>Parses a data series headings line.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>line</CODE> - Data line to parse.
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/LiveGraph/dataFile/common/DataFormatException.html" title="class in org.LiveGraph.dataFile.common">DataFormatException</A></CODE> - If the data line contents are not in the expected format.</DL>
</DD>
</DL>
<HR>

<A NAME="processDataLine(java.lang.String)"><!-- --></A><H3>
processDataLine</H3>
<PRE>
private void <A HREF="../../../../src-html/org/LiveGraph/dataFile/read/DataStreamReader.html#line.501"><B>processDataLine</B></A>(java.lang.String&nbsp;line)
                      throws <A HREF="../../../../org/LiveGraph/dataFile/common/DataFormatException.html" title="class in org.LiveGraph.dataFile.common">DataFormatException</A></PRE>
<DL>
<DD>Parses a data line.
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>line</CODE> - Data line to parse.
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/LiveGraph/dataFile/common/DataFormatException.html" title="class in org.LiveGraph.dataFile.common">DataFormatException</A></CODE> - If the data line contents are not in the expected format.</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="class-use/DataStreamReader.html"><FONT CLASS="NavBarFont1"><B>Use</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
<table><tr align=right>
								<td><a href=http://www.live-graph.org target=_blank>LiveGraph</a><br />data visualisation and analysis framework</td>
								<td><a href=http://sourceforge.net/projects/live-graph/ title=LiveGraph&nbsp;is&nbsp;a&nbsp;member&nbsp;of&nbsp;SourceForge.net target=_blank><img src=http://sflogo.sourceforge.net/sflogo.php?group_id=191061&amp;type=1 title=LiveGraph&nbsp;is&nbsp;a&nbsp;member&nbsp;of&nbsp;SourceForge.net alt=LiveGraph&nbsp;is&nbsp;a&nbsp;member&nbsp;of&nbsp;SourceForge.net width=88 height=31 border=0 /></a></td>
								<td><a href=http://sourceforge.net/donate/index.php?group_id=191061 target=_blank title=Donate&nbsp;to&nbsp;LiveGraph><img src=http://images.sourceforge.net/images/project-support.jpg width=88 height=32 border=0 alt=Donate&nbsp;to&nbsp;LiveGraph title=Donate&nbsp;to&nbsp;LiveGraph /></a></td>
							</tr></table>
							<script src=http://www.google-analytics.com/urchin.js type=text/javascript></script>
							<script type=text/javascript>
								<!--
									_uacct = UA-1766210-1;
									urchinTracker();
								// -->
							</script>
						</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../org/LiveGraph/dataFile/read/DataStreamObserverAdapter.html" title="class in org.LiveGraph.dataFile.read"><B>PREV CLASS</B></A>&nbsp;
&nbsp;NEXT CLASS</FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html?org/LiveGraph/dataFile/read/DataStreamReader.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="DataStreamReader.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>

</BODY>
</HTML>
