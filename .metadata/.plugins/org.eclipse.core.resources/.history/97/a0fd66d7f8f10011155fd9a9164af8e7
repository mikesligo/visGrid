<HTML>
<BODY BGCOLOR="white">
<PRE>
<FONT color="green">001</FONT>    package org.LiveGraph.dataFile.read;<a name="line.1"></a>
<FONT color="green">002</FONT>    <a name="line.2"></a>
<FONT color="green">003</FONT>    import java.io.BufferedReader;<a name="line.3"></a>
<FONT color="green">004</FONT>    import java.io.Closeable;<a name="line.4"></a>
<FONT color="green">005</FONT>    import java.io.IOException;<a name="line.5"></a>
<FONT color="green">006</FONT>    import java.io.InputStream;<a name="line.6"></a>
<FONT color="green">007</FONT>    import java.io.InputStreamReader;<a name="line.7"></a>
<FONT color="green">008</FONT>    import java.util.ArrayList;<a name="line.8"></a>
<FONT color="green">009</FONT>    import java.util.Collections;<a name="line.9"></a>
<FONT color="green">010</FONT>    import java.util.HashMap;<a name="line.10"></a>
<FONT color="green">011</FONT>    import java.util.List;<a name="line.11"></a>
<FONT color="green">012</FONT>    import java.util.Map;<a name="line.12"></a>
<FONT color="green">013</FONT>    <a name="line.13"></a>
<FONT color="green">014</FONT>    import org.LiveGraph.dataFile.common.DataFormatException;<a name="line.14"></a>
<FONT color="green">015</FONT>    <a name="line.15"></a>
<FONT color="green">016</FONT>    <a name="line.16"></a>
<FONT color="green">017</FONT>    import static org.LiveGraph.dataFile.common.DataFormatTools.*;<a name="line.17"></a>
<FONT color="green">018</FONT>    <a name="line.18"></a>
<FONT color="green">019</FONT>    <a name="line.19"></a>
<FONT color="green">020</FONT>    /**<a name="line.20"></a>
<FONT color="green">021</FONT>     * A reader for a data stream (usually, a CSV file). This reader<a name="line.21"></a>
<FONT color="green">022</FONT>     * will parse the data stream and extract the file information, the data<a name="line.22"></a>
<FONT color="green">023</FONT>     * series headings and the actual data.&lt;br /&gt;<a name="line.23"></a>
<FONT color="green">024</FONT>     * &lt;br /&gt;<a name="line.24"></a>
<FONT color="green">025</FONT>     * The information extracted from the data stream is passed to the application<a name="line.25"></a>
<FONT color="green">026</FONT>     * using an observer pattern: after a line was parsed, the appropriate <a name="line.26"></a>
<FONT color="green">027</FONT>     * {@code notifyXXXX(...)}-method of this class is called with the extracted<a name="line.27"></a>
<FONT color="green">028</FONT>     * information. The {@code notifyXXXX(...)}-methods dispatch appropriate<a name="line.28"></a>
<FONT color="green">029</FONT>     * notifications to all {@link DataStreamObserver}-objects registered with this<a name="line.29"></a>
<FONT color="green">030</FONT>     * {@code DataStreamReader}-instance.&lt;br /&gt;<a name="line.30"></a>
<FONT color="green">031</FONT>     * If required, an application may also overwrite the {@code notifyXXXX(...)}-methods<a name="line.31"></a>
<FONT color="green">032</FONT>     * to handle data read events.&lt;br /&gt; <a name="line.32"></a>
<FONT color="green">033</FONT>     * &lt;br /&gt;<a name="line.33"></a>
<FONT color="green">034</FONT>     * See {@link org.LiveGraph.dataFile.write.DataStreamWriter} for the details of the<a name="line.34"></a>
<FONT color="green">035</FONT>     * data file format.&lt;br /&gt;<a name="line.35"></a>
<FONT color="green">036</FONT>     * &lt;br /&gt;<a name="line.36"></a>
<FONT color="green">037</FONT>     * Note, that this class has a different role than it did in version 1.01 of the<a name="line.37"></a>
<FONT color="green">038</FONT>     * LiveGraph API. The {@code DataStreamReader} class from version 1.01 is replaced by<a name="line.38"></a>
<FONT color="green">039</FONT>     * {@link org.LiveGraph.dataCache.DataStreamToCacheReader}.<a name="line.39"></a>
<FONT color="green">040</FONT>     * <a name="line.40"></a>
<FONT color="green">041</FONT>     * &lt;p&gt;&lt;strong&gt;LiveGraph&lt;/strong&gt; (http://www.live-graph.org).&lt;/p&gt;<a name="line.41"></a>
<FONT color="green">042</FONT>     * &lt;p&gt;Copyright (c) 2007 by G. Paperin.&lt;/p&gt;<a name="line.42"></a>
<FONT color="green">043</FONT>     * &lt;p&gt;File: DataStreamReader.java&lt;/p&gt; <a name="line.43"></a>
<FONT color="green">044</FONT>     * &lt;p style="font-size:smaller;"&gt;Redistribution and use in source and binary forms, with or<a name="line.44"></a>
<FONT color="green">045</FONT>     *    without modification, are permitted provided that the following terms and conditions are met:<a name="line.45"></a>
<FONT color="green">046</FONT>     * &lt;/p&gt;<a name="line.46"></a>
<FONT color="green">047</FONT>     * &lt;p style="font-size:smaller;"&gt;1. Redistributions of source code must retain the above<a name="line.47"></a>
<FONT color="green">048</FONT>     *    acknowledgement of the LiveGraph project and its web-site, the above copyright notice,<a name="line.48"></a>
<FONT color="green">049</FONT>     *    this list of conditions and the following disclaimer.&lt;br /&gt;<a name="line.49"></a>
<FONT color="green">050</FONT>     *    2. Redistributions in binary form must reproduce the above acknowledgement of the<a name="line.50"></a>
<FONT color="green">051</FONT>     *    LiveGraph project and its web-site, the above copyright notice, this list of conditions<a name="line.51"></a>
<FONT color="green">052</FONT>     *    and the following disclaimer in the documentation and/or other materials provided with<a name="line.52"></a>
<FONT color="green">053</FONT>     *    the distribution.&lt;br /&gt;<a name="line.53"></a>
<FONT color="green">054</FONT>     *    3. All advertising materials mentioning features or use of this software or any derived<a name="line.54"></a>
<FONT color="green">055</FONT>     *    software must display the following acknowledgement:&lt;br /&gt;<a name="line.55"></a>
<FONT color="green">056</FONT>     *    &lt;em&gt;This product includes software developed by the LiveGraph project and its<a name="line.56"></a>
<FONT color="green">057</FONT>     *    contributors.&lt;br /&gt;(http://www.live-graph.org)&lt;/em&gt;&lt;br /&gt;<a name="line.57"></a>
<FONT color="green">058</FONT>     *    4. All advertising materials distributed in form of HTML pages or any other technology<a name="line.58"></a>
<FONT color="green">059</FONT>     *    permitting active hyper-links that mention features or use of this software or any<a name="line.59"></a>
<FONT color="green">060</FONT>     *    derived software must display the acknowledgment specified in condition 3 of this<a name="line.60"></a>
<FONT color="green">061</FONT>     *    agreement, and in addition, include a visible and working hyper-link to the LiveGraph<a name="line.61"></a>
<FONT color="green">062</FONT>     *    homepage (http://www.live-graph.org).<a name="line.62"></a>
<FONT color="green">063</FONT>     * &lt;/p&gt;<a name="line.63"></a>
<FONT color="green">064</FONT>     * &lt;p style="font-size:smaller;"&gt;THIS SOFTWARE IS PROVIDED &amp;quot;AS IS&amp;quot;, WITHOUT WARRANTY<a name="line.64"></a>
<FONT color="green">065</FONT>     *    OF ANY KIND, EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF<a name="line.65"></a>
<FONT color="green">066</FONT>     *    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  NONINFRINGEMENT. IN NO EVENT SHALL<a name="line.66"></a>
<FONT color="green">067</FONT>     *    THE AUTHORS, CONTRIBUTORS OR COPYRIGHT  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER<a name="line.67"></a>
<FONT color="green">068</FONT>     *    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING  FROM, OUT OF OR<a name="line.68"></a>
<FONT color="green">069</FONT>     *    IN CONNECTION WITH THE SOFTWARE OR THE USE OR  OTHER DEALINGS IN THE SOFTWARE.<a name="line.69"></a>
<FONT color="green">070</FONT>     * &lt;/p&gt;<a name="line.70"></a>
<FONT color="green">071</FONT>     * <a name="line.71"></a>
<FONT color="green">072</FONT>     * @author Greg Paperin (http://www.paperin.org)<a name="line.72"></a>
<FONT color="green">073</FONT>     * @version {@value org.LiveGraph.LiveGraph#version}<a name="line.73"></a>
<FONT color="green">074</FONT>     * @see DataStreamObserver<a name="line.74"></a>
<FONT color="green">075</FONT>     * @see DataStreamObserverAdapter<a name="line.75"></a>
<FONT color="green">076</FONT>     * @see org.LiveGraph.dataCache.DataStreamToCacheReader<a name="line.76"></a>
<FONT color="green">077</FONT>     */<a name="line.77"></a>
<FONT color="green">078</FONT>    public class DataStreamReader implements Closeable {<a name="line.78"></a>
<FONT color="green">079</FONT>    <a name="line.79"></a>
<FONT color="green">080</FONT>    /**<a name="line.80"></a>
<FONT color="green">081</FONT>     * Data stream reader.<a name="line.81"></a>
<FONT color="green">082</FONT>     */<a name="line.82"></a>
<FONT color="green">083</FONT>    private BufferedReader in = null;<a name="line.83"></a>
<FONT color="green">084</FONT>    <a name="line.84"></a>
<FONT color="green">085</FONT>    /**<a name="line.85"></a>
<FONT color="green">086</FONT>     * Data values separator.<a name="line.86"></a>
<FONT color="green">087</FONT>     */<a name="line.87"></a>
<FONT color="green">088</FONT>    private String separator = DefaultSeparator;<a name="line.88"></a>
<FONT color="green">089</FONT>    <a name="line.89"></a>
<FONT color="green">090</FONT>    /**<a name="line.90"></a>
<FONT color="green">091</FONT>     * Whether the data values separator was already finalised. <a name="line.91"></a>
<FONT color="green">092</FONT>     */<a name="line.92"></a>
<FONT color="green">093</FONT>    private boolean separatorSet = false;<a name="line.93"></a>
<FONT color="green">094</FONT>    <a name="line.94"></a>
<FONT color="green">095</FONT>    /**<a name="line.95"></a>
<FONT color="green">096</FONT>     * Whether the data series headings are already set-up.<a name="line.96"></a>
<FONT color="green">097</FONT>     */<a name="line.97"></a>
<FONT color="green">098</FONT>    private boolean labelsSet = false;<a name="line.98"></a>
<FONT color="green">099</FONT>    <a name="line.99"></a>
<FONT color="green">100</FONT>    /**<a name="line.100"></a>
<FONT color="green">101</FONT>     * The data stream index of the next data record.<a name="line.101"></a>
<FONT color="green">102</FONT>     */<a name="line.102"></a>
<FONT color="green">103</FONT>    private int nextDatasetFileIndex = -1;<a name="line.103"></a>
<FONT color="green">104</FONT>    <a name="line.104"></a>
<FONT color="green">105</FONT>    /**<a name="line.105"></a>
<FONT color="green">106</FONT>     * Observers who want to know what's on the data stream.<a name="line.106"></a>
<FONT color="green">107</FONT>     */<a name="line.107"></a>
<FONT color="green">108</FONT>    private List&lt;DataStreamObserver&gt; observers = null; <a name="line.108"></a>
<FONT color="green">109</FONT>    <a name="line.109"></a>
<FONT color="green">110</FONT>    <a name="line.110"></a>
<FONT color="green">111</FONT>    /**<a name="line.111"></a>
<FONT color="green">112</FONT>     * Creates a data reader on the specified stream.<a name="line.112"></a>
<FONT color="green">113</FONT>     * <a name="line.113"></a>
<FONT color="green">114</FONT>     * @param is The stream from which to read. <a name="line.114"></a>
<FONT color="green">115</FONT>     */<a name="line.115"></a>
<FONT color="green">116</FONT>    public DataStreamReader(InputStream is) {<a name="line.116"></a>
<FONT color="green">117</FONT>            <a name="line.117"></a>
<FONT color="green">118</FONT>            if (null == is)<a name="line.118"></a>
<FONT color="green">119</FONT>                    throw new NullPointerException("Cannot read from a null stream.");<a name="line.119"></a>
<FONT color="green">120</FONT>            <a name="line.120"></a>
<FONT color="green">121</FONT>            this.in = new BufferedReader(new InputStreamReader(is));        <a name="line.121"></a>
<FONT color="green">122</FONT>            this.separator = DefaultSeparator;<a name="line.122"></a>
<FONT color="green">123</FONT>            this.separatorSet = false;<a name="line.123"></a>
<FONT color="green">124</FONT>            this.labelsSet = false;<a name="line.124"></a>
<FONT color="green">125</FONT>            this.nextDatasetFileIndex = -1;<a name="line.125"></a>
<FONT color="green">126</FONT>            this.observers = new ArrayList&lt;DataStreamObserver&gt;(); <a name="line.126"></a>
<FONT color="green">127</FONT>    }<a name="line.127"></a>
<FONT color="green">128</FONT>    <a name="line.128"></a>
<FONT color="green">129</FONT>    /**<a name="line.129"></a>
<FONT color="green">130</FONT>     * Creates a data reader on the specified stream and add one initial observer.<a name="line.130"></a>
<FONT color="green">131</FONT>     * <a name="line.131"></a>
<FONT color="green">132</FONT>     * @param is The stream from which to read. <a name="line.132"></a>
<FONT color="green">133</FONT>     * @param observer An observer for the data stream contents.<a name="line.133"></a>
<FONT color="green">134</FONT>     */<a name="line.134"></a>
<FONT color="green">135</FONT>    public DataStreamReader(InputStream is, DataStreamObserver observer) {<a name="line.135"></a>
<FONT color="green">136</FONT>            this(is);<a name="line.136"></a>
<FONT color="green">137</FONT>            addObserver(observer);<a name="line.137"></a>
<FONT color="green">138</FONT>    }<a name="line.138"></a>
<FONT color="green">139</FONT>    <a name="line.139"></a>
<FONT color="green">140</FONT>    <a name="line.140"></a>
<FONT color="green">141</FONT>    /**<a name="line.141"></a>
<FONT color="green">142</FONT>     * Tells whether this reader's underlying data stream is ready to be read.<a name="line.142"></a>
<FONT color="green">143</FONT>     * <a name="line.143"></a>
<FONT color="green">144</FONT>     * @return {@code true} if the next {@code readFromStream()} is guaranteed not to block for input,<a name="line.144"></a>
<FONT color="green">145</FONT>     * {@code false} otherwise. Note that returning {@code false} does not guarantee that the next read<a name="line.145"></a>
<FONT color="green">146</FONT>     * will block.<a name="line.146"></a>
<FONT color="green">147</FONT>     * @throws IOException If an I/O error occurs.<a name="line.147"></a>
<FONT color="green">148</FONT>     */<a name="line.148"></a>
<FONT color="green">149</FONT>    public boolean ready() throws IOException {<a name="line.149"></a>
<FONT color="green">150</FONT>            return in.ready();<a name="line.150"></a>
<FONT color="green">151</FONT>    }<a name="line.151"></a>
<FONT color="green">152</FONT>    <a name="line.152"></a>
<FONT color="green">153</FONT>    /**<a name="line.153"></a>
<FONT color="green">154</FONT>     * Closes the underlying data stream. Further reading is not possible after calling this method.<a name="line.154"></a>
<FONT color="green">155</FONT>     * @throws IOException If an I/O error occurs.<a name="line.155"></a>
<FONT color="green">156</FONT>     */<a name="line.156"></a>
<FONT color="green">157</FONT>    public void close() throws IOException {<a name="line.157"></a>
<FONT color="green">158</FONT>            in.close();<a name="line.158"></a>
<FONT color="green">159</FONT>    }<a name="line.159"></a>
<FONT color="green">160</FONT>    <a name="line.160"></a>
<FONT color="green">161</FONT>    /**<a name="line.161"></a>
<FONT color="green">162</FONT>     * Reads as many data lines from the underlying stream as there are available and parses them.<a name="line.162"></a>
<FONT color="green">163</FONT>     *  <a name="line.163"></a>
<FONT color="green">164</FONT>     * @return The number on non-empty data lines read.<a name="line.164"></a>
<FONT color="green">165</FONT>     * @throws IOException If an I/O error occurs.<a name="line.165"></a>
<FONT color="green">166</FONT>     * @throws DataFormatException If the data stream contents do not conform with the expected data<a name="line.166"></a>
<FONT color="green">167</FONT>     * stream format.<a name="line.167"></a>
<FONT color="green">168</FONT>     * @see org.LiveGraph.dataFile.write.DataStreamWriter<a name="line.168"></a>
<FONT color="green">169</FONT>     * @see #readFromStream(int)<a name="line.169"></a>
<FONT color="green">170</FONT>     */<a name="line.170"></a>
<FONT color="green">171</FONT>    public int readFromStream() throws IOException, DataFormatException {   <a name="line.171"></a>
<FONT color="green">172</FONT>            return readFromStream(-1);      <a name="line.172"></a>
<FONT color="green">173</FONT>    }<a name="line.173"></a>
<FONT color="green">174</FONT>    <a name="line.174"></a>
<FONT color="green">175</FONT>    /**<a name="line.175"></a>
<FONT color="green">176</FONT>     * Reads up to a specified number of data lines from the underlying stream, and parses the lines.<a name="line.176"></a>
<FONT color="green">177</FONT>     * Reading is stopped when the specified number of lines in reached or if no more lines are available.<a name="line.177"></a>
<FONT color="green">178</FONT>     * <a name="line.178"></a>
<FONT color="green">179</FONT>     * @param maxLines The maximum number of data lines to read (empty lines are ignored and not counted,<a name="line.179"></a>
<FONT color="green">180</FONT>     * but all other lines including comment lines are counted). If negative, all available lines will<a name="line.180"></a>
<FONT color="green">181</FONT>     * be read.<a name="line.181"></a>
<FONT color="green">182</FONT>     * @return The number on non-empty data lines read.<a name="line.182"></a>
<FONT color="green">183</FONT>     * @throws IOException If an I/O error occurs.<a name="line.183"></a>
<FONT color="green">184</FONT>     * @throws DataFormatException If the data stream contents do not conform with the expected data<a name="line.184"></a>
<FONT color="green">185</FONT>     * stream format.<a name="line.185"></a>
<FONT color="green">186</FONT>     * @see org.LiveGraph.dataFile.write.DataStreamWriter<a name="line.186"></a>
<FONT color="green">187</FONT>     */<a name="line.187"></a>
<FONT color="green">188</FONT>    public int readFromStream(int maxLines) throws IOException, DataFormatException {<a name="line.188"></a>
<FONT color="green">189</FONT>            <a name="line.189"></a>
<FONT color="green">190</FONT>            int linesRead = 0;<a name="line.190"></a>
<FONT color="green">191</FONT>            String line = null;<a name="line.191"></a>
<FONT color="green">192</FONT>            while (ready() &amp;&amp; (0 &gt; maxLines || linesRead &lt; maxLines) ) {<a name="line.192"></a>
<FONT color="green">193</FONT>                    line = in.readLine();<a name="line.193"></a>
<FONT color="green">194</FONT>                    line = line.trim();<a name="line.194"></a>
<FONT color="green">195</FONT>                    if (line.length() &gt; 0) {<a name="line.195"></a>
<FONT color="green">196</FONT>                            processLine(line);<a name="line.196"></a>
<FONT color="green">197</FONT>                            linesRead++;<a name="line.197"></a>
<FONT color="green">198</FONT>                    }<a name="line.198"></a>
<FONT color="green">199</FONT>            }<a name="line.199"></a>
<FONT color="green">200</FONT>            return linesRead;<a name="line.200"></a>
<FONT color="green">201</FONT>    }<a name="line.201"></a>
<FONT color="green">202</FONT>    <a name="line.202"></a>
<FONT color="green">203</FONT>    /**<a name="line.203"></a>
<FONT color="green">204</FONT>     * Notifies observers regestered with this parser of a "data values separator set"-event.<a name="line.204"></a>
<FONT color="green">205</FONT>     * <a name="line.205"></a>
<FONT color="green">206</FONT>     * @param separator New data separator to be passed to the observers.<a name="line.206"></a>
<FONT color="green">207</FONT>     */<a name="line.207"></a>
<FONT color="green">208</FONT>    protected void notifySeparatorSet(String separator) {<a name="line.208"></a>
<FONT color="green">209</FONT>            for (DataStreamObserver observer : observers)<a name="line.209"></a>
<FONT color="green">210</FONT>                    observer.eventSeparatorSet(separator, this);<a name="line.210"></a>
<FONT color="green">211</FONT>    }<a name="line.211"></a>
<FONT color="green">212</FONT>    <a name="line.212"></a>
<FONT color="green">213</FONT>    /**<a name="line.213"></a>
<FONT color="green">214</FONT>     * Notifies observers regestered with this parser of a "comment line parsed"-event.<a name="line.214"></a>
<FONT color="green">215</FONT>     * <a name="line.215"></a>
<FONT color="green">216</FONT>     * @param comment The parsed comment line to be passed to the observers.<a name="line.216"></a>
<FONT color="green">217</FONT>     */<a name="line.217"></a>
<FONT color="green">218</FONT>    protected void notifyCommentLine(String comment) {<a name="line.218"></a>
<FONT color="green">219</FONT>            for (DataStreamObserver observer : observers)<a name="line.219"></a>
<FONT color="green">220</FONT>                    observer.eventCommentLine(comment, this);<a name="line.220"></a>
<FONT color="green">221</FONT>    }<a name="line.221"></a>
<FONT color="green">222</FONT>    <a name="line.222"></a>
<FONT color="green">223</FONT>    /**<a name="line.223"></a>
<FONT color="green">224</FONT>     * Notifies observers regestered with this parser of a "file info line parsed"-event.<a name="line.224"></a>
<FONT color="green">225</FONT>     * <a name="line.225"></a>
<FONT color="green">226</FONT>     * @param info The parsed file info to be passed to the observers.<a name="line.226"></a>
<FONT color="green">227</FONT>     */<a name="line.227"></a>
<FONT color="green">228</FONT>    protected void notifyFileInfoLine(String info) {<a name="line.228"></a>
<FONT color="green">229</FONT>            for (DataStreamObserver observer : observers)<a name="line.229"></a>
<FONT color="green">230</FONT>                    observer.eventFileInfoLine(info, this);<a name="line.230"></a>
<FONT color="green">231</FONT>    }<a name="line.231"></a>
<FONT color="green">232</FONT>    <a name="line.232"></a>
<FONT color="green">233</FONT>    /**<a name="line.233"></a>
<FONT color="green">234</FONT>     * Notifies observers regestered with this parser of a "data series labels parsed"-event.<a name="line.234"></a>
<FONT color="green">235</FONT>     * <a name="line.235"></a>
<FONT color="green">236</FONT>     * @param labels The parsed data series labels to be passed to the observers.<a name="line.236"></a>
<FONT color="green">237</FONT>     */<a name="line.237"></a>
<FONT color="green">238</FONT>    protected void notifyLabelsSet(List&lt;String&gt; labels) {<a name="line.238"></a>
<FONT color="green">239</FONT>            for (DataStreamObserver observer : observers)<a name="line.239"></a>
<FONT color="green">240</FONT>                    observer.eventLabelsSet(labels, this);<a name="line.240"></a>
<FONT color="green">241</FONT>    }<a name="line.241"></a>
<FONT color="green">242</FONT>    <a name="line.242"></a>
<FONT color="green">243</FONT>    /**<a name="line.243"></a>
<FONT color="green">244</FONT>     * Notifies observers regestered with this parser of a "dataset parsed"-event.<a name="line.244"></a>
<FONT color="green">245</FONT>     * <a name="line.245"></a>
<FONT color="green">246</FONT>     * @param dataTokens The parsed data tokens to be passed to the observers.<a name="line.246"></a>
<FONT color="green">247</FONT>     * @param datasetIndex The file index of the parsed dataset to be passed to the observers.<a name="line.247"></a>
<FONT color="green">248</FONT>     */<a name="line.248"></a>
<FONT color="green">249</FONT>    protected void notifyDataLineRead(List&lt;String&gt; dataTokens, int datasetIndex) {<a name="line.249"></a>
<FONT color="green">250</FONT>            for (DataStreamObserver observer : observers)<a name="line.250"></a>
<FONT color="green">251</FONT>                    observer.eventDataLineRead(dataTokens, datasetIndex, this);<a name="line.251"></a>
<FONT color="green">252</FONT>    }<a name="line.252"></a>
<FONT color="green">253</FONT>    <a name="line.253"></a>
<FONT color="green">254</FONT>    /**<a name="line.254"></a>
<FONT color="green">255</FONT>     * Adds an observer to this parser.<a name="line.255"></a>
<FONT color="green">256</FONT>     * <a name="line.256"></a>
<FONT color="green">257</FONT>     * @param observer The observer to add.<a name="line.257"></a>
<FONT color="green">258</FONT>     * @return {@code if the specified observer cound not be added because it was already registered},<a name="line.258"></a>
<FONT color="green">259</FONT>     * {@code true otherwise}.<a name="line.259"></a>
<FONT color="green">260</FONT>     */<a name="line.260"></a>
<FONT color="green">261</FONT>    public boolean addObserver(DataStreamObserver observer) {<a name="line.261"></a>
<FONT color="green">262</FONT>            if (null == observer || hasObserver(observer))<a name="line.262"></a>
<FONT color="green">263</FONT>                    return false;<a name="line.263"></a>
<FONT color="green">264</FONT>            return observers.add(observer);<a name="line.264"></a>
<FONT color="green">265</FONT>    }<a name="line.265"></a>
<FONT color="green">266</FONT>    <a name="line.266"></a>
<FONT color="green">267</FONT>    /**<a name="line.267"></a>
<FONT color="green">268</FONT>     * Checks whether the specified observer is registered with this parser.<a name="line.268"></a>
<FONT color="green">269</FONT>     *  <a name="line.269"></a>
<FONT color="green">270</FONT>     * @param observer An observer.<a name="line.270"></a>
<FONT color="green">271</FONT>     * @return {@code true} if the specified {@code observer} is not {@code null} and is regestered<a name="line.271"></a>
<FONT color="green">272</FONT>     * with this parser, {@code false} otherwise.<a name="line.272"></a>
<FONT color="green">273</FONT>     */<a name="line.273"></a>
<FONT color="green">274</FONT>    public boolean hasObserver(DataStreamObserver observer) {<a name="line.274"></a>
<FONT color="green">275</FONT>            if (null == observer)<a name="line.275"></a>
<FONT color="green">276</FONT>                    return false;<a name="line.276"></a>
<FONT color="green">277</FONT>            return observers.contains(observer);    <a name="line.277"></a>
<FONT color="green">278</FONT>    }<a name="line.278"></a>
<FONT color="green">279</FONT>    <a name="line.279"></a>
<FONT color="green">280</FONT>    /**<a name="line.280"></a>
<FONT color="green">281</FONT>     * De-registeres the specified observer from this parser.<a name="line.281"></a>
<FONT color="green">282</FONT>     * <a name="line.282"></a>
<FONT color="green">283</FONT>     * @param observer An observer.<a name="line.283"></a>
<FONT color="green">284</FONT>     * @return {@code true} if the specified observer is not {@code null} and was on the <a name="line.284"></a>
<FONT color="green">285</FONT>     * list of registered observers and is now removed from this list, {@code false} otherwise. <a name="line.285"></a>
<FONT color="green">286</FONT>     */<a name="line.286"></a>
<FONT color="green">287</FONT>    public boolean removeObserver(DataStreamObserver observer) {<a name="line.287"></a>
<FONT color="green">288</FONT>            if (null == observer)<a name="line.288"></a>
<FONT color="green">289</FONT>                    return false;<a name="line.289"></a>
<FONT color="green">290</FONT>            return observers.remove(observer);<a name="line.290"></a>
<FONT color="green">291</FONT>    }<a name="line.291"></a>
<FONT color="green">292</FONT>    <a name="line.292"></a>
<FONT color="green">293</FONT>    /**<a name="line.293"></a>
<FONT color="green">294</FONT>     * Counts this parser's observers.<a name="line.294"></a>
<FONT color="green">295</FONT>     * <a name="line.295"></a>
<FONT color="green">296</FONT>     * @return The number of observers registered with this parser.<a name="line.296"></a>
<FONT color="green">297</FONT>     */<a name="line.297"></a>
<FONT color="green">298</FONT>    public int countObservers() {<a name="line.298"></a>
<FONT color="green">299</FONT>            return observers.size();<a name="line.299"></a>
<FONT color="green">300</FONT>    }<a name="line.300"></a>
<FONT color="green">301</FONT>    <a name="line.301"></a>
<FONT color="green">302</FONT>    /**<a name="line.302"></a>
<FONT color="green">303</FONT>     * This static utility method converts a list of {@code String} tokens (presumably just parsed<a name="line.303"></a>
<FONT color="green">304</FONT>     * from a data line) to a list of {@code Double} objects containing the tokens' values; tokens<a name="line.304"></a>
<FONT color="green">305</FONT>     * that cannot be parsed to a {@code Double} are represented by {@code null}-objects in the<a name="line.305"></a>
<FONT color="green">306</FONT>     * resulting list.<a name="line.306"></a>
<FONT color="green">307</FONT>     * <a name="line.307"></a>
<FONT color="green">308</FONT>     * @param tokens A list of data tokens.<a name="line.308"></a>
<FONT color="green">309</FONT>     * @return A list of the double values of the specified tokens.<a name="line.309"></a>
<FONT color="green">310</FONT>     */<a name="line.310"></a>
<FONT color="green">311</FONT>    public static List&lt;Double&gt; convertTokensToDoubles(List&lt;String&gt; tokens) {<a name="line.311"></a>
<FONT color="green">312</FONT>            <a name="line.312"></a>
<FONT color="green">313</FONT>            if (null == tokens)<a name="line.313"></a>
<FONT color="green">314</FONT>                    return Collections.emptyList();<a name="line.314"></a>
<FONT color="green">315</FONT>            <a name="line.315"></a>
<FONT color="green">316</FONT>            List&lt;Double&gt; doubles = new ArrayList&lt;Double&gt;(tokens.size());<a name="line.316"></a>
<FONT color="green">317</FONT>            for (String tok : tokens) {<a name="line.317"></a>
<FONT color="green">318</FONT>                    <a name="line.318"></a>
<FONT color="green">319</FONT>                    if (null == tok)<a name="line.319"></a>
<FONT color="green">320</FONT>                            continue;<a name="line.320"></a>
<FONT color="green">321</FONT>                    <a name="line.321"></a>
<FONT color="green">322</FONT>                    tok = tok.trim();<a name="line.322"></a>
<FONT color="green">323</FONT>                    <a name="line.323"></a>
<FONT color="green">324</FONT>                    Double val = null;<a name="line.324"></a>
<FONT color="green">325</FONT>                    if (null != tok &amp;&amp; 0 &lt; tok.length()) {<a name="line.325"></a>
<FONT color="green">326</FONT>                            try { val = Double.valueOf(tok); }<a name="line.326"></a>
<FONT color="green">327</FONT>                            catch (NumberFormatException e) { val = null; }<a name="line.327"></a>
<FONT color="green">328</FONT>                    }<a name="line.328"></a>
<FONT color="green">329</FONT>                    <a name="line.329"></a>
<FONT color="green">330</FONT>                    doubles.add(val);               <a name="line.330"></a>
<FONT color="green">331</FONT>            }<a name="line.331"></a>
<FONT color="green">332</FONT>            return doubles;<a name="line.332"></a>
<FONT color="green">333</FONT>    }<a name="line.333"></a>
<FONT color="green">334</FONT>    <a name="line.334"></a>
<FONT color="green">335</FONT>    <a name="line.335"></a>
<FONT color="green">336</FONT>    /**<a name="line.336"></a>
<FONT color="green">337</FONT>     * This static utility method converts a list of strings (presumably representing a list of<a name="line.337"></a>
<FONT color="green">338</FONT>     * labels just parsed from the data file) to a list of strings where each string is unique<a name="line.338"></a>
<FONT color="green">339</FONT>     * in respect to its {@code equals} method (case sensitive); this happens by attaching <a name="line.339"></a>
<FONT color="green">340</FONT>     * counters to repreated strings: for instance, {@code ["boo", "foo", "boo"]} it converted to<a name="line.340"></a>
<FONT color="green">341</FONT>     * {@code ["boo (1)", "foo", "boo (2)"]}.  <a name="line.341"></a>
<FONT color="green">342</FONT>     *  <a name="line.342"></a>
<FONT color="green">343</FONT>     * @param rawLabels The list of labels to convert.<a name="line.343"></a>
<FONT color="green">344</FONT>     * @param allowEmptyLabels If this is {@code false}, all empty strings ({@code ""}) are converted<a name="line.344"></a>
<FONT color="green">345</FONT>     * to underscores ({@code "_"}) before possibly applying the counters.<a name="line.345"></a>
<FONT color="green">346</FONT>     * @return A list of unique data series labels based on the specified list.<a name="line.346"></a>
<FONT color="green">347</FONT>     */<a name="line.347"></a>
<FONT color="green">348</FONT>    public static List&lt;String&gt; createUniqueLabels(List&lt;String&gt; rawLabels, boolean allowEmptyLabels) {<a name="line.348"></a>
<FONT color="green">349</FONT>            <a name="line.349"></a>
<FONT color="green">350</FONT>            List&lt;String&gt; uniqueLabels = new ArrayList&lt;String&gt;();<a name="line.350"></a>
<FONT color="green">351</FONT>            Map&lt;String, Integer&gt; labelCounts = new HashMap&lt;String, Integer&gt;();<a name="line.351"></a>
<FONT color="green">352</FONT>                    <a name="line.352"></a>
<FONT color="green">353</FONT>            // Mark labels which occure more than once:<a name="line.353"></a>
<FONT color="green">354</FONT>            for (String rawLabel : rawLabels) {<a name="line.354"></a>
<FONT color="green">355</FONT>                    <a name="line.355"></a>
<FONT color="green">356</FONT>                    rawLabel = rawLabel.trim();<a name="line.356"></a>
<FONT color="green">357</FONT>                    if (!allowEmptyLabels &amp;&amp; rawLabel.length() == 0)<a name="line.357"></a>
<FONT color="green">358</FONT>                            rawLabel = "_";<a name="line.358"></a>
<FONT color="green">359</FONT>                    <a name="line.359"></a>
<FONT color="green">360</FONT>                    if (!labelCounts.containsKey(rawLabel)) {<a name="line.360"></a>
<FONT color="green">361</FONT>                            <a name="line.361"></a>
<FONT color="green">362</FONT>                            labelCounts.put(rawLabel, 1);<a name="line.362"></a>
<FONT color="green">363</FONT>                            <a name="line.363"></a>
<FONT color="green">364</FONT>                    } else {<a name="line.364"></a>
<FONT color="green">365</FONT>            <a name="line.365"></a>
<FONT color="green">366</FONT>                            int c = labelCounts.get(rawLabel);                      <a name="line.366"></a>
<FONT color="green">367</FONT>                            labelCounts.put(rawLabel, ++c);<a name="line.367"></a>
<FONT color="green">368</FONT>                            rawLabel = rawLabel + " (" + c + ")";<a name="line.368"></a>
<FONT color="green">369</FONT>                    }<a name="line.369"></a>
<FONT color="green">370</FONT>                                                    <a name="line.370"></a>
<FONT color="green">371</FONT>                    uniqueLabels.add(rawLabel);<a name="line.371"></a>
<FONT color="green">372</FONT>            }<a name="line.372"></a>
<FONT color="green">373</FONT>            <a name="line.373"></a>
<FONT color="green">374</FONT>            // Change first occurence of "label" into "label (1)" for the labels which appear more than once:<a name="line.374"></a>
<FONT color="green">375</FONT>            for (String label : labelCounts.keySet()) {<a name="line.375"></a>
<FONT color="green">376</FONT>                    int c = labelCounts.get(label); <a name="line.376"></a>
<FONT color="green">377</FONT>                    if (1 &lt; c) {<a name="line.377"></a>
<FONT color="green">378</FONT>                            int p = uniqueLabels.indexOf(label);<a name="line.378"></a>
<FONT color="green">379</FONT>                            uniqueLabels.set(p, label + " (1)");<a name="line.379"></a>
<FONT color="green">380</FONT>                    }<a name="line.380"></a>
<FONT color="green">381</FONT>            }<a name="line.381"></a>
<FONT color="green">382</FONT>            <a name="line.382"></a>
<FONT color="green">383</FONT>            // Done:        <a name="line.383"></a>
<FONT color="green">384</FONT>            return uniqueLabels;<a name="line.384"></a>
<FONT color="green">385</FONT>    }<a name="line.385"></a>
<FONT color="green">386</FONT>    <a name="line.386"></a>
<FONT color="green">387</FONT>    <a name="line.387"></a>
<FONT color="green">388</FONT>    /**<a name="line.388"></a>
<FONT color="green">389</FONT>     * Examines a data line and dispatches to a specialised parsing routine.<a name="line.389"></a>
<FONT color="green">390</FONT>     * <a name="line.390"></a>
<FONT color="green">391</FONT>     * @param line A data line.<a name="line.391"></a>
<FONT color="green">392</FONT>     * @throws DataFormatException If the data stream contents do not conform with the expected data<a name="line.392"></a>
<FONT color="green">393</FONT>     * stream format.<a name="line.393"></a>
<FONT color="green">394</FONT>     */<a name="line.394"></a>
<FONT color="green">395</FONT>    private void processLine(String line) throws DataFormatException {<a name="line.395"></a>
<FONT color="green">396</FONT>    <a name="line.396"></a>
<FONT color="green">397</FONT>            if (!separatorSet &amp;&amp; line.startsWith(TAGSepDefinition) &amp;&amp; line.endsWith(TAGSepDefinition)) {<a name="line.397"></a>
<FONT color="green">398</FONT>                    processSeparatorDefinitionLine(line);<a name="line.398"></a>
<FONT color="green">399</FONT>                    return;<a name="line.399"></a>
<FONT color="green">400</FONT>            }<a name="line.400"></a>
<FONT color="green">401</FONT>            <a name="line.401"></a>
<FONT color="green">402</FONT>            if (line.startsWith(TAGComment)) {<a name="line.402"></a>
<FONT color="green">403</FONT>                    processCommentLine(line);<a name="line.403"></a>
<FONT color="green">404</FONT>                    return;<a name="line.404"></a>
<FONT color="green">405</FONT>            }<a name="line.405"></a>
<FONT color="green">406</FONT>            <a name="line.406"></a>
<FONT color="green">407</FONT>            if (line.startsWith(TAGFileInfo)) {<a name="line.407"></a>
<FONT color="green">408</FONT>                    processFileInfoLine(line);<a name="line.408"></a>
<FONT color="green">409</FONT>                    return;<a name="line.409"></a>
<FONT color="green">410</FONT>            }<a name="line.410"></a>
<FONT color="green">411</FONT>            <a name="line.411"></a>
<FONT color="green">412</FONT>            if (!labelsSet) {<a name="line.412"></a>
<FONT color="green">413</FONT>                    processSeriesLabelsLine(line);<a name="line.413"></a>
<FONT color="green">414</FONT>                    return;<a name="line.414"></a>
<FONT color="green">415</FONT>            }<a name="line.415"></a>
<FONT color="green">416</FONT>            <a name="line.416"></a>
<FONT color="green">417</FONT>            if (true) {<a name="line.417"></a>
<FONT color="green">418</FONT>                    processDataLine(line);<a name="line.418"></a>
<FONT color="green">419</FONT>                    return;<a name="line.419"></a>
<FONT color="green">420</FONT>            }<a name="line.420"></a>
<FONT color="green">421</FONT>            <a name="line.421"></a>
<FONT color="green">422</FONT>            throw new Error("The program should never get to this line!");          <a name="line.422"></a>
<FONT color="green">423</FONT>    }<a name="line.423"></a>
<FONT color="green">424</FONT>    <a name="line.424"></a>
<FONT color="green">425</FONT>    /**<a name="line.425"></a>
<FONT color="green">426</FONT>     * Parses a data values separator definition line.<a name="line.426"></a>
<FONT color="green">427</FONT>     * <a name="line.427"></a>
<FONT color="green">428</FONT>     * @param line Data line to parse.<a name="line.428"></a>
<FONT color="green">429</FONT>     * @throws DataFormatException If the data line contents are not in the expected format.<a name="line.429"></a>
<FONT color="green">430</FONT>     */<a name="line.430"></a>
<FONT color="green">431</FONT>    private void processSeparatorDefinitionLine(String line) throws DataFormatException {<a name="line.431"></a>
<FONT color="green">432</FONT>            <a name="line.432"></a>
<FONT color="green">433</FONT>            if (line.length() &lt; TAGSepDefinition.length() * 2)<a name="line.433"></a>
<FONT color="green">434</FONT>                    throw new DataFormatException("Illegal separator definition: \"" + line + "\"");<a name="line.434"></a>
<FONT color="green">435</FONT>            <a name="line.435"></a>
<FONT color="green">436</FONT>            if (line.length() == TAGSepDefinition.length() * 2)<a name="line.436"></a>
<FONT color="green">437</FONT>                    throw new DataFormatException("Illegal separator definition: separator may not be an empty string");<a name="line.437"></a>
<FONT color="green">438</FONT>            <a name="line.438"></a>
<FONT color="green">439</FONT>            String sep = line.substring(TAGSepDefinition.length(), line.length() - TAGSepDefinition.length());<a name="line.439"></a>
<FONT color="green">440</FONT>            <a name="line.440"></a>
<FONT color="green">441</FONT>            String problem = isValidSeparator(sep);<a name="line.441"></a>
<FONT color="green">442</FONT>            if (null != problem)<a name="line.442"></a>
<FONT color="green">443</FONT>                    throw new DataFormatException("Illegal separator definition: " + problem);<a name="line.443"></a>
<FONT color="green">444</FONT>            <a name="line.444"></a>
<FONT color="green">445</FONT>            separator = sep;<a name="line.445"></a>
<FONT color="green">446</FONT>            separatorSet = true;<a name="line.446"></a>
<FONT color="green">447</FONT>            notifySeparatorSet(separator);<a name="line.447"></a>
<FONT color="green">448</FONT>    }<a name="line.448"></a>
<FONT color="green">449</FONT>    <a name="line.449"></a>
<FONT color="green">450</FONT>    /**<a name="line.450"></a>
<FONT color="green">451</FONT>     * Parses a comments line.<a name="line.451"></a>
<FONT color="green">452</FONT>     * <a name="line.452"></a>
<FONT color="green">453</FONT>     * @param line Data line to parse.<a name="line.453"></a>
<FONT color="green">454</FONT>     * @throws DataFormatException If the data line contents are not in the expected format.<a name="line.454"></a>
<FONT color="green">455</FONT>     */<a name="line.455"></a>
<FONT color="green">456</FONT>    private void processCommentLine(String line) throws DataFormatException {<a name="line.456"></a>
<FONT color="green">457</FONT>            String comment = "";<a name="line.457"></a>
<FONT color="green">458</FONT>            if (line.length() &gt; TAGComment.length())<a name="line.458"></a>
<FONT color="green">459</FONT>                    comment = line.substring(TAGComment.length()).trim();<a name="line.459"></a>
<FONT color="green">460</FONT>            <a name="line.460"></a>
<FONT color="green">461</FONT>            separatorSet = true;<a name="line.461"></a>
<FONT color="green">462</FONT>            notifyCommentLine(comment);<a name="line.462"></a>
<FONT color="green">463</FONT>    }<a name="line.463"></a>
<FONT color="green">464</FONT>    <a name="line.464"></a>
<FONT color="green">465</FONT>    /**<a name="line.465"></a>
<FONT color="green">466</FONT>     * Parses a file information line.<a name="line.466"></a>
<FONT color="green">467</FONT>     * <a name="line.467"></a>
<FONT color="green">468</FONT>     * @param line Data line to parse.<a name="line.468"></a>
<FONT color="green">469</FONT>     * @throws DataFormatException If the data line contents are not in the expected format.<a name="line.469"></a>
<FONT color="green">470</FONT>     */<a name="line.470"></a>
<FONT color="green">471</FONT>    private void processFileInfoLine(String line) throws DataFormatException {<a name="line.471"></a>
<FONT color="green">472</FONT>            String info = "";<a name="line.472"></a>
<FONT color="green">473</FONT>            if (line.length() &gt; TAGFileInfo.length())<a name="line.473"></a>
<FONT color="green">474</FONT>                    info = line.substring(TAGFileInfo.length()).trim();<a name="line.474"></a>
<FONT color="green">475</FONT>            <a name="line.475"></a>
<FONT color="green">476</FONT>            separatorSet = true;<a name="line.476"></a>
<FONT color="green">477</FONT>            notifyFileInfoLine(info);<a name="line.477"></a>
<FONT color="green">478</FONT>    }<a name="line.478"></a>
<FONT color="green">479</FONT>    <a name="line.479"></a>
<FONT color="green">480</FONT>    /**<a name="line.480"></a>
<FONT color="green">481</FONT>     * Parses a data series headings line.<a name="line.481"></a>
<FONT color="green">482</FONT>     * <a name="line.482"></a>
<FONT color="green">483</FONT>     * @param line Data line to parse.<a name="line.483"></a>
<FONT color="green">484</FONT>     * @throws DataFormatException If the data line contents are not in the expected format.<a name="line.484"></a>
<FONT color="green">485</FONT>     */<a name="line.485"></a>
<FONT color="green">486</FONT>    private void processSeriesLabelsLine(String line) throws DataFormatException {<a name="line.486"></a>
<FONT color="green">487</FONT>            <a name="line.487"></a>
<FONT color="green">488</FONT>            DataLineTokenizer tok = new DataLineTokenizer(line, separator);         <a name="line.488"></a>
<FONT color="green">489</FONT>            nextDatasetFileIndex = 0;<a name="line.489"></a>
<FONT color="green">490</FONT>            labelsSet = true;<a name="line.490"></a>
<FONT color="green">491</FONT>            separatorSet = true;<a name="line.491"></a>
<FONT color="green">492</FONT>            notifyLabelsSet(Collections.unmodifiableList(tok.getTokens()));<a name="line.492"></a>
<FONT color="green">493</FONT>    }<a name="line.493"></a>
<FONT color="green">494</FONT>    <a name="line.494"></a>
<FONT color="green">495</FONT>    /**<a name="line.495"></a>
<FONT color="green">496</FONT>     * Parses a data line.<a name="line.496"></a>
<FONT color="green">497</FONT>     * <a name="line.497"></a>
<FONT color="green">498</FONT>     * @param line Data line to parse.<a name="line.498"></a>
<FONT color="green">499</FONT>     * @throws DataFormatException If the data line contents are not in the expected format.<a name="line.499"></a>
<FONT color="green">500</FONT>     */<a name="line.500"></a>
<FONT color="green">501</FONT>    private void processDataLine(String line) throws DataFormatException {<a name="line.501"></a>
<FONT color="green">502</FONT>            <a name="line.502"></a>
<FONT color="green">503</FONT>            DataLineTokenizer tok = new DataLineTokenizer(line, separator);<a name="line.503"></a>
<FONT color="green">504</FONT>            separatorSet = true;<a name="line.504"></a>
<FONT color="green">505</FONT>            notifyDataLineRead(tok.getTokens(), nextDatasetFileIndex++);<a name="line.505"></a>
<FONT color="green">506</FONT>    }<a name="line.506"></a>
<FONT color="green">507</FONT>    <a name="line.507"></a>
<FONT color="green">508</FONT>    }<a name="line.508"></a>




























































</PRE>
</BODY>
</HTML>
