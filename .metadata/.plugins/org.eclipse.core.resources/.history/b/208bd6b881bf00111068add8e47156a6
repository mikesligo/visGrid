package visGrid.diagram.edit.parts;

/**
 * @generated
 */
public class InverterEditPart extends org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeNodeEditPart  {

			/**
 * @generated
 */
	public static final int VISUAL_ID = 2026;

	/**
 * @generated
 */
	protected org.eclipse.draw2d.IFigure contentPane;

	/**
 * @generated
 */
	protected org.eclipse.draw2d.IFigure primaryShape;
	
		/**
 * @generated
 */
	public InverterEditPart(org.eclipse.gmf.runtime.notation.View view) {
		super(view);
	}
	
		/**
 * @generated
 */
	protected void createDefaultEditPolicies() {
				super.createDefaultEditPolicies();
			installEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.SEMANTIC_ROLE, new visGrid.diagram.edit.policies.InverterItemSemanticEditPolicy());
						installEditPolicy(org.eclipse.gef.EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy());
			// XXX need an SCR to runtime to have another abstract superclass that would let children add reasonable editpolicies
	// removeEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.CONNECTION_HANDLES_ROLE);
	}
	
		/**
 * @generated
 */
	protected org.eclipse.gef.editpolicies.LayoutEditPolicy createLayoutEditPolicy() {
			
		org.eclipse.gmf.runtime.diagram.ui.editpolicies.FlowLayoutEditPolicy lep = new org.eclipse.gmf.runtime.diagram.ui.editpolicies.FlowLayoutEditPolicy() {
			
			protected org.eclipse.gef.commands.Command createAddCommand(org.eclipse.gef.EditPart child, org.eclipse.gef.EditPart after) {
				return null;
			}

			protected org.eclipse.gef.commands.Command createMoveChildCommand(org.eclipse.gef.EditPart child, org.eclipse.gef.EditPart after) {
				return null;
			}

			protected org.eclipse.gef.commands.Command getCreateCommand(org.eclipse.gef.requests.CreateRequest request) {
				return null;
			}
		};
		return lep;
		}
	
		/**
 * @generated
 */
	protected org.eclipse.draw2d.IFigure createNodeShape() {
		return primaryShape = new InverterFigure();
	}

		/**
 * @generated
 */
	public InverterFigure getPrimaryShape() {
		return (InverterFigure) primaryShape;
	}
	
		/**
 * @generated
 */
	protected boolean addFixedChild(org.eclipse.gef.EditPart childEditPart) {
		if (childEditPart instanceof visGrid.diagram.edit.parts.InverterNameEditPart) {
			((visGrid.diagram.edit.parts.InverterNameEditPart) childEditPart).setLabel(getPrimaryShape().getFigureInverterNameFigure());
			return true;
		}
		return false;
	}

		/**
 * @generated
 */
	protected boolean removeFixedChild(org.eclipse.gef.EditPart childEditPart) {
		if (childEditPart instanceof visGrid.diagram.edit.parts.InverterNameEditPart) {
			return true;
		}
		return false;
	}

		/**
 * @generated
 */
	protected void addChildVisual(org.eclipse.gef.EditPart childEditPart, int index) {
		if (addFixedChild(childEditPart)) {
			return;
		}
		super.addChildVisual(childEditPart, -1);
	}

		/**
 * @generated
 */
	protected void removeChildVisual(org.eclipse.gef.EditPart childEditPart) {
		if (removeFixedChild(childEditPart)){
			return;
		}
		super.removeChildVisual(childEditPart);
	}

		/**
 * @generated
 */
	protected org.eclipse.draw2d.IFigure getContentPaneFor(org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart editPart) {
				return getContentPane();
	}

			
		/**
 * @generated
 */
	protected org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure createNodePlate() {
		org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure result = new org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure(40, 40);
				return result;
	}
	
						
		/**
 * Creates figure for this edit part.
 * 
 * Body of this method does not depend on settings in generation model
 * so you may safely remove <i>generated</i> tag and modify it.
 * 
 * @generated
 */
	protected org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure createNodeFigure() {
		org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure figure = createNodePlate();
		figure.setLayoutManager(new org.eclipse.draw2d.StackLayout());
		org.eclipse.draw2d.IFigure shape = createNodeShape();
		figure.add(shape);
		contentPane = setupContentPane(shape);
		return figure;
	}
	
		/**
 * Default implementation treats passed figure as content pane.
 * Respects layout one may have set for generated figure.
 * @param nodeShape instance of generated figure class
 * @generated
 */
	protected org.eclipse.draw2d.IFigure setupContentPane(org.eclipse.draw2d.IFigure nodeShape) {
					if (nodeShape.getLayoutManager() == null) {
									org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout layout =new org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout();
					layout.setSpacing(5);
					nodeShape.setLayoutManager(layout);
							}
				return nodeShape; // use nodeShape itself as contentPane
	}
	
		/**
 * @generated
 */
	public org.eclipse.draw2d.IFigure getContentPane() {
		if (contentPane != null) {
			return contentPane;
		}
		return super.getContentPane();
	}

		/**
 * @generated
 */
	protected void setForegroundColor(org.eclipse.swt.graphics.Color color) {
		if (primaryShape != null) {
			primaryShape.setForegroundColor(color);
		}
	}

		/**
 * @generated
 */
	protected void setBackgroundColor(org.eclipse.swt.graphics.Color color) {
		if (primaryShape != null) {
			primaryShape.setBackgroundColor(color);
		}
	}

		/**
 * @generated
 */
	protected void setLineWidth(int width) {
		if (primaryShape instanceof org.eclipse.draw2d.Shape) {
			((org.eclipse.draw2d.Shape) primaryShape).setLineWidth(width);
		}
	}

		/**
 * @generated
 */
	protected void setLineType(int style) {
		if (primaryShape instanceof org.eclipse.draw2d.Shape) {
			((org.eclipse.draw2d.Shape) primaryShape).setLineStyle(style);
		}
	}

				/**
 * @generated
 */
		public org.eclipse.gef.EditPart getPrimaryChildEditPart() {
			return getChildBySemanticHint(visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.InverterNameEditPart.VISUAL_ID));
		}
	

		/**
 * @generated
 */
	public java.util.List<org.eclipse.gmf.runtime.emf.type.core.IElementType> getMARelTypesOnTarget() {
		java.util.ArrayList<org.eclipse.gmf.runtime.emf.type.core.IElementType> types = new java.util.ArrayList<org.eclipse.gmf.runtime.emf.type.core.IElementType>(1);
				types.add(visGrid.diagram.providers.VisGridElementTypes.ConnectionsInverter_4010);
				return types;
	}

		/**
 * @generated
 */
	public java.util.List<org.eclipse.gmf.runtime.emf.type.core.IElementType> getMATypesForSource(org.eclipse.gmf.runtime.emf.type.core.IElementType relationshipType) {
		java.util.LinkedList<org.eclipse.gmf.runtime.emf.type.core.IElementType> types = new java.util.LinkedList<org.eclipse.gmf.runtime.emf.type.core.IElementType>();
				if (relationshipType == visGrid.diagram.providers.VisGridElementTypes.ConnectionsInverter_4010) {
						types.add(visGrid.diagram.providers.VisGridElementTypes.Connections_2047);
					}
				return types;
	}


		
	
	
	
/**
 * @generated
 */
public class InverterFigure extends org.eclipse.draw2d.RectangleFigure {


	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureInverterNameFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureInverterInverter_typeFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureInverterGenerator_statusFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureInverterGenerator_modeFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureInverterV_InFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureInverterI_InFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureInverterVA_InFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureInverterVdcFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureInverterPhaseA_V_OutFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureInverterPhaseB_V_OutFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureInverterPhaseC_V_OutFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureInverterPhaseA_I_OutFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureInverterPhaseB_I_OutFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureInverterPhaseC_I_OutFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureInverterPower_AFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureInverterPower_BFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureInverterPower_CFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureInverterP_OutFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureInverterQ_OutFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureInverterPower_factorFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureInverterPhasesFigure; 


	/**
	 * @generated
	 */
	public InverterFigure() {
		
	org.eclipse.draw2d.FlowLayout layoutThis = new org.eclipse.draw2d.FlowLayout();
	layoutThis.setStretchMinorAxis(false);
	layoutThis.setMinorAlignment(org.eclipse.draw2d.FlowLayout.ALIGN_LEFTTOP
);

	layoutThis.setMajorAlignment(org.eclipse.draw2d.FlowLayout.ALIGN_LEFTTOP
);
	layoutThis.setMajorSpacing(5);
	layoutThis.setMinorSpacing(5);
	layoutThis.setHorizontal(true);

	this.setLayoutManager(layoutThis);

				createContents();
	}
	/**
	 * @generated
	 */
	private void createContents(){


fFigureInverterNameFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureInverterNameFigure.setText("<...>");

this.add(fFigureInverterNameFigure);



fFigureInverterInverter_typeFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureInverterInverter_typeFigure.setText("<...>");

this.add(fFigureInverterInverter_typeFigure);



fFigureInverterGenerator_statusFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureInverterGenerator_statusFigure.setText("<...>");

this.add(fFigureInverterGenerator_statusFigure);



fFigureInverterGenerator_modeFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureInverterGenerator_modeFigure.setText("<...>");

this.add(fFigureInverterGenerator_modeFigure);



fFigureInverterV_InFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureInverterV_InFigure.setText("<...>");

this.add(fFigureInverterV_InFigure);



fFigureInverterI_InFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureInverterI_InFigure.setText("<...>");

this.add(fFigureInverterI_InFigure);



fFigureInverterVA_InFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureInverterVA_InFigure.setText("<...>");

this.add(fFigureInverterVA_InFigure);



fFigureInverterVdcFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureInverterVdcFigure.setText("<...>");

this.add(fFigureInverterVdcFigure);



fFigureInverterPhaseA_V_OutFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureInverterPhaseA_V_OutFigure.setText("<...>");

this.add(fFigureInverterPhaseA_V_OutFigure);



fFigureInverterPhaseB_V_OutFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureInverterPhaseB_V_OutFigure.setText("<...>");

this.add(fFigureInverterPhaseB_V_OutFigure);



fFigureInverterPhaseC_V_OutFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureInverterPhaseC_V_OutFigure.setText("<...>");

this.add(fFigureInverterPhaseC_V_OutFigure);



fFigureInverterPhaseA_I_OutFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureInverterPhaseA_I_OutFigure.setText("<...>");

this.add(fFigureInverterPhaseA_I_OutFigure);



fFigureInverterPhaseB_I_OutFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureInverterPhaseB_I_OutFigure.setText("<...>");

this.add(fFigureInverterPhaseB_I_OutFigure);



fFigureInverterPhaseC_I_OutFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureInverterPhaseC_I_OutFigure.setText("<...>");

this.add(fFigureInverterPhaseC_I_OutFigure);



fFigureInverterPower_AFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureInverterPower_AFigure.setText("<...>");

this.add(fFigureInverterPower_AFigure);



fFigureInverterPower_BFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureInverterPower_BFigure.setText("<...>");

this.add(fFigureInverterPower_BFigure);



fFigureInverterPower_CFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureInverterPower_CFigure.setText("<...>");

this.add(fFigureInverterPower_CFigure);



fFigureInverterP_OutFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureInverterP_OutFigure.setText("<...>");

this.add(fFigureInverterP_OutFigure);



fFigureInverterQ_OutFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureInverterQ_OutFigure.setText("<...>");

this.add(fFigureInverterQ_OutFigure);



fFigureInverterPower_factorFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureInverterPower_factorFigure.setText("<...>");

this.add(fFigureInverterPower_factorFigure);



fFigureInverterPhasesFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureInverterPhasesFigure.setText("<...>");

this.add(fFigureInverterPhasesFigure);


	}





	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureInverterNameFigure() {
		return fFigureInverterNameFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureInverterInverter_typeFigure() {
		return fFigureInverterInverter_typeFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureInverterGenerator_statusFigure() {
		return fFigureInverterGenerator_statusFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureInverterGenerator_modeFigure() {
		return fFigureInverterGenerator_modeFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureInverterV_InFigure() {
		return fFigureInverterV_InFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureInverterI_InFigure() {
		return fFigureInverterI_InFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureInverterVA_InFigure() {
		return fFigureInverterVA_InFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureInverterVdcFigure() {
		return fFigureInverterVdcFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureInverterPhaseA_V_OutFigure() {
		return fFigureInverterPhaseA_V_OutFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureInverterPhaseB_V_OutFigure() {
		return fFigureInverterPhaseB_V_OutFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureInverterPhaseC_V_OutFigure() {
		return fFigureInverterPhaseC_V_OutFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureInverterPhaseA_I_OutFigure() {
		return fFigureInverterPhaseA_I_OutFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureInverterPhaseB_I_OutFigure() {
		return fFigureInverterPhaseB_I_OutFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureInverterPhaseC_I_OutFigure() {
		return fFigureInverterPhaseC_I_OutFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureInverterPower_AFigure() {
		return fFigureInverterPower_AFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureInverterPower_BFigure() {
		return fFigureInverterPower_BFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureInverterPower_CFigure() {
		return fFigureInverterPower_CFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureInverterP_OutFigure() {
		return fFigureInverterP_OutFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureInverterQ_OutFigure() {
		return fFigureInverterQ_OutFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureInverterPower_factorFigure() {
		return fFigureInverterPower_factorFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureInverterPhasesFigure() {
		return fFigureInverterPhasesFigure;
	}


}


	
	}
