<HTML>
<BODY BGCOLOR="white">
<PRE>
<FONT color="green">001</FONT>    package org.LiveGraph.gui;<a name="line.1"></a>
<FONT color="green">002</FONT>    <a name="line.2"></a>
<FONT color="green">003</FONT>    import java.awt.BorderLayout;<a name="line.3"></a>
<FONT color="green">004</FONT>    import java.awt.FontMetrics;<a name="line.4"></a>
<FONT color="green">005</FONT>    import java.awt.GridBagConstraints;<a name="line.5"></a>
<FONT color="green">006</FONT>    import java.awt.GridBagLayout;<a name="line.6"></a>
<FONT color="green">007</FONT>    import java.awt.Insets;<a name="line.7"></a>
<FONT color="green">008</FONT>    import java.awt.event.ActionEvent;<a name="line.8"></a>
<FONT color="green">009</FONT>    import java.awt.event.ActionListener;<a name="line.9"></a>
<FONT color="green">010</FONT>    import java.awt.event.WindowAdapter;<a name="line.10"></a>
<FONT color="green">011</FONT>    import java.awt.event.WindowEvent;<a name="line.11"></a>
<FONT color="green">012</FONT>    <a name="line.12"></a>
<FONT color="green">013</FONT>    import javax.swing.Box;<a name="line.13"></a>
<FONT color="green">014</FONT>    import javax.swing.ButtonGroup;<a name="line.14"></a>
<FONT color="green">015</FONT>    import javax.swing.JFileChooser;<a name="line.15"></a>
<FONT color="green">016</FONT>    import javax.swing.JFrame;<a name="line.16"></a>
<FONT color="green">017</FONT>    import javax.swing.JPanel;<a name="line.17"></a>
<FONT color="green">018</FONT>    import javax.swing.JRadioButton;<a name="line.18"></a>
<FONT color="green">019</FONT>    import javax.swing.JScrollBar;<a name="line.19"></a>
<FONT color="green">020</FONT>    import javax.swing.WindowConstants;<a name="line.20"></a>
<FONT color="green">021</FONT>    import javax.swing.JScrollPane;<a name="line.21"></a>
<FONT color="green">022</FONT>    import java.awt.Dimension;<a name="line.22"></a>
<FONT color="green">023</FONT>    import java.io.File;<a name="line.23"></a>
<FONT color="green">024</FONT>    import java.util.Arrays;<a name="line.24"></a>
<FONT color="green">025</FONT>    <a name="line.25"></a>
<FONT color="green">026</FONT>    import javax.swing.JTextArea;<a name="line.26"></a>
<FONT color="green">027</FONT>    import javax.swing.JLabel;<a name="line.27"></a>
<FONT color="green">028</FONT>    import javax.swing.JButton;<a name="line.28"></a>
<FONT color="green">029</FONT>    <a name="line.29"></a>
<FONT color="green">030</FONT>    import javax.swing.JSlider;<a name="line.30"></a>
<FONT color="green">031</FONT>    import javax.swing.BorderFactory;<a name="line.31"></a>
<FONT color="green">032</FONT>    import javax.swing.JCheckBox;<a name="line.32"></a>
<FONT color="green">033</FONT>    import javax.swing.event.ChangeEvent;<a name="line.33"></a>
<FONT color="green">034</FONT>    import javax.swing.event.ChangeListener;<a name="line.34"></a>
<FONT color="green">035</FONT>    import javax.swing.filechooser.FileFilter;<a name="line.35"></a>
<FONT color="green">036</FONT>    <a name="line.36"></a>
<FONT color="green">037</FONT>    import org.LiveGraph.LiveGraph;<a name="line.37"></a>
<FONT color="green">038</FONT>    import org.LiveGraph.dataCache.CacheObserver;<a name="line.38"></a>
<FONT color="green">039</FONT>    import org.LiveGraph.dataCache.DataCache;<a name="line.39"></a>
<FONT color="green">040</FONT>    import org.LiveGraph.dataCache.UpdateInvoker;<a name="line.40"></a>
<FONT color="green">041</FONT>    import org.LiveGraph.dataCache.UpdateInvokerObserver;<a name="line.41"></a>
<FONT color="green">042</FONT>    import org.LiveGraph.settings.DataFileSettings;<a name="line.42"></a>
<FONT color="green">043</FONT>    import org.LiveGraph.settings.ErrorWhileSettingHasChangedProcessingException;<a name="line.43"></a>
<FONT color="green">044</FONT>    import org.LiveGraph.settings.ObservableSettings;<a name="line.44"></a>
<FONT color="green">045</FONT>    import org.LiveGraph.settings.SettingsObserver;<a name="line.45"></a>
<FONT color="green">046</FONT>    <a name="line.46"></a>
<FONT color="green">047</FONT>    import com.softnetConsult.utils.swing.SwingTools;<a name="line.47"></a>
<FONT color="green">048</FONT>    <a name="line.48"></a>
<FONT color="green">049</FONT>    /**<a name="line.49"></a>
<FONT color="green">050</FONT>     * The "Data File Settings" window of the application.<a name="line.50"></a>
<FONT color="green">051</FONT>     * <a name="line.51"></a>
<FONT color="green">052</FONT>     * &lt;p style="font-size:smaller;"&gt;This product includes software developed by the<a name="line.52"></a>
<FONT color="green">053</FONT>     *    &lt;strong&gt;LiveGraph&lt;/strong&gt; project and its contributors.&lt;br /&gt;<a name="line.53"></a>
<FONT color="green">054</FONT>     *    (&lt;a href="http://www.live-graph.org" target="_blank"&gt;http://www.live-graph.org&lt;/a&gt;)&lt;br /&gt;<a name="line.54"></a>
<FONT color="green">055</FONT>     *    Copyright (c) 2007 G. Paperin.&lt;br /&gt;<a name="line.55"></a>
<FONT color="green">056</FONT>     *    All rights reserved.<a name="line.56"></a>
<FONT color="green">057</FONT>     * &lt;/p&gt;<a name="line.57"></a>
<FONT color="green">058</FONT>     * &lt;p style="font-size:smaller;"&gt;File: DataFileSettingsWindow.java&lt;/p&gt; <a name="line.58"></a>
<FONT color="green">059</FONT>     * &lt;p style="font-size:smaller;"&gt;Redistribution and use in source and binary forms, with or<a name="line.59"></a>
<FONT color="green">060</FONT>     *    without modification, are permitted provided that the following terms and conditions are met:<a name="line.60"></a>
<FONT color="green">061</FONT>     * &lt;/p&gt;<a name="line.61"></a>
<FONT color="green">062</FONT>     * &lt;p style="font-size:smaller;"&gt;1. Redistributions of source code must retain the above<a name="line.62"></a>
<FONT color="green">063</FONT>     *    acknowledgement of the LiveGraph project and its web-site, the above copyright notice,<a name="line.63"></a>
<FONT color="green">064</FONT>     *    this list of conditions and the following disclaimer.&lt;br /&gt;<a name="line.64"></a>
<FONT color="green">065</FONT>     *    2. Redistributions in binary form must reproduce the above acknowledgement of the<a name="line.65"></a>
<FONT color="green">066</FONT>     *    LiveGraph project and its web-site, the above copyright notice, this list of conditions<a name="line.66"></a>
<FONT color="green">067</FONT>     *    and the following disclaimer in the documentation and/or other materials provided with<a name="line.67"></a>
<FONT color="green">068</FONT>     *    the distribution.&lt;br /&gt;<a name="line.68"></a>
<FONT color="green">069</FONT>     *    3. All advertising materials mentioning features or use of this software or any derived<a name="line.69"></a>
<FONT color="green">070</FONT>     *    software must display the following acknowledgement:&lt;br /&gt;<a name="line.70"></a>
<FONT color="green">071</FONT>     *    &lt;em&gt;This product includes software developed by the LiveGraph project and its<a name="line.71"></a>
<FONT color="green">072</FONT>     *    contributors.&lt;br /&gt;(http://www.live-graph.org)&lt;/em&gt;&lt;br /&gt;<a name="line.72"></a>
<FONT color="green">073</FONT>     *    4. All advertising materials distributed in form of HTML pages or any other technology<a name="line.73"></a>
<FONT color="green">074</FONT>     *    permitting active hyper-links that mention features or use of this software or any<a name="line.74"></a>
<FONT color="green">075</FONT>     *    derived software must display the acknowledgment specified in condition 3 of this<a name="line.75"></a>
<FONT color="green">076</FONT>     *    agreement, and in addition, include a visible and working hyper-link to the LiveGraph<a name="line.76"></a>
<FONT color="green">077</FONT>     *    homepage (http://www.live-graph.org).<a name="line.77"></a>
<FONT color="green">078</FONT>     * &lt;/p&gt;<a name="line.78"></a>
<FONT color="green">079</FONT>     * &lt;p style="font-size:smaller;"&gt;THIS SOFTWARE IS PROVIDED &amp;quot;AS IS&amp;quot;, WITHOUT WARRANTY<a name="line.79"></a>
<FONT color="green">080</FONT>     *    OF ANY KIND, EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF<a name="line.80"></a>
<FONT color="green">081</FONT>     *    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  NONINFRINGEMENT. IN NO EVENT SHALL<a name="line.81"></a>
<FONT color="green">082</FONT>     *    THE AUTHORS, CONTRIBUTORS OR COPYRIGHT  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER<a name="line.82"></a>
<FONT color="green">083</FONT>     *    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING  FROM, OUT OF OR<a name="line.83"></a>
<FONT color="green">084</FONT>     *    IN CONNECTION WITH THE SOFTWARE OR THE USE OR  OTHER DEALINGS IN THE SOFTWARE.<a name="line.84"></a>
<FONT color="green">085</FONT>     * &lt;/p&gt;<a name="line.85"></a>
<FONT color="green">086</FONT>     * <a name="line.86"></a>
<FONT color="green">087</FONT>     * @author Greg Paperin (&lt;a href="http://www.paperin.org" target="_blank"&gt;http://www.paperin.org&lt;/a&gt;)<a name="line.87"></a>
<FONT color="green">088</FONT>     * @version {@value org.LiveGraph.LiveGraph#version}<a name="line.88"></a>
<FONT color="green">089</FONT>     */<a name="line.89"></a>
<FONT color="green">090</FONT>    public class DataFileSettingsWindow extends JFrame<a name="line.90"></a>
<FONT color="green">091</FONT>                                                                            implements UpdateInvokerObserver, SettingsObserver, CacheObserver {<a name="line.91"></a>
<FONT color="green">092</FONT>    <a name="line.92"></a>
<FONT color="green">093</FONT>    private JLabel intervalLabel = null;<a name="line.93"></a>
<FONT color="green">094</FONT>    private JTextArea fileInfoArea = null;<a name="line.94"></a>
<FONT color="green">095</FONT>    private JLabel fileNameLabel = null;<a name="line.95"></a>
<FONT color="green">096</FONT>    private JSlider updateIntervallSlider = null;<a name="line.96"></a>
<FONT color="green">097</FONT>    private JLabel nextUpdateLabel = null;<a name="line.97"></a>
<FONT color="green">098</FONT>    private JCheckBox dontCacheBox = null;<a name="line.98"></a>
<FONT color="green">099</FONT>    private JRadioButton showTailDataButton = null;<a name="line.99"></a>
<FONT color="green">100</FONT>    private JRadioButton showAllDataButton = null;<a name="line.100"></a>
<FONT color="green">101</FONT>    private JFileChooser openFileDialog = null;<a name="line.101"></a>
<FONT color="green">102</FONT>    <a name="line.102"></a>
<FONT color="green">103</FONT>    private static final String [] updateIntervalLabels = {"every 1 second.",<a name="line.103"></a>
<FONT color="green">104</FONT>                                                                                                               "every 2 seconds.", "every 3 seconds.",<a name="line.104"></a>
<FONT color="green">105</FONT>                                                                                                               "every 5 seconds.", "every 10 seconds.",<a name="line.105"></a>
<FONT color="green">106</FONT>                                                                                                               "every 15 seconds.", "every 20 seconds.",                                                                                                       <a name="line.106"></a>
<FONT color="green">107</FONT>                                                                                                               "every 30 seconds.", "every 45 seconds.",<a name="line.107"></a>
<FONT color="green">108</FONT>                                                                                                               "every 1 minute.", "every 90 seconds (1.5 minutes).",<a name="line.108"></a>
<FONT color="green">109</FONT>                                                                                                               "every 2 minutes.", "every 3 minutes.",<a name="line.109"></a>
<FONT color="green">110</FONT>                                                                                                               "every 5 minutes.", "every 10 minutes.",<a name="line.110"></a>
<FONT color="green">111</FONT>                                                                                                               "every 15 minutes.", "every 20 minutes.",<a name="line.111"></a>
<FONT color="green">112</FONT>                                                                                                               "every 30 minutes.", "every 45 minutes.",<a name="line.112"></a>
<FONT color="green">113</FONT>                                                                                                               "every 1 hour.", "only manual update."};<a name="line.113"></a>
<FONT color="green">114</FONT>    private static final long [] updateIntervalValues = {1000, 2000, 3000, 5000, 10000, 15000,<a name="line.114"></a>
<FONT color="green">115</FONT>                                                                                                             20000, 30000, 45000, 60000, 90000, 120000, 180000,<a name="line.115"></a>
<FONT color="green">116</FONT>                                                                                                             300000, 600000, 900000, 1200000, 1800000, 2700000,<a name="line.116"></a>
<FONT color="green">117</FONT>                                                                                                             3600000, -1};<a name="line.117"></a>
<FONT color="green">118</FONT>    static {<a name="line.118"></a>
<FONT color="green">119</FONT>            if (updateIntervalLabels.length != updateIntervalValues.length)<a name="line.119"></a>
<FONT color="green">120</FONT>                    throw new Error("The arrays \"updateIntervalLabels\" and \"updateIntervalValues\" are not of the same size!");<a name="line.120"></a>
<FONT color="green">121</FONT>    }<a name="line.121"></a>
<FONT color="green">122</FONT>    <a name="line.122"></a>
<FONT color="green">123</FONT>    <a name="line.123"></a>
<FONT color="green">124</FONT>    /**<a name="line.124"></a>
<FONT color="green">125</FONT>     * This is the default constructor.<a name="line.125"></a>
<FONT color="green">126</FONT>     */<a name="line.126"></a>
<FONT color="green">127</FONT>    public DataFileSettingsWindow() {<a name="line.127"></a>
<FONT color="green">128</FONT>            super();<a name="line.128"></a>
<FONT color="green">129</FONT>            initialize();<a name="line.129"></a>
<FONT color="green">130</FONT>    }<a name="line.130"></a>
<FONT color="green">131</FONT>    <a name="line.131"></a>
<FONT color="green">132</FONT>    <a name="line.132"></a>
<FONT color="green">133</FONT>    /**<a name="line.133"></a>
<FONT color="green">134</FONT>     * This method initializes the data file settings window.<a name="line.134"></a>
<FONT color="green">135</FONT>     */<a name="line.135"></a>
<FONT color="green">136</FONT>    private void initialize() {<a name="line.136"></a>
<FONT color="green">137</FONT>            <a name="line.137"></a>
<FONT color="green">138</FONT>            // Window settings:<a name="line.138"></a>
<FONT color="green">139</FONT>            <a name="line.139"></a>
<FONT color="green">140</FONT>            final DataFileSettingsWindow DATAFILE_WIN = this;<a name="line.140"></a>
<FONT color="green">141</FONT>            this.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);     <a name="line.141"></a>
<FONT color="green">142</FONT>            Dimension frameDim = new Dimension(470, 300);<a name="line.142"></a>
<FONT color="green">143</FONT>            this.setPreferredSize(frameDim);<a name="line.143"></a>
<FONT color="green">144</FONT>            this.setBounds(5, 5, frameDim.width, frameDim.height);  <a name="line.144"></a>
<FONT color="green">145</FONT>            this.setTitle("Data file settings (LiveGraph)");<a name="line.145"></a>
<FONT color="green">146</FONT>            getContentPane().setLayout(new BorderLayout());<a name="line.146"></a>
<FONT color="green">147</FONT>            <a name="line.147"></a>
<FONT color="green">148</FONT>            // Hide-show listener:<a name="line.148"></a>
<FONT color="green">149</FONT>            <a name="line.149"></a>
<FONT color="green">150</FONT>            this.addWindowListener(new WindowAdapter() {<a name="line.150"></a>
<FONT color="green">151</FONT>                    @Override public void windowClosing(WindowEvent e) {<a name="line.151"></a>
<FONT color="green">152</FONT>                            LiveGraph.application().setDisplayDataFileSettingsWindow(false);<a name="line.152"></a>
<FONT color="green">153</FONT>                    }<a name="line.153"></a>
<FONT color="green">154</FONT>            });<a name="line.154"></a>
<FONT color="green">155</FONT>            <a name="line.155"></a>
<FONT color="green">156</FONT>            // Layout:      <a name="line.156"></a>
<FONT color="green">157</FONT>            <a name="line.157"></a>
<FONT color="green">158</FONT>            //JPanel panel = null;<a name="line.158"></a>
<FONT color="green">159</FONT>            JButton button = null;<a name="line.159"></a>
<FONT color="green">160</FONT>            Dimension dim = null;<a name="line.160"></a>
<FONT color="green">161</FONT>            <a name="line.161"></a>
<FONT color="green">162</FONT>            // Settings controls:<a name="line.162"></a>
<FONT color="green">163</FONT>            <a name="line.163"></a>
<FONT color="green">164</FONT>            JPanel settingsPanel = new JPanel(new GridBagLayout()); <a name="line.164"></a>
<FONT color="green">165</FONT>            settingsPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));<a name="line.165"></a>
<FONT color="green">166</FONT>            getContentPane().add(settingsPanel, BorderLayout.NORTH);        <a name="line.166"></a>
<FONT color="green">167</FONT>            settingsPanel.add(new Box.Filler((dim = new Dimension(1, 1)), dim, dim),<a name="line.167"></a>
<FONT color="green">168</FONT>                                              new GridBagConstraints(3, 0, 1, 1, 1, 0,<a name="line.168"></a>
<FONT color="green">169</FONT>                                                                                             GridBagConstraints.WEST,<a name="line.169"></a>
<FONT color="green">170</FONT>                                                                                             GridBagConstraints.BOTH,<a name="line.170"></a>
<FONT color="green">171</FONT>                                                                                             new Insets(0, 0, 0, 0),<a name="line.171"></a>
<FONT color="green">172</FONT>                                                                                             0, 0));<a name="line.172"></a>
<FONT color="green">173</FONT>            <a name="line.173"></a>
<FONT color="green">174</FONT>            // File name input:     <a name="line.174"></a>
<FONT color="green">175</FONT>            <a name="line.175"></a>
<FONT color="green">176</FONT>            settingsPanel.add(new JLabel("Data file:"), org.LiveGraph.gui.Tools.createGridBagConstraints(0, 0, 3, 1));<a name="line.176"></a>
<FONT color="green">177</FONT>            <a name="line.177"></a>
<FONT color="green">178</FONT>            openFileDialog = new JFileChooser();<a name="line.178"></a>
<FONT color="green">179</FONT>            openFileDialog.addChoosableFileFilter(new FileFilter() {<a name="line.179"></a>
<FONT color="green">180</FONT>            @Override public boolean accept(File f) {<a name="line.180"></a>
<FONT color="green">181</FONT>                    if (null == f) return false;<a name="line.181"></a>
<FONT color="green">182</FONT>                    if (f.isDirectory()) return true;<a name="line.182"></a>
<FONT color="green">183</FONT>                    int p = f.getName().lastIndexOf(".");        <a name="line.183"></a>
<FONT color="green">184</FONT>                    return p &lt; 0 ? false : f.getName().substring(p).equalsIgnoreCase(".csv");<a name="line.184"></a>
<FONT color="green">185</FONT>                }<a name="line.185"></a>
<FONT color="green">186</FONT>            @Override public String getDescription() { return "Comma separated values (*.csv)"; }<a name="line.186"></a>
<FONT color="green">187</FONT>            });<a name="line.187"></a>
<FONT color="green">188</FONT>            openFileDialog.addChoosableFileFilter(new FileFilter() {<a name="line.188"></a>
<FONT color="green">189</FONT>                    @Override public boolean accept(File f) {<a name="line.189"></a>
<FONT color="green">190</FONT>                    if (null == f) return false;<a name="line.190"></a>
<FONT color="green">191</FONT>                    if (f.isDirectory()) return true;<a name="line.191"></a>
<FONT color="green">192</FONT>                    int p = f.getName().lastIndexOf(".");        <a name="line.192"></a>
<FONT color="green">193</FONT>                    return p &lt; 0 ? false : f.getName().substring(p).equalsIgnoreCase(".dat");<a name="line.193"></a>
<FONT color="green">194</FONT>                }<a name="line.194"></a>
<FONT color="green">195</FONT>                    @Override public String getDescription() { return "Generic data files (*.dat)"; }<a name="line.195"></a>
<FONT color="green">196</FONT>            });<a name="line.196"></a>
<FONT color="green">197</FONT>            openFileDialog.setCurrentDirectory(new File(System.getProperty("user.dir")));<a name="line.197"></a>
<FONT color="green">198</FONT>            <a name="line.198"></a>
<FONT color="green">199</FONT>            fileNameLabel = new JLabel("- no data file selected -");<a name="line.199"></a>
<FONT color="green">200</FONT>            fileNameLabel.setFont(SwingTools.getPlainFont(fileNameLabel));<a name="line.200"></a>
<FONT color="green">201</FONT>            settingsPanel.add(fileNameLabel, Tools.createGridBagConstraints(0, 1, 4, 1));<a name="line.201"></a>
<FONT color="green">202</FONT>            settingsPanel.add((button = new JButton("Open...")), Tools.createGridBagConstraints(4, 1, 1, 1));<a name="line.202"></a>
<FONT color="green">203</FONT>            button.addActionListener(new ActionListener() {<a name="line.203"></a>
<FONT color="green">204</FONT>                    public void actionPerformed(ActionEvent e) {<a name="line.204"></a>
<FONT color="green">205</FONT>                            <a name="line.205"></a>
<FONT color="green">206</FONT>                            if (JFileChooser.APPROVE_OPTION != openFileDialog.showOpenDialog(DATAFILE_WIN))<a name="line.206"></a>
<FONT color="green">207</FONT>                                    return;<a name="line.207"></a>
<FONT color="green">208</FONT>                            if (!openFileDialog.getSelectedFile().exists())<a name="line.208"></a>
<FONT color="green">209</FONT>                                    return;<a name="line.209"></a>
<FONT color="green">210</FONT>                            <a name="line.210"></a>
<FONT color="green">211</FONT>                            String filePath = openFileDialog.getSelectedFile().getAbsolutePath();<a name="line.211"></a>
<FONT color="green">212</FONT>                            try {<a name="line.212"></a>
<FONT color="green">213</FONT>                                    LiveGraph.application().getDataFileSettings().setDataFile(filePath);<a name="line.213"></a>
<FONT color="green">214</FONT>                                    LiveGraph.application().logSuccessLn("New source data file set: \"" + filePath + "\".");<a name="line.214"></a>
<FONT color="green">215</FONT>                                    <a name="line.215"></a>
<FONT color="green">216</FONT>                            } catch (ErrorWhileSettingHasChangedProcessingException ex) {<a name="line.216"></a>
<FONT color="green">217</FONT>                                                                    <a name="line.217"></a>
<FONT color="green">218</FONT>                                    setFileNameLabel(null);<a name="line.218"></a>
<FONT color="green">219</FONT>                                    String extraInfo = ".";<a name="line.219"></a>
<FONT color="green">220</FONT>                                    if (null != ex.getCause())<a name="line.220"></a>
<FONT color="green">221</FONT>                                            extraInfo = ": \n    (" + ex.getCause().getMessage() + ").";<a name="line.221"></a>
<FONT color="green">222</FONT>                                            <a name="line.222"></a>
<FONT color="green">223</FONT>                                    LiveGraph.application().logErrorLn("Error setting source data file to \"" + filePath + "\""<a name="line.223"></a>
<FONT color="green">224</FONT>                                                                                                     + extraInfo);                                                                                           <a name="line.224"></a>
<FONT color="green">225</FONT>                                    <a name="line.225"></a>
<FONT color="green">226</FONT>                                    try { LiveGraph.application().getDataFileSettings().setDataFile(""); }<a name="line.226"></a>
<FONT color="green">227</FONT>                                    catch (Exception aex) {}<a name="line.227"></a>
<FONT color="green">228</FONT>                                    LiveGraph.application().logInfoLn("Source data file re-set to: \"\".");<a name="line.228"></a>
<FONT color="green">229</FONT>                            }                                                                       <a name="line.229"></a>
<FONT color="green">230</FONT>            }               <a name="line.230"></a>
<FONT color="green">231</FONT>            });<a name="line.231"></a>
<FONT color="green">232</FONT>            <a name="line.232"></a>
<FONT color="green">233</FONT>            // Cache options:<a name="line.233"></a>
<FONT color="green">234</FONT>            <a name="line.234"></a>
<FONT color="green">235</FONT>            ButtonGroup bGroup = new ButtonGroup();<a name="line.235"></a>
<FONT color="green">236</FONT>            bGroup.add(showAllDataButton = new JRadioButton("Show all data", true));<a name="line.236"></a>
<FONT color="green">237</FONT>            bGroup.add(showTailDataButton = new JRadioButton("Show tail data", false));<a name="line.237"></a>
<FONT color="green">238</FONT>            showAllDataButton.addActionListener(new ActionListener() {<a name="line.238"></a>
<FONT color="green">239</FONT>                    public void actionPerformed(ActionEvent e) {<a name="line.239"></a>
<FONT color="green">240</FONT>                            LiveGraph.application().getDataFileSettings().setShowOnlyTailData(false);<a name="line.240"></a>
<FONT color="green">241</FONT>            }               <a name="line.241"></a>
<FONT color="green">242</FONT>            });     <a name="line.242"></a>
<FONT color="green">243</FONT>            showTailDataButton.addActionListener(new ActionListener() {<a name="line.243"></a>
<FONT color="green">244</FONT>                    public void actionPerformed(ActionEvent e) {<a name="line.244"></a>
<FONT color="green">245</FONT>                            LiveGraph.application().getDataFileSettings().setShowOnlyTailData(true);<a name="line.245"></a>
<FONT color="green">246</FONT>            }               <a name="line.246"></a>
<FONT color="green">247</FONT>            });<a name="line.247"></a>
<FONT color="green">248</FONT>            settingsPanel.add(showAllDataButton, Tools.createGridBagConstraints(0, 3, 1, 1));<a name="line.248"></a>
<FONT color="green">249</FONT>            settingsPanel.add(showTailDataButton, Tools.createGridBagConstraints(1, 3, 1, 1));<a name="line.249"></a>
<FONT color="green">250</FONT>            <a name="line.250"></a>
<FONT color="green">251</FONT>            dontCacheBox = new JCheckBox("Do not cache data", false);<a name="line.251"></a>
<FONT color="green">252</FONT>            dontCacheBox.addActionListener(new ActionListener() {<a name="line.252"></a>
<FONT color="green">253</FONT>                    public void actionPerformed(ActionEvent e) {<a name="line.253"></a>
<FONT color="green">254</FONT>                            LiveGraph.application().getDataFileSettings().setDoNotCacheData(dontCacheBox.isSelected());                     <a name="line.254"></a>
<FONT color="green">255</FONT>            }               <a name="line.255"></a>
<FONT color="green">256</FONT>            });<a name="line.256"></a>
<FONT color="green">257</FONT>            settingsPanel.add(dontCacheBox, Tools.createGridBagConstraints(2, 3, 3, 1));<a name="line.257"></a>
<FONT color="green">258</FONT>            <a name="line.258"></a>
<FONT color="green">259</FONT>            // Update interval slider:<a name="line.259"></a>
<FONT color="green">260</FONT>            <a name="line.260"></a>
<FONT color="green">261</FONT>            settingsPanel.add(new JLabel("Update frequency:"), Tools.createGridBagConstraints(0, 4, 3, 1));<a name="line.261"></a>
<FONT color="green">262</FONT>            updateIntervallSlider = new JSlider(0, updateIntervalLabels.length - 1, updateIntervalLabels.length - 1);<a name="line.262"></a>
<FONT color="green">263</FONT>            updateIntervallSlider.setMinorTickSpacing(1);   <a name="line.263"></a>
<FONT color="green">264</FONT>            updateIntervallSlider.setSnapToTicks(true);<a name="line.264"></a>
<FONT color="green">265</FONT>            updateIntervallSlider.setPaintTicks(true);<a name="line.265"></a>
<FONT color="green">266</FONT>            updateIntervallSlider.setPaintTrack(true);<a name="line.266"></a>
<FONT color="green">267</FONT>            updateIntervallSlider.setPaintLabels(false);<a name="line.267"></a>
<FONT color="green">268</FONT>            updateIntervallSlider.setMajorTickSpacing(1);<a name="line.268"></a>
<FONT color="green">269</FONT>            updateIntervallSlider.addChangeListener(new ChangeListener() {<a name="line.269"></a>
<FONT color="green">270</FONT>                    public void stateChanged(ChangeEvent e) {<a name="line.270"></a>
<FONT color="green">271</FONT>                            int v = updateIntervallSlider.getValue();                       <a name="line.271"></a>
<FONT color="green">272</FONT>                            LiveGraph.application().getDataFileSettings().setUpdateFrequency(updateIntervalValues[v]);<a name="line.272"></a>
<FONT color="green">273</FONT>            }               <a name="line.273"></a>
<FONT color="green">274</FONT>            });<a name="line.274"></a>
<FONT color="green">275</FONT>            settingsPanel.add(updateIntervallSlider, Tools.createGridBagConstraints(0, 5, 5, 1));<a name="line.275"></a>
<FONT color="green">276</FONT>            <a name="line.276"></a>
<FONT color="green">277</FONT>            intervalLabel = new JLabel(updateIntervalLabels[updateIntervalLabels.length - 1]);<a name="line.277"></a>
<FONT color="green">278</FONT>            intervalLabel.setFont(SwingTools.getPlainFont(intervalLabel));<a name="line.278"></a>
<FONT color="green">279</FONT>            settingsPanel.add(intervalLabel, Tools.createGridBagConstraints(0, 6, 4, 1));<a name="line.279"></a>
<FONT color="green">280</FONT>            <a name="line.280"></a>
<FONT color="green">281</FONT>            // Update buttons &amp; cache settings:<a name="line.281"></a>
<FONT color="green">282</FONT>    <a name="line.282"></a>
<FONT color="green">283</FONT>            nextUpdateLabel = new JLabel("Next update: manual. ");<a name="line.283"></a>
<FONT color="green">284</FONT>            settingsPanel.add(nextUpdateLabel, Tools.createGridBagConstraints(0, 7, 4, 1));<a name="line.284"></a>
<FONT color="green">285</FONT>            <a name="line.285"></a>
<FONT color="green">286</FONT>            settingsPanel.add((button = new JButton("Update now")), Tools.createGridBagConstraints(4, 7, 1, 1));<a name="line.286"></a>
<FONT color="green">287</FONT>            button.addActionListener(new ActionListener() {<a name="line.287"></a>
<FONT color="green">288</FONT>                    public void actionPerformed(ActionEvent e) {<a name="line.288"></a>
<FONT color="green">289</FONT>                            LiveGraph.application().initiateDataUpdate();<a name="line.289"></a>
<FONT color="green">290</FONT>            }               <a name="line.290"></a>
<FONT color="green">291</FONT>            });     <a name="line.291"></a>
<FONT color="green">292</FONT>            <a name="line.292"></a>
<FONT color="green">293</FONT>            <a name="line.293"></a>
<FONT color="green">294</FONT>            // File info text field:<a name="line.294"></a>
<FONT color="green">295</FONT>            <a name="line.295"></a>
<FONT color="green">296</FONT>            this.fileInfoArea = new JTextArea();<a name="line.296"></a>
<FONT color="green">297</FONT>            this.fileInfoArea.setEditable(false);<a name="line.297"></a>
<FONT color="green">298</FONT>            JPanel fileInfoPanel = new JPanel(new BorderLayout(5, 5));<a name="line.298"></a>
<FONT color="green">299</FONT>            fileInfoPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));<a name="line.299"></a>
<FONT color="green">300</FONT>            fileInfoPanel.add(new JLabel("File info:"), BorderLayout.NORTH);<a name="line.300"></a>
<FONT color="green">301</FONT>            fileInfoPanel.add(new JScrollPane(this.fileInfoArea), BorderLayout.CENTER);<a name="line.301"></a>
<FONT color="green">302</FONT>            getContentPane().add(fileInfoPanel, BorderLayout.CENTER);<a name="line.302"></a>
<FONT color="green">303</FONT>            <a name="line.303"></a>
<FONT color="green">304</FONT>    }<a name="line.304"></a>
<FONT color="green">305</FONT>    <a name="line.305"></a>
<FONT color="green">306</FONT>    /**<a name="line.306"></a>
<FONT color="green">307</FONT>     * Updates an apropriate label as the invoker counts down the time until the next update.<a name="line.307"></a>
<FONT color="green">308</FONT>     */<a name="line.308"></a>
<FONT color="green">309</FONT>    public void timerTick(UpdateInvoker source) {<a name="line.309"></a>
<FONT color="green">310</FONT>            long remaining = source.getRemainingMillis();<a name="line.310"></a>
<FONT color="green">311</FONT>            if (remaining &lt; 0) {<a name="line.311"></a>
<FONT color="green">312</FONT>                    nextUpdateLabel.setText("Next update: on button click.");<a name="line.312"></a>
<FONT color="green">313</FONT>                    return;<a name="line.313"></a>
<FONT color="green">314</FONT>            }<a name="line.314"></a>
<FONT color="green">315</FONT>            <a name="line.315"></a>
<FONT color="green">316</FONT>            long h = remaining / 3600000;<a name="line.316"></a>
<FONT color="green">317</FONT>            long m = (remaining % 3600000) / 60000;<a name="line.317"></a>
<FONT color="green">318</FONT>            double s = ((remaining % 3600000) % 60000) / 1000.;<a name="line.318"></a>
<FONT color="green">319</FONT>            <a name="line.319"></a>
<FONT color="green">320</FONT>            StringBuffer t = new StringBuffer("Next update: ");<a name="line.320"></a>
<FONT color="green">321</FONT>            if (h &gt; 0) {<a name="line.321"></a>
<FONT color="green">322</FONT>                    t.append(h);<a name="line.322"></a>
<FONT color="green">323</FONT>                    t.append(h == 1 ? " hour " : " hours ");<a name="line.323"></a>
<FONT color="green">324</FONT>            }<a name="line.324"></a>
<FONT color="green">325</FONT>            <a name="line.325"></a>
<FONT color="green">326</FONT>            if (h &gt; 0 || m &gt; 0) {<a name="line.326"></a>
<FONT color="green">327</FONT>                    t.append(m);<a name="line.327"></a>
<FONT color="green">328</FONT>                    t.append(m == 1 ? " minute " : " minutes ");<a name="line.328"></a>
<FONT color="green">329</FONT>            }<a name="line.329"></a>
<FONT color="green">330</FONT>            <a name="line.330"></a>
<FONT color="green">331</FONT>            t.append(s);<a name="line.331"></a>
<FONT color="green">332</FONT>            t.append(" seconds.");<a name="line.332"></a>
<FONT color="green">333</FONT>            <a name="line.333"></a>
<FONT color="green">334</FONT>            nextUpdateLabel.setText(t.toString());<a name="line.334"></a>
<FONT color="green">335</FONT>    }<a name="line.335"></a>
<FONT color="green">336</FONT>    <a name="line.336"></a>
<FONT color="green">337</FONT>    /**<a name="line.337"></a>
<FONT color="green">338</FONT>     * Displays an apropriate label when the invoker has started an update from the data file.<a name="line.338"></a>
<FONT color="green">339</FONT>     */<a name="line.339"></a>
<FONT color="green">340</FONT>    public void updateStarted(UpdateInvoker source) {<a name="line.340"></a>
<FONT color="green">341</FONT>            nextUpdateLabel.setText("Update in progress."); <a name="line.341"></a>
<FONT color="green">342</FONT>    }<a name="line.342"></a>
<FONT color="green">343</FONT>    <a name="line.343"></a>
<FONT color="green">344</FONT>    /**<a name="line.344"></a>
<FONT color="green">345</FONT>     * Displays an apropriate label when the invoker has finished an update from the data file. <a name="line.345"></a>
<FONT color="green">346</FONT>     */<a name="line.346"></a>
<FONT color="green">347</FONT>    public void updateFinished(UpdateInvoker source, String errorMsg) {<a name="line.347"></a>
<FONT color="green">348</FONT>            <a name="line.348"></a>
<FONT color="green">349</FONT>            if (null == errorMsg) {<a name="line.349"></a>
<FONT color="green">350</FONT>                    nextUpdateLabel.setText("Update finished successfully.");<a name="line.350"></a>
<FONT color="green">351</FONT>                    return;<a name="line.351"></a>
<FONT color="green">352</FONT>            }<a name="line.352"></a>
<FONT color="green">353</FONT>            <a name="line.353"></a>
<FONT color="green">354</FONT>            String out = "Problem: " + errorMsg.trim();<a name="line.354"></a>
<FONT color="green">355</FONT>            if (!out.endsWith("."))<a name="line.355"></a>
<FONT color="green">356</FONT>                    out = out + ".";<a name="line.356"></a>
<FONT color="green">357</FONT>            <a name="line.357"></a>
<FONT color="green">358</FONT>            nextUpdateLabel.setText(out);<a name="line.358"></a>
<FONT color="green">359</FONT>    }<a name="line.359"></a>
<FONT color="green">360</FONT>    <a name="line.360"></a>
<FONT color="green">361</FONT>    /**<a name="line.361"></a>
<FONT color="green">362</FONT>     * Sets the file name label in the window. If the label is too long, the baginning it stripped off.<a name="line.362"></a>
<FONT color="green">363</FONT>     * @param fileName Data file name.<a name="line.363"></a>
<FONT color="green">364</FONT>     */<a name="line.364"></a>
<FONT color="green">365</FONT>    private void setFileNameLabel(String fileName) {<a name="line.365"></a>
<FONT color="green">366</FONT>            if (null == fileName || 0 == fileName.trim().length()) {<a name="line.366"></a>
<FONT color="green">367</FONT>                    fileNameLabel.setText("- no data file selected -");<a name="line.367"></a>
<FONT color="green">368</FONT>                    return;<a name="line.368"></a>
<FONT color="green">369</FONT>            }<a name="line.369"></a>
<FONT color="green">370</FONT>            fileName = fileName.trim();<a name="line.370"></a>
<FONT color="green">371</FONT>            FontMetrics fm = fileNameLabel.getFontMetrics(fileNameLabel.getFont());<a name="line.371"></a>
<FONT color="green">372</FONT>            if (fm.stringWidth(fileName) &gt; fileNameLabel.getWidth() - 10) {<a name="line.372"></a>
<FONT color="green">373</FONT>                    while (fm.stringWidth("..." + fileName) &gt; fileNameLabel.getWidth() - 10) {<a name="line.373"></a>
<FONT color="green">374</FONT>                            fileName = fileName.substring(1);       <a name="line.374"></a>
<FONT color="green">375</FONT>                    }<a name="line.375"></a>
<FONT color="green">376</FONT>                    fileName = "..." + fileName;<a name="line.376"></a>
<FONT color="green">377</FONT>            }                                       <a name="line.377"></a>
<FONT color="green">378</FONT>            fileNameLabel.setText(fileName);<a name="line.378"></a>
<FONT color="green">379</FONT>    }<a name="line.379"></a>
<FONT color="green">380</FONT>    <a name="line.380"></a>
<FONT color="green">381</FONT>    /**<a name="line.381"></a>
<FONT color="green">382</FONT>     * Updates the view when the settings were loaded from a file.<a name="line.382"></a>
<FONT color="green">383</FONT>     * @param settings The settings.<a name="line.383"></a>
<FONT color="green">384</FONT>     * @param info Event info.<a name="line.384"></a>
<FONT color="green">385</FONT>     */<a name="line.385"></a>
<FONT color="green">386</FONT>    public void settingHasChanged(ObservableSettings settings, Object info) {<a name="line.386"></a>
<FONT color="green">387</FONT>            <a name="line.387"></a>
<FONT color="green">388</FONT>            if (null == settings)<a name="line.388"></a>
<FONT color="green">389</FONT>                    return;<a name="line.389"></a>
<FONT color="green">390</FONT>            <a name="line.390"></a>
<FONT color="green">391</FONT>            if (settings instanceof DataFileSettings) {<a name="line.391"></a>
<FONT color="green">392</FONT>                    settingHasChanged((DataFileSettings) settings, info);<a name="line.392"></a>
<FONT color="green">393</FONT>                    return;<a name="line.393"></a>
<FONT color="green">394</FONT>            }<a name="line.394"></a>
<FONT color="green">395</FONT>    }<a name="line.395"></a>
<FONT color="green">396</FONT>    <a name="line.396"></a>
<FONT color="green">397</FONT>    /**<a name="line.397"></a>
<FONT color="green">398</FONT>     * Updates the view when the settings were loaded from a file.<a name="line.398"></a>
<FONT color="green">399</FONT>     * @param settings The settings.<a name="line.399"></a>
<FONT color="green">400</FONT>     * @param info Event info.<a name="line.400"></a>
<FONT color="green">401</FONT>     */<a name="line.401"></a>
<FONT color="green">402</FONT>    public void settingHasChanged(DataFileSettings settings, Object info) {<a name="line.402"></a>
<FONT color="green">403</FONT>            <a name="line.403"></a>
<FONT color="green">404</FONT>            if (null == info || !(info instanceof String))<a name="line.404"></a>
<FONT color="green">405</FONT>                    return;<a name="line.405"></a>
<FONT color="green">406</FONT>            <a name="line.406"></a>
<FONT color="green">407</FONT>            String event = (String) info;<a name="line.407"></a>
<FONT color="green">408</FONT>            <a name="line.408"></a>
<FONT color="green">409</FONT>            if (event.equals("DataFile") || event.equals("load")) {<a name="line.409"></a>
<FONT color="green">410</FONT>                    setFileNameLabel(settings.getDataFile());<a name="line.410"></a>
<FONT color="green">411</FONT>            }<a name="line.411"></a>
<FONT color="green">412</FONT>            <a name="line.412"></a>
<FONT color="green">413</FONT>            if (event.equals("ShowOnlyTailData") || event.equals("load")) {<a name="line.413"></a>
<FONT color="green">414</FONT>                    showAllDataButton.setSelected(!settings.getShowOnlyTailData());<a name="line.414"></a>
<FONT color="green">415</FONT>                    showTailDataButton.setSelected(settings.getShowOnlyTailData());<a name="line.415"></a>
<FONT color="green">416</FONT>            }<a name="line.416"></a>
<FONT color="green">417</FONT>            <a name="line.417"></a>
<FONT color="green">418</FONT>            if (event.equals("DoNotCacheData") || event.equals("load")) {<a name="line.418"></a>
<FONT color="green">419</FONT>                    dontCacheBox.setSelected(settings.getDoNotCacheData());<a name="line.419"></a>
<FONT color="green">420</FONT>            }<a name="line.420"></a>
<FONT color="green">421</FONT>            <a name="line.421"></a>
<FONT color="green">422</FONT>            if (event.equals("UpdateFrequency") || event.equals("load")) {          <a name="line.422"></a>
<FONT color="green">423</FONT>                    long f = settings.getUpdateFrequency();<a name="line.423"></a>
<FONT color="green">424</FONT>                    int p = (0 &gt;= f ? updateIntervalValues.length - 1 : Arrays.binarySearch(updateIntervalValues, f));<a name="line.424"></a>
<FONT color="green">425</FONT>                    String lab;<a name="line.425"></a>
<FONT color="green">426</FONT>                    if (0 &gt; p)<a name="line.426"></a>
<FONT color="green">427</FONT>                            lab = "every " + f + " milliseconds.";<a name="line.427"></a>
<FONT color="green">428</FONT>                    else<a name="line.428"></a>
<FONT color="green">429</FONT>                            lab = updateIntervalLabels[p];<a name="line.429"></a>
<FONT color="green">430</FONT>                    updateIntervallSlider.setValue(p);<a name="line.430"></a>
<FONT color="green">431</FONT>                    intervalLabel.setText(lab);             <a name="line.431"></a>
<FONT color="green">432</FONT>            }       <a name="line.432"></a>
<FONT color="green">433</FONT>    }<a name="line.433"></a>
<FONT color="green">434</FONT>    <a name="line.434"></a>
<FONT color="green">435</FONT>    /**<a name="line.435"></a>
<FONT color="green">436</FONT>     * Displayes data file info.<a name="line.436"></a>
<FONT color="green">437</FONT>     * @param text Info.<a name="line.437"></a>
<FONT color="green">438</FONT>     */<a name="line.438"></a>
<FONT color="green">439</FONT>    private void setDataFileInfoText(String text) {<a name="line.439"></a>
<FONT color="green">440</FONT>            fileInfoArea.setText(text + "\n ");<a name="line.440"></a>
<FONT color="green">441</FONT>            JScrollBar sb = ((JScrollPane) fileInfoArea.getParent().getParent()).getVerticalScrollBar();<a name="line.441"></a>
<FONT color="green">442</FONT>            if (null != sb)<a name="line.442"></a>
<FONT color="green">443</FONT>                    sb.setValue(sb.getMaximum());<a name="line.443"></a>
<FONT color="green">444</FONT>    }<a name="line.444"></a>
<FONT color="green">445</FONT>    <a name="line.445"></a>
<FONT color="green">446</FONT>    /**<a name="line.446"></a>
<FONT color="green">447</FONT>     * Updates data file info when the cache changes.<a name="line.447"></a>
<FONT color="green">448</FONT>     */<a name="line.448"></a>
<FONT color="green">449</FONT>    public void cacheEventFired(DataCache cache, CacheEvent event) {<a name="line.449"></a>
<FONT color="green">450</FONT>            <a name="line.450"></a>
<FONT color="green">451</FONT>            switch(event) {<a name="line.451"></a>
<FONT color="green">452</FONT>                    case UpdateLabels:                      <a name="line.452"></a>
<FONT color="green">453</FONT>                    case ChangeMode:<a name="line.453"></a>
<FONT color="green">454</FONT>                    case UpdateData:<a name="line.454"></a>
<FONT color="green">455</FONT>                            break;<a name="line.455"></a>
<FONT color="green">456</FONT>                    case UpdateDataFileInfo:<a name="line.456"></a>
<FONT color="green">457</FONT>                            setDataFileInfoText(cache.getDataFileInfo());<a name="line.457"></a>
<FONT color="green">458</FONT>                            break;<a name="line.458"></a>
<FONT color="green">459</FONT>                    default:<a name="line.459"></a>
<FONT color="green">460</FONT>                            throw new Error("This case is impossible!");<a name="line.460"></a>
<FONT color="green">461</FONT>                            <a name="line.461"></a>
<FONT color="green">462</FONT>            }<a name="line.462"></a>
<FONT color="green">463</FONT>    }<a name="line.463"></a>
<FONT color="green">464</FONT>    <a name="line.464"></a>
<FONT color="green">465</FONT>    }  <a name="line.465"></a>




























































</PRE>
</BODY>
</HTML>
