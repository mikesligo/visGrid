<HTML>
<BODY BGCOLOR="white">
<PRE>
<FONT color="green">001</FONT>    package org.LiveGraph.dataCache;<a name="line.1"></a>
<FONT color="green">002</FONT>    <a name="line.2"></a>
<FONT color="green">003</FONT>    import java.io.PrintWriter;<a name="line.3"></a>
<FONT color="green">004</FONT>    import java.io.StringWriter;<a name="line.4"></a>
<FONT color="green">005</FONT>    import java.util.ArrayList;<a name="line.5"></a>
<FONT color="green">006</FONT>    import java.util.Arrays;<a name="line.6"></a>
<FONT color="green">007</FONT>    import java.util.Collections;<a name="line.7"></a>
<FONT color="green">008</FONT>    import java.util.EnumSet;<a name="line.8"></a>
<FONT color="green">009</FONT>    import java.util.Iterator;<a name="line.9"></a>
<FONT color="green">010</FONT>    import java.util.List;<a name="line.10"></a>
<FONT color="green">011</FONT>    import java.util.Set;<a name="line.11"></a>
<FONT color="green">012</FONT>    <a name="line.12"></a>
<FONT color="green">013</FONT>    import org.LiveGraph.dataCache.CacheObserver.CacheEvent;<a name="line.13"></a>
<FONT color="green">014</FONT>    <a name="line.14"></a>
<FONT color="green">015</FONT>    import com.softnetConsult.utils.collections.ReadOnlyIterator;<a name="line.15"></a>
<FONT color="green">016</FONT>    <a name="line.16"></a>
<FONT color="green">017</FONT>    <a name="line.17"></a>
<FONT color="green">018</FONT>    /**<a name="line.18"></a>
<FONT color="green">019</FONT>     * An instance of this class caches datasets previously read from a data file in memory.<a name="line.19"></a>
<FONT color="green">020</FONT>     * The cache applies a smart procedure to cache just enough data in order to plot a graph<a name="line.20"></a>
<FONT color="green">021</FONT>     * on the screen. Two cache modes are currently possible: {@code CacheTailData} and<a name="line.21"></a>
<FONT color="green">022</FONT>     * {@code CacheAllData}. In the first case the data sets added most recently are<a name="line.22"></a>
<FONT color="green">023</FONT>     * cached (and ultimately displayed bythe plotter). In the latter case all datasets are<a name="line.23"></a>
<FONT color="green">024</FONT>     * cached. If the number of datasets grows too large, the datasets located at odd indices in<a name="line.24"></a>
<FONT color="green">025</FONT>     * the original data file will be deleted from the cache.<a name="line.25"></a>
<FONT color="green">026</FONT>     * After this only datasets located at even indices in the original file will be cached.<a name="line.26"></a>
<FONT color="green">027</FONT>     * If the cache grows too large again, this procedure is re-applied such that only datasets<a name="line.27"></a>
<FONT color="green">028</FONT>     * at indices divisible by 4 in the original file are cached. As more datasets are added to the<a name="line.28"></a>
<FONT color="green">029</FONT>     * cache, this procedure can be re-applied again making sure that at any time the original data<a name="line.29"></a>
<FONT color="green">030</FONT>     * file is sampled at equal intervals.&lt;br /&gt;<a name="line.30"></a>
<FONT color="green">031</FONT>     * The maximum cache size is {@code CACHE_SIZE}.  <a name="line.31"></a>
<FONT color="green">032</FONT>     * <a name="line.32"></a>
<FONT color="green">033</FONT>     * &lt;p&gt;<a name="line.33"></a>
<FONT color="green">034</FONT>     *   &lt;strong&gt;LiveGraph&lt;/strong&gt;<a name="line.34"></a>
<FONT color="green">035</FONT>     *   (&lt;a href="http://www.live-graph.org" target="_blank"&gt;http://www.live-graph.org&lt;/a&gt;).<a name="line.35"></a>
<FONT color="green">036</FONT>     * &lt;/p&gt; <a name="line.36"></a>
<FONT color="green">037</FONT>     * &lt;p&gt;Copyright (c) 2007 by G. Paperin.&lt;/p&gt;<a name="line.37"></a>
<FONT color="green">038</FONT>     * &lt;p&gt;File: DataCache.java&lt;/p&gt;<a name="line.38"></a>
<FONT color="green">039</FONT>     * &lt;p style="font-size:smaller;"&gt;Redistribution and use in source and binary forms, with or<a name="line.39"></a>
<FONT color="green">040</FONT>     *    without modification, are permitted provided that the following terms and conditions are met:<a name="line.40"></a>
<FONT color="green">041</FONT>     * &lt;/p&gt;<a name="line.41"></a>
<FONT color="green">042</FONT>     * &lt;p style="font-size:smaller;"&gt;1. Redistributions of source code must retain the above<a name="line.42"></a>
<FONT color="green">043</FONT>     *    acknowledgement of the LiveGraph project and its web-site, the above copyright notice,<a name="line.43"></a>
<FONT color="green">044</FONT>     *    this list of conditions and the following disclaimer.&lt;br /&gt;<a name="line.44"></a>
<FONT color="green">045</FONT>     *    2. Redistributions in binary form must reproduce the above acknowledgement of the<a name="line.45"></a>
<FONT color="green">046</FONT>     *    LiveGraph project and its web-site, the above copyright notice, this list of conditions<a name="line.46"></a>
<FONT color="green">047</FONT>     *    and the following disclaimer in the documentation and/or other materials provided with<a name="line.47"></a>
<FONT color="green">048</FONT>     *    the distribution.&lt;br /&gt;<a name="line.48"></a>
<FONT color="green">049</FONT>     *    3. All advertising materials mentioning features or use of this software or any derived<a name="line.49"></a>
<FONT color="green">050</FONT>     *    software must display the following acknowledgement:&lt;br /&gt;<a name="line.50"></a>
<FONT color="green">051</FONT>     *    &lt;em&gt;This product includes software developed by the LiveGraph project and its<a name="line.51"></a>
<FONT color="green">052</FONT>     *    contributors.&lt;br /&gt;(http://www.live-graph.org)&lt;/em&gt;&lt;br /&gt;<a name="line.52"></a>
<FONT color="green">053</FONT>     *    4. All advertising materials distributed in form of HTML pages or any other technology<a name="line.53"></a>
<FONT color="green">054</FONT>     *    permitting active hyper-links that mention features or use of this software or any<a name="line.54"></a>
<FONT color="green">055</FONT>     *    derived software must display the acknowledgment specified in condition 3 of this<a name="line.55"></a>
<FONT color="green">056</FONT>     *    agreement, and in addition, include a visible and working hyper-link to the LiveGraph<a name="line.56"></a>
<FONT color="green">057</FONT>     *    homepage (http://www.live-graph.org).<a name="line.57"></a>
<FONT color="green">058</FONT>     * &lt;/p&gt;<a name="line.58"></a>
<FONT color="green">059</FONT>     * &lt;p style="font-size:smaller;"&gt;THIS SOFTWARE IS PROVIDED &amp;quot;AS IS&amp;quot;, WITHOUT WARRANTY<a name="line.59"></a>
<FONT color="green">060</FONT>     *    OF ANY KIND, EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF<a name="line.60"></a>
<FONT color="green">061</FONT>     *    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  NONINFRINGEMENT. IN NO EVENT SHALL<a name="line.61"></a>
<FONT color="green">062</FONT>     *    THE AUTHORS, CONTRIBUTORS OR COPYRIGHT  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER<a name="line.62"></a>
<FONT color="green">063</FONT>     *    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING  FROM, OUT OF OR<a name="line.63"></a>
<FONT color="green">064</FONT>     *    IN CONNECTION WITH THE SOFTWARE OR THE USE OR  OTHER DEALINGS IN THE SOFTWARE.<a name="line.64"></a>
<FONT color="green">065</FONT>     * &lt;/p&gt;<a name="line.65"></a>
<FONT color="green">066</FONT>     * <a name="line.66"></a>
<FONT color="green">067</FONT>     * @author Greg Paperin (&lt;a href="http://www.paperin.org" target="_blank"&gt;http://www.paperin.org&lt;/a&gt;)<a name="line.67"></a>
<FONT color="green">068</FONT>     * @version {@value org.LiveGraph.LiveGraph#version}<a name="line.68"></a>
<FONT color="green">069</FONT>     */<a name="line.69"></a>
<FONT color="green">070</FONT>    public class DataCache {<a name="line.70"></a>
<FONT color="green">071</FONT>    <a name="line.71"></a>
<FONT color="green">072</FONT>    /**<a name="line.72"></a>
<FONT color="green">073</FONT>     * Maximum number if datasets to be held in memory.<a name="line.73"></a>
<FONT color="green">074</FONT>     */<a name="line.74"></a>
<FONT color="green">075</FONT>    public static final int CACHE_SIZE = 500;<a name="line.75"></a>
<FONT color="green">076</FONT>    <a name="line.76"></a>
<FONT color="green">077</FONT>    /**<a name="line.77"></a>
<FONT color="green">078</FONT>     * Number of datasets to always keep in memory when operating in {@code CacheTailData}-mode.<a name="line.78"></a>
<FONT color="green">079</FONT>     */<a name="line.79"></a>
<FONT color="green">080</FONT>    public static final int TAIL_BALANCE_SIZE = (int) (0.75 * (double) CACHE_SIZE);<a name="line.80"></a>
<FONT color="green">081</FONT>    <a name="line.81"></a>
<FONT color="green">082</FONT>    /**<a name="line.82"></a>
<FONT color="green">083</FONT>     * Defines possible cache modes.<a name="line.83"></a>
<FONT color="green">084</FONT>     * {@code CacheAllData} specifies that all datasets ever added to this cache must be sampled<a name="line.84"></a>
<FONT color="green">085</FONT>     * at equal intervals. {@code CacheTailData} specifies that only the most recently datasets<a name="line.85"></a>
<FONT color="green">086</FONT>     * are to be kept in memory.<a name="line.86"></a>
<FONT color="green">087</FONT>     */<a name="line.87"></a>
<FONT color="green">088</FONT>    public static enum CacheMode { CacheAllData, CacheTailData };<a name="line.88"></a>
<FONT color="green">089</FONT>    <a name="line.89"></a>
<FONT color="green">090</FONT>    private List&lt;CacheObserver&gt; observers = null; <a name="line.90"></a>
<FONT color="green">091</FONT>    <a name="line.91"></a>
<FONT color="green">092</FONT>    /**<a name="line.92"></a>
<FONT color="green">093</FONT>     * Stores the desctibtion of the data series in this cache. A data series corresponds to a column<a name="line.93"></a>
<FONT color="green">094</FONT>     * in a data file.<a name="line.94"></a>
<FONT color="green">095</FONT>     */<a name="line.95"></a>
<FONT color="green">096</FONT>    private List&lt;DataSeries&gt; dataSeries = null;<a name="line.96"></a>
<FONT color="green">097</FONT>    <a name="line.97"></a>
<FONT color="green">098</FONT>    /**<a name="line.98"></a>
<FONT color="green">099</FONT>     * Stores the data in this cache.<a name="line.99"></a>
<FONT color="green">100</FONT>     */<a name="line.100"></a>
<FONT color="green">101</FONT>    private List&lt;DataSet&gt; dataSets = null;<a name="line.101"></a>
<FONT color="green">102</FONT>    <a name="line.102"></a>
<FONT color="green">103</FONT>    /**<a name="line.103"></a>
<FONT color="green">104</FONT>     * Current operating mode.<a name="line.104"></a>
<FONT color="green">105</FONT>     */<a name="line.105"></a>
<FONT color="green">106</FONT>    private CacheMode currentMode = null;<a name="line.106"></a>
<FONT color="green">107</FONT>    <a name="line.107"></a>
<FONT color="green">108</FONT>    /**<a name="line.108"></a>
<FONT color="green">109</FONT>     * When working in {@code CacheAllData}-mode this value determines which datasets are kept in memory.<a name="line.109"></a>
<FONT color="green">110</FONT>     * At any time, exactly the datasets for which {@link DataSet#getDataFileIndex()} returns a value that<a name="line.110"></a>
<FONT color="green">111</FONT>     * can be divided by {@code dispersalFactor} without remainder will be kept in the cache. <a name="line.111"></a>
<FONT color="green">112</FONT>     */<a name="line.112"></a>
<FONT color="green">113</FONT>    private int dispersalFactor = 1;<a name="line.113"></a>
<FONT color="green">114</FONT>    <a name="line.114"></a>
<FONT color="green">115</FONT>    /**<a name="line.115"></a>
<FONT color="green">116</FONT>     * Caches the data file info lines.<a name="line.116"></a>
<FONT color="green">117</FONT>     */<a name="line.117"></a>
<FONT color="green">118</FONT>    private List&lt;String&gt; dataFileInfo = null;<a name="line.118"></a>
<FONT color="green">119</FONT>    <a name="line.119"></a>
<FONT color="green">120</FONT>    /**<a name="line.120"></a>
<FONT color="green">121</FONT>     * Caches the smallest data value currently in the cache.<a name="line.121"></a>
<FONT color="green">122</FONT>     */<a name="line.122"></a>
<FONT color="green">123</FONT>    private double minValueCached = Double.NaN;<a name="line.123"></a>
<FONT color="green">124</FONT>    <a name="line.124"></a>
<FONT color="green">125</FONT>    /**<a name="line.125"></a>
<FONT color="green">126</FONT>     * Caches the largest data value currently in the cache.<a name="line.126"></a>
<FONT color="green">127</FONT>     */<a name="line.127"></a>
<FONT color="green">128</FONT>    private double maxValueCached = Double.NaN;<a name="line.128"></a>
<FONT color="green">129</FONT>    <a name="line.129"></a>
<FONT color="green">130</FONT>    /**<a name="line.130"></a>
<FONT color="green">131</FONT>     * Stores occured cache events when operating in the delayed mode.<a name="line.131"></a>
<FONT color="green">132</FONT>     */<a name="line.132"></a>
<FONT color="green">133</FONT>    private Set&lt;CacheEvent&gt; delayedEvents = null;<a name="line.133"></a>
<FONT color="green">134</FONT>    <a name="line.134"></a>
<FONT color="green">135</FONT>    /**<a name="line.135"></a>
<FONT color="green">136</FONT>     * Whether the cache events are being delayed. <a name="line.136"></a>
<FONT color="green">137</FONT>     */<a name="line.137"></a>
<FONT color="green">138</FONT>    private boolean delayEvents = false;<a name="line.138"></a>
<FONT color="green">139</FONT>    <a name="line.139"></a>
<FONT color="green">140</FONT>    <a name="line.140"></a>
<FONT color="green">141</FONT>    /**<a name="line.141"></a>
<FONT color="green">142</FONT>     * Creates a new data cache in the {@code CacheAllData}-mode.<a name="line.142"></a>
<FONT color="green">143</FONT>     *<a name="line.143"></a>
<FONT color="green">144</FONT>     */<a name="line.144"></a>
<FONT color="green">145</FONT>    public DataCache() {<a name="line.145"></a>
<FONT color="green">146</FONT>            this.observers = new ArrayList&lt;CacheObserver&gt;();<a name="line.146"></a>
<FONT color="green">147</FONT>            this.delayedEvents = EnumSet.noneOf(CacheEvent.class);<a name="line.147"></a>
<FONT color="green">148</FONT>            this.delayEvents = false;<a name="line.148"></a>
<FONT color="green">149</FONT>            this.resetCache(CacheMode.CacheAllData);<a name="line.149"></a>
<FONT color="green">150</FONT>    }<a name="line.150"></a>
<FONT color="green">151</FONT>    <a name="line.151"></a>
<FONT color="green">152</FONT>    /**<a name="line.152"></a>
<FONT color="green">153</FONT>     * Creates a new cache in the specified mode.<a name="line.153"></a>
<FONT color="green">154</FONT>     * <a name="line.154"></a>
<FONT color="green">155</FONT>     * @param mode Mode of the new cache.<a name="line.155"></a>
<FONT color="green">156</FONT>     */<a name="line.156"></a>
<FONT color="green">157</FONT>    public DataCache(CacheMode mode) {<a name="line.157"></a>
<FONT color="green">158</FONT>            this(); <a name="line.158"></a>
<FONT color="green">159</FONT>            this.resetCache(mode);<a name="line.159"></a>
<FONT color="green">160</FONT>    }<a name="line.160"></a>
<FONT color="green">161</FONT>    <a name="line.161"></a>
<FONT color="green">162</FONT>    /**<a name="line.162"></a>
<FONT color="green">163</FONT>     * Creates a new cache in a specified mode and initilises it for the specified data series.<a name="line.163"></a>
<FONT color="green">164</FONT>     * <a name="line.164"></a>
<FONT color="green">165</FONT>     * @param mode Mode to use.<a name="line.165"></a>
<FONT color="green">166</FONT>     * @param seriesLabels Names of the data series.<a name="line.166"></a>
<FONT color="green">167</FONT>     */<a name="line.167"></a>
<FONT color="green">168</FONT>    public DataCache(CacheMode mode, List&lt;String&gt; seriesLabels) {<a name="line.168"></a>
<FONT color="green">169</FONT>            this(); <a name="line.169"></a>
<FONT color="green">170</FONT>            resetCache(mode, seriesLabels);<a name="line.170"></a>
<FONT color="green">171</FONT>    }<a name="line.171"></a>
<FONT color="green">172</FONT>    <a name="line.172"></a>
<FONT color="green">173</FONT>    /**<a name="line.173"></a>
<FONT color="green">174</FONT>     * Creates a new cache in a specified mode and initilises it for the specified data series.<a name="line.174"></a>
<FONT color="green">175</FONT>     * <a name="line.175"></a>
<FONT color="green">176</FONT>     * @param mode Mode to use.<a name="line.176"></a>
<FONT color="green">177</FONT>     * @param seriesLabels Names of the data series.<a name="line.177"></a>
<FONT color="green">178</FONT>     */<a name="line.178"></a>
<FONT color="green">179</FONT>    public DataCache(CacheMode mode, String [] seriesLabels) {<a name="line.179"></a>
<FONT color="green">180</FONT>            this(mode, Arrays.asList(seriesLabels));<a name="line.180"></a>
<FONT color="green">181</FONT>    }<a name="line.181"></a>
<FONT color="green">182</FONT>    <a name="line.182"></a>
<FONT color="green">183</FONT>    /**<a name="line.183"></a>
<FONT color="green">184</FONT>     * Removes all data from this cache and resets is to the empty state.<a name="line.184"></a>
<FONT color="green">185</FONT>     */<a name="line.185"></a>
<FONT color="green">186</FONT>    public void resetCache() {<a name="line.186"></a>
<FONT color="green">187</FONT>            resetLabels();<a name="line.187"></a>
<FONT color="green">188</FONT>            resetData();<a name="line.188"></a>
<FONT color="green">189</FONT>            resetDataFileInfo();<a name="line.189"></a>
<FONT color="green">190</FONT>    }<a name="line.190"></a>
<FONT color="green">191</FONT>    <a name="line.191"></a>
<FONT color="green">192</FONT>    /**<a name="line.192"></a>
<FONT color="green">193</FONT>     * Removes all data from this cache and resets is to the empty state.<a name="line.193"></a>
<FONT color="green">194</FONT>     * <a name="line.194"></a>
<FONT color="green">195</FONT>     * @param mode The mode the cache will have after the reset.<a name="line.195"></a>
<FONT color="green">196</FONT>     */<a name="line.196"></a>
<FONT color="green">197</FONT>    public void resetCache(CacheMode mode) {<a name="line.197"></a>
<FONT color="green">198</FONT>            resetLabels();<a name="line.198"></a>
<FONT color="green">199</FONT>            resetData(mode);<a name="line.199"></a>
<FONT color="green">200</FONT>            resetDataFileInfo();<a name="line.200"></a>
<FONT color="green">201</FONT>    }<a name="line.201"></a>
<FONT color="green">202</FONT>    <a name="line.202"></a>
<FONT color="green">203</FONT>    /**<a name="line.203"></a>
<FONT color="green">204</FONT>     * Removes all data from this cache and resets is to the empty state.<a name="line.204"></a>
<FONT color="green">205</FONT>     * New data series are set up according to the specified labels.<a name="line.205"></a>
<FONT color="green">206</FONT>     * <a name="line.206"></a>
<FONT color="green">207</FONT>     * @param mode The mode the cache will have after the reset.<a name="line.207"></a>
<FONT color="green">208</FONT>     * @param seriesLabels The data series labels for the reset cache<a name="line.208"></a>
<FONT color="green">209</FONT>     */<a name="line.209"></a>
<FONT color="green">210</FONT>    public void resetCache(CacheMode mode, List&lt;String&gt; seriesLabels) {<a name="line.210"></a>
<FONT color="green">211</FONT>            resetLabels(seriesLabels);<a name="line.211"></a>
<FONT color="green">212</FONT>            resetData(mode);<a name="line.212"></a>
<FONT color="green">213</FONT>            resetDataFileInfo();<a name="line.213"></a>
<FONT color="green">214</FONT>    }<a name="line.214"></a>
<FONT color="green">215</FONT>    <a name="line.215"></a>
<FONT color="green">216</FONT>    /**<a name="line.216"></a>
<FONT color="green">217</FONT>     * Removes all data series informatioon from the cache without deleting the actual data.<a name="line.217"></a>
<FONT color="green">218</FONT>     */<a name="line.218"></a>
<FONT color="green">219</FONT>    public void resetLabels() {     <a name="line.219"></a>
<FONT color="green">220</FONT>            List&lt;String&gt; l = Collections.emptyList();<a name="line.220"></a>
<FONT color="green">221</FONT>            resetLabels(l);<a name="line.221"></a>
<FONT color="green">222</FONT>    }<a name="line.222"></a>
<FONT color="green">223</FONT>    <a name="line.223"></a>
<FONT color="green">224</FONT>    /**<a name="line.224"></a>
<FONT color="green">225</FONT>     * Removes all data series informatioon from the cache and replaces is with new empty series.<a name="line.225"></a>
<FONT color="green">226</FONT>     * Actual data is not affected.<a name="line.226"></a>
<FONT color="green">227</FONT>     * <a name="line.227"></a>
<FONT color="green">228</FONT>     * @param seriesLabels Labels for the new data series.<a name="line.228"></a>
<FONT color="green">229</FONT>     */<a name="line.229"></a>
<FONT color="green">230</FONT>    public void resetLabels(List&lt;String&gt; seriesLabels) {<a name="line.230"></a>
<FONT color="green">231</FONT>            <a name="line.231"></a>
<FONT color="green">232</FONT>            if (null == seriesLabels)<a name="line.232"></a>
<FONT color="green">233</FONT>                    throw new NullPointerException("Series labels array cannot be null"); <a name="line.233"></a>
<FONT color="green">234</FONT>            <a name="line.234"></a>
<FONT color="green">235</FONT>            dataSeries = new ArrayList&lt;DataSeries&gt;(seriesLabels.size());<a name="line.235"></a>
<FONT color="green">236</FONT>            int index = 0;<a name="line.236"></a>
<FONT color="green">237</FONT>            for (String label : seriesLabels) {<a name="line.237"></a>
<FONT color="green">238</FONT>                    dataSeries.add(new DataSeries(label, this, index));<a name="line.238"></a>
<FONT color="green">239</FONT>                    index++;<a name="line.239"></a>
<FONT color="green">240</FONT>            }<a name="line.240"></a>
<FONT color="green">241</FONT>            <a name="line.241"></a>
<FONT color="green">242</FONT>            fireEvent(CacheEvent.UpdateLabels);<a name="line.242"></a>
<FONT color="green">243</FONT>    }<a name="line.243"></a>
<FONT color="green">244</FONT>    <a name="line.244"></a>
<FONT color="green">245</FONT>    /**<a name="line.245"></a>
<FONT color="green">246</FONT>     * Resets the cache while keeping the same operating mode.<a name="line.246"></a>
<FONT color="green">247</FONT>     * All data is deleted.<a name="line.247"></a>
<FONT color="green">248</FONT>     */<a name="line.248"></a>
<FONT color="green">249</FONT>    public void resetData() {<a name="line.249"></a>
<FONT color="green">250</FONT>            resetData(currentMode);<a name="line.250"></a>
<FONT color="green">251</FONT>    }<a name="line.251"></a>
<FONT color="green">252</FONT>    <a name="line.252"></a>
<FONT color="green">253</FONT>    /**<a name="line.253"></a>
<FONT color="green">254</FONT>     * Resets the cache to the specified mode. All data is deleted.<a name="line.254"></a>
<FONT color="green">255</FONT>     * <a name="line.255"></a>
<FONT color="green">256</FONT>     * @param mode New operating mode.<a name="line.256"></a>
<FONT color="green">257</FONT>     */<a name="line.257"></a>
<FONT color="green">258</FONT>    public void resetData(CacheMode mode) {<a name="line.258"></a>
<FONT color="green">259</FONT>            <a name="line.259"></a>
<FONT color="green">260</FONT>            if (null == mode)<a name="line.260"></a>
<FONT color="green">261</FONT>                    throw new NullPointerException("Cache mode cannot be null");<a name="line.261"></a>
<FONT color="green">262</FONT>            <a name="line.262"></a>
<FONT color="green">263</FONT>            if (null != dataSets) {<a name="line.263"></a>
<FONT color="green">264</FONT>                    dataSets.clear();<a name="line.264"></a>
<FONT color="green">265</FONT>                    dataSets = null;<a name="line.265"></a>
<FONT color="green">266</FONT>            }<a name="line.266"></a>
<FONT color="green">267</FONT>            <a name="line.267"></a>
<FONT color="green">268</FONT>            currentMode = mode;<a name="line.268"></a>
<FONT color="green">269</FONT>            <a name="line.269"></a>
<FONT color="green">270</FONT>            resetExtremeValues();<a name="line.270"></a>
<FONT color="green">271</FONT>            <a name="line.271"></a>
<FONT color="green">272</FONT>            switch (currentMode) {<a name="line.272"></a>
<FONT color="green">273</FONT>                    case CacheAllData:      dataSets = new RemoveRangeArrayList&lt;DataSet&gt;(CACHE_SIZE);<a name="line.273"></a>
<FONT color="green">274</FONT>                                                            dispersalFactor = 1;<a name="line.274"></a>
<FONT color="green">275</FONT>                                                            break;<a name="line.275"></a>
<FONT color="green">276</FONT>                                                            <a name="line.276"></a>
<FONT color="green">277</FONT>                    case CacheTailData:     dataSets = new RemoveRangeArrayList&lt;DataSet&gt;(CACHE_SIZE);<a name="line.277"></a>
<FONT color="green">278</FONT>                                                            dispersalFactor = 1;<a name="line.278"></a>
<FONT color="green">279</FONT>                                                            break;<a name="line.279"></a>
<FONT color="green">280</FONT>            }<a name="line.280"></a>
<FONT color="green">281</FONT>            <a name="line.281"></a>
<FONT color="green">282</FONT>            fireEvent(CacheEvent.ChangeMode);<a name="line.282"></a>
<FONT color="green">283</FONT>            fireEvent(CacheEvent.UpdateData);<a name="line.283"></a>
<FONT color="green">284</FONT>    }<a name="line.284"></a>
<FONT color="green">285</FONT>    <a name="line.285"></a>
<FONT color="green">286</FONT>    /**<a name="line.286"></a>
<FONT color="green">287</FONT>     * Delets the information of min and max values held by this cache and any of its data series.<a name="line.287"></a>
<FONT color="green">288</FONT>     *<a name="line.288"></a>
<FONT color="green">289</FONT>     */<a name="line.289"></a>
<FONT color="green">290</FONT>    private void resetExtremeValues() {<a name="line.290"></a>
<FONT color="green">291</FONT>            minValueCached = Double.NaN;<a name="line.291"></a>
<FONT color="green">292</FONT>            maxValueCached = Double.NaN;<a name="line.292"></a>
<FONT color="green">293</FONT>            for (DataSeries s : dataSeries)<a name="line.293"></a>
<FONT color="green">294</FONT>                    s.resetExtremeValues();<a name="line.294"></a>
<FONT color="green">295</FONT>    }<a name="line.295"></a>
<FONT color="green">296</FONT>    <a name="line.296"></a>
<FONT color="green">297</FONT>    /**<a name="line.297"></a>
<FONT color="green">298</FONT>     * Delets all data file info strings held by this cache.<a name="line.298"></a>
<FONT color="green">299</FONT>     *<a name="line.299"></a>
<FONT color="green">300</FONT>     */<a name="line.300"></a>
<FONT color="green">301</FONT>    public void resetDataFileInfo() {<a name="line.301"></a>
<FONT color="green">302</FONT>            this.dataFileInfo = new ArrayList&lt;String&gt;();<a name="line.302"></a>
<FONT color="green">303</FONT>            fireEvent(CacheEvent.UpdateDataFileInfo);<a name="line.303"></a>
<FONT color="green">304</FONT>    }<a name="line.304"></a>
<FONT color="green">305</FONT>    <a name="line.305"></a>
<FONT color="green">306</FONT>    /**<a name="line.306"></a>
<FONT color="green">307</FONT>     * @return Current operating mode.<a name="line.307"></a>
<FONT color="green">308</FONT>     */<a name="line.308"></a>
<FONT color="green">309</FONT>    public CacheMode getCacheMode() {<a name="line.309"></a>
<FONT color="green">310</FONT>            return currentMode;<a name="line.310"></a>
<FONT color="green">311</FONT>    }<a name="line.311"></a>
<FONT color="green">312</FONT>    <a name="line.312"></a>
<FONT color="green">313</FONT>    /**<a name="line.313"></a>
<FONT color="green">314</FONT>     * @return Number of data series in the cache (i.e. data columns in the data file).<a name="line.314"></a>
<FONT color="green">315</FONT>     */<a name="line.315"></a>
<FONT color="green">316</FONT>    public int countDataSeries() {<a name="line.316"></a>
<FONT color="green">317</FONT>            return dataSeries.size();<a name="line.317"></a>
<FONT color="green">318</FONT>    }<a name="line.318"></a>
<FONT color="green">319</FONT>    <a name="line.319"></a>
<FONT color="green">320</FONT>    /**<a name="line.320"></a>
<FONT color="green">321</FONT>     * @return a Read-olny iterator over this cache's data series.<a name="line.321"></a>
<FONT color="green">322</FONT>     */<a name="line.322"></a>
<FONT color="green">323</FONT>    public ReadOnlyIterator&lt;DataSeries&gt; iterateDataSeries() {<a name="line.323"></a>
<FONT color="green">324</FONT>            return new ReadOnlyIterator&lt;DataSeries&gt;(dataSeries.iterator());<a name="line.324"></a>
<FONT color="green">325</FONT>    }<a name="line.325"></a>
<FONT color="green">326</FONT>    <a name="line.326"></a>
<FONT color="green">327</FONT>    /**<a name="line.327"></a>
<FONT color="green">328</FONT>     * @param index Data series number (0-based).<a name="line.328"></a>
<FONT color="green">329</FONT>     * @return The data series at the specified index.<a name="line.329"></a>
<FONT color="green">330</FONT>     */<a name="line.330"></a>
<FONT color="green">331</FONT>    public DataSeries getDataSeries(int index) {<a name="line.331"></a>
<FONT color="green">332</FONT>            return dataSeries.get(index);<a name="line.332"></a>
<FONT color="green">333</FONT>    }<a name="line.333"></a>
<FONT color="green">334</FONT>    <a name="line.334"></a>
<FONT color="green">335</FONT>    /**<a name="line.335"></a>
<FONT color="green">336</FONT>     * @return An read-only iterator over the labels of the data series in this cache.<a name="line.336"></a>
<FONT color="green">337</FONT>     */<a name="line.337"></a>
<FONT color="green">338</FONT>    public ReadOnlyIterator&lt;String&gt; iterateDataSeriesLabels() {<a name="line.338"></a>
<FONT color="green">339</FONT>            return new DataSeriesLabelIterator(dataSeries.iterator());<a name="line.339"></a>
<FONT color="green">340</FONT>    }<a name="line.340"></a>
<FONT color="green">341</FONT>    <a name="line.341"></a>
<FONT color="green">342</FONT>    /** <a name="line.342"></a>
<FONT color="green">343</FONT>     * @param label A data series label.<a name="line.343"></a>
<FONT color="green">344</FONT>     * @return The index of the series with the specified label or -1 if not found.<a name="line.344"></a>
<FONT color="green">345</FONT>     */<a name="line.345"></a>
<FONT color="green">346</FONT>    public int findDataSeriesIndex(String label) {<a name="line.346"></a>
<FONT color="green">347</FONT>            int index = 0;<a name="line.347"></a>
<FONT color="green">348</FONT>            ReadOnlyIterator&lt;String&gt; it = iterateDataSeriesLabels();<a name="line.348"></a>
<FONT color="green">349</FONT>            while (it.hasNext()) {                          <a name="line.349"></a>
<FONT color="green">350</FONT>                    if (it.next().equals(label))<a name="line.350"></a>
<FONT color="green">351</FONT>                            return index;<a name="line.351"></a>
<FONT color="green">352</FONT>                    index++;<a name="line.352"></a>
<FONT color="green">353</FONT>            }<a name="line.353"></a>
<FONT color="green">354</FONT>            return -1;<a name="line.354"></a>
<FONT color="green">355</FONT>    }<a name="line.355"></a>
<FONT color="green">356</FONT>    <a name="line.356"></a>
<FONT color="green">357</FONT>    /** <a name="line.357"></a>
<FONT color="green">358</FONT>     * @param label A data series label.<a name="line.358"></a>
<FONT color="green">359</FONT>     * @param ignoreCase Whether case shuld be ignore in string comparison. <a name="line.359"></a>
<FONT color="green">360</FONT>     * @return The index of the series with the specified label or -1 if not found.<a name="line.360"></a>
<FONT color="green">361</FONT>     */<a name="line.361"></a>
<FONT color="green">362</FONT>    public int findDataSeriesIndex(String label, boolean ignoreCase) {<a name="line.362"></a>
<FONT color="green">363</FONT>            int index = 0;<a name="line.363"></a>
<FONT color="green">364</FONT>            ReadOnlyIterator&lt;String&gt; it = iterateDataSeriesLabels();<a name="line.364"></a>
<FONT color="green">365</FONT>            while (it.hasNext()) {          <a name="line.365"></a>
<FONT color="green">366</FONT>                    if (ignoreCase &amp;&amp; it.next().equalsIgnoreCase(label))<a name="line.366"></a>
<FONT color="green">367</FONT>                            return index;<a name="line.367"></a>
<FONT color="green">368</FONT>                    if (!ignoreCase &amp;&amp; it.next().equals(label))<a name="line.368"></a>
<FONT color="green">369</FONT>                            return index;<a name="line.369"></a>
<FONT color="green">370</FONT>                    index++;<a name="line.370"></a>
<FONT color="green">371</FONT>            }<a name="line.371"></a>
<FONT color="green">372</FONT>            return -1;<a name="line.372"></a>
<FONT color="green">373</FONT>    }<a name="line.373"></a>
<FONT color="green">374</FONT>    <a name="line.374"></a>
<FONT color="green">375</FONT>    /**<a name="line.375"></a>
<FONT color="green">376</FONT>     * @return Number of datasets currently in cache.<a name="line.376"></a>
<FONT color="green">377</FONT>     */<a name="line.377"></a>
<FONT color="green">378</FONT>    public int countDataSets() {<a name="line.378"></a>
<FONT color="green">379</FONT>            return dataSets.size();<a name="line.379"></a>
<FONT color="green">380</FONT>    }<a name="line.380"></a>
<FONT color="green">381</FONT>    <a name="line.381"></a>
<FONT color="green">382</FONT>    /**<a name="line.382"></a>
<FONT color="green">383</FONT>     * @return Read-only iterator over the datasets in this cache.<a name="line.383"></a>
<FONT color="green">384</FONT>     */<a name="line.384"></a>
<FONT color="green">385</FONT>    public ReadOnlyIterator&lt;DataSet&gt; iterateDataSets() {<a name="line.385"></a>
<FONT color="green">386</FONT>            return new ReadOnlyIterator&lt;DataSet&gt;(dataSets.iterator());<a name="line.386"></a>
<FONT color="green">387</FONT>    }<a name="line.387"></a>
<FONT color="green">388</FONT>    <a name="line.388"></a>
<FONT color="green">389</FONT>    /**<a name="line.389"></a>
<FONT color="green">390</FONT>     * @param cacheIndex Cache-index of a dataset.<a name="line.390"></a>
<FONT color="green">391</FONT>     * @return Dataset at the specified index.<a name="line.391"></a>
<FONT color="green">392</FONT>     */<a name="line.392"></a>
<FONT color="green">393</FONT>    public DataSet getDataSet(int cacheIndex) {<a name="line.393"></a>
<FONT color="green">394</FONT>            return dataSets.get(cacheIndex);<a name="line.394"></a>
<FONT color="green">395</FONT>    }<a name="line.395"></a>
<FONT color="green">396</FONT>    <a name="line.396"></a>
<FONT color="green">397</FONT>    /**<a name="line.397"></a>
<FONT color="green">398</FONT>     * @return Smallest value currently in the cache or {@code Double.NaN} if the cache is empty.<a name="line.398"></a>
<FONT color="green">399</FONT>     */<a name="line.399"></a>
<FONT color="green">400</FONT>    public double getMinValueCached() {<a name="line.400"></a>
<FONT color="green">401</FONT>            return minValueCached;<a name="line.401"></a>
<FONT color="green">402</FONT>    }<a name="line.402"></a>
<FONT color="green">403</FONT>    <a name="line.403"></a>
<FONT color="green">404</FONT>    /**<a name="line.404"></a>
<FONT color="green">405</FONT>     * @return Largest value currently in the cache or {@code Double.NaN} if the cache is empty.<a name="line.405"></a>
<FONT color="green">406</FONT>     */<a name="line.406"></a>
<FONT color="green">407</FONT>    public double getMaxValueCached() {<a name="line.407"></a>
<FONT color="green">408</FONT>            return maxValueCached;<a name="line.408"></a>
<FONT color="green">409</FONT>    }<a name="line.409"></a>
<FONT color="green">410</FONT>    <a name="line.410"></a>
<FONT color="green">411</FONT>    /**<a name="line.411"></a>
<FONT color="green">412</FONT>     * @return The index which the first dataset in this chache had in the original datafile.<a name="line.412"></a>
<FONT color="green">413</FONT>     */<a name="line.413"></a>
<FONT color="green">414</FONT>    public int getMinDataFileIndex() {<a name="line.414"></a>
<FONT color="green">415</FONT>            try {<a name="line.415"></a>
<FONT color="green">416</FONT>                    return dataSets.get(0).getDataFileIndex();<a name="line.416"></a>
<FONT color="green">417</FONT>            } catch (IndexOutOfBoundsException e) {<a name="line.417"></a>
<FONT color="green">418</FONT>                    return 0;<a name="line.418"></a>
<FONT color="green">419</FONT>            }<a name="line.419"></a>
<FONT color="green">420</FONT>    }<a name="line.420"></a>
<FONT color="green">421</FONT>    <a name="line.421"></a>
<FONT color="green">422</FONT>    /**<a name="line.422"></a>
<FONT color="green">423</FONT>     * @return The index which the last dataset in this chache had in the original datafile.<a name="line.423"></a>
<FONT color="green">424</FONT>     */<a name="line.424"></a>
<FONT color="green">425</FONT>    public int getMaxDataFileIndex() {<a name="line.425"></a>
<FONT color="green">426</FONT>            try {<a name="line.426"></a>
<FONT color="green">427</FONT>                    return dataSets.get(dataSets.size() - 1).getDataFileIndex();<a name="line.427"></a>
<FONT color="green">428</FONT>            } catch (IndexOutOfBoundsException e) {<a name="line.428"></a>
<FONT color="green">429</FONT>                    return 0;<a name="line.429"></a>
<FONT color="green">430</FONT>            }<a name="line.430"></a>
<FONT color="green">431</FONT>    }<a name="line.431"></a>
<FONT color="green">432</FONT>    <a name="line.432"></a>
<FONT color="green">433</FONT>    /**<a name="line.433"></a>
<FONT color="green">434</FONT>     * @param dataFileIndex An index in the original datafile.<a name="line.434"></a>
<FONT color="green">435</FONT>     * @return A dataset which was located at the specified index in the original data file, or {@code null}<a name="line.435"></a>
<FONT color="green">436</FONT>     * if there is no such dataset in the cache.<a name="line.436"></a>
<FONT color="green">437</FONT>     */<a name="line.437"></a>
<FONT color="green">438</FONT>    public DataSet findDataSet(int dataFileIndex) {<a name="line.438"></a>
<FONT color="green">439</FONT>            int cacheIndex = Collections.binarySearch(dataSets, dataFileIndex);<a name="line.439"></a>
<FONT color="green">440</FONT>            if (cacheIndex &lt; 0)<a name="line.440"></a>
<FONT color="green">441</FONT>                    return null;<a name="line.441"></a>
<FONT color="green">442</FONT>            if (cacheIndex &gt;= dataSets.size())<a name="line.442"></a>
<FONT color="green">443</FONT>                    return null;<a name="line.443"></a>
<FONT color="green">444</FONT>            DataSet ds = getDataSet(cacheIndex);<a name="line.444"></a>
<FONT color="green">445</FONT>            if (ds.getDataFileIndex() != dataFileIndex)<a name="line.445"></a>
<FONT color="green">446</FONT>                    return null;<a name="line.446"></a>
<FONT color="green">447</FONT>            return ds;<a name="line.447"></a>
<FONT color="green">448</FONT>    }<a name="line.448"></a>
<FONT color="green">449</FONT>    <a name="line.449"></a>
<FONT color="green">450</FONT>    /**<a name="line.450"></a>
<FONT color="green">451</FONT>     * Adds a specified dataset to this cache.<a name="line.451"></a>
<FONT color="green">452</FONT>     * @param ds A dataset.<a name="line.452"></a>
<FONT color="green">453</FONT>     */<a name="line.453"></a>
<FONT color="green">454</FONT>    public void addDataSet(DataSet ds) {<a name="line.454"></a>
<FONT color="green">455</FONT>            <a name="line.455"></a>
<FONT color="green">456</FONT>            // Ignore null datasets:<a name="line.456"></a>
<FONT color="green">457</FONT>            if (null == ds)<a name="line.457"></a>
<FONT color="green">458</FONT>                    return;<a name="line.458"></a>
<FONT color="green">459</FONT>            <a name="line.459"></a>
<FONT color="green">460</FONT>            // Add dataset according to the current cache mode:<a name="line.460"></a>
<FONT color="green">461</FONT>            boolean reallyAdded = false;<a name="line.461"></a>
<FONT color="green">462</FONT>            switch (currentMode) {<a name="line.462"></a>
<FONT color="green">463</FONT>                    case CacheAllData:      reallyAdded = addDataSet_AllDataMode(ds);<a name="line.463"></a>
<FONT color="green">464</FONT>                                                            break;<a name="line.464"></a>
<FONT color="green">465</FONT>                    case CacheTailData:     reallyAdded = addDataSet_TailDataMode(ds);<a name="line.465"></a>
<FONT color="green">466</FONT>                                                            break;<a name="line.466"></a>
<FONT color="green">467</FONT>            }<a name="line.467"></a>
<FONT color="green">468</FONT>            <a name="line.468"></a>
<FONT color="green">469</FONT>            // If the dataset has not actually been cached, there is nothing more to so:<a name="line.469"></a>
<FONT color="green">470</FONT>            if (!reallyAdded)<a name="line.470"></a>
<FONT color="green">471</FONT>                    return;<a name="line.471"></a>
<FONT color="green">472</FONT>            <a name="line.472"></a>
<FONT color="green">473</FONT>            // Update min- and max-caches:<a name="line.473"></a>
<FONT color="green">474</FONT>            includeExtremeValues(ds);<a name="line.474"></a>
<FONT color="green">475</FONT>            <a name="line.475"></a>
<FONT color="green">476</FONT>            // Notify listeners:<a name="line.476"></a>
<FONT color="green">477</FONT>            fireEvent(CacheEvent.UpdateData);<a name="line.477"></a>
<FONT color="green">478</FONT>    }<a name="line.478"></a>
<FONT color="green">479</FONT>    <a name="line.479"></a>
<FONT color="green">480</FONT>    /**<a name="line.480"></a>
<FONT color="green">481</FONT>     * Updates the internal state of this cache and its data series to include the min and max<a name="line.481"></a>
<FONT color="green">482</FONT>     * values of the specified dataset.<a name="line.482"></a>
<FONT color="green">483</FONT>     * @param ds A dataset.<a name="line.483"></a>
<FONT color="green">484</FONT>     */<a name="line.484"></a>
<FONT color="green">485</FONT>    private void includeExtremeValues(DataSet ds) {<a name="line.485"></a>
<FONT color="green">486</FONT>            <a name="line.486"></a>
<FONT color="green">487</FONT>            for (int s = 0; s &lt; dataSeries.size(); s++) {<a name="line.487"></a>
<FONT color="green">488</FONT>                    <a name="line.488"></a>
<FONT color="green">489</FONT>                    double val = ds.getValue(s);<a name="line.489"></a>
<FONT color="green">490</FONT>                    <a name="line.490"></a>
<FONT color="green">491</FONT>                    if (Double.isNaN(val) || Double.isInfinite(val))<a name="line.491"></a>
<FONT color="green">492</FONT>                            continue;<a name="line.492"></a>
<FONT color="green">493</FONT>                    <a name="line.493"></a>
<FONT color="green">494</FONT>                    if (val &lt; minValueCached || Double.isNaN(minValueCached))<a name="line.494"></a>
<FONT color="green">495</FONT>                            minValueCached = val;<a name="line.495"></a>
<FONT color="green">496</FONT>                    <a name="line.496"></a>
<FONT color="green">497</FONT>                    if (val &gt; maxValueCached || Double.isNaN(maxValueCached))<a name="line.497"></a>
<FONT color="green">498</FONT>                            maxValueCached = val;<a name="line.498"></a>
<FONT color="green">499</FONT>                    <a name="line.499"></a>
<FONT color="green">500</FONT>                    dataSeries.get(s).includeExtremeValue(val);<a name="line.500"></a>
<FONT color="green">501</FONT>            }<a name="line.501"></a>
<FONT color="green">502</FONT>    }<a name="line.502"></a>
<FONT color="green">503</FONT>    <a name="line.503"></a>
<FONT color="green">504</FONT>    /**<a name="line.504"></a>
<FONT color="green">505</FONT>     * Adds a dataset when cache is in {@code AllDataMode}.<a name="line.505"></a>
<FONT color="green">506</FONT>     * @param ds A dataset.<a name="line.506"></a>
<FONT color="green">507</FONT>     * @return Whether the dataset was actually added.<a name="line.507"></a>
<FONT color="green">508</FONT>     */<a name="line.508"></a>
<FONT color="green">509</FONT>    private boolean addDataSet_AllDataMode(DataSet ds) {<a name="line.509"></a>
<FONT color="green">510</FONT>            <a name="line.510"></a>
<FONT color="green">511</FONT>            if (0 != (ds.getDataFileIndex() % dispersalFactor))<a name="line.511"></a>
<FONT color="green">512</FONT>                    return false;<a name="line.512"></a>
<FONT color="green">513</FONT>            <a name="line.513"></a>
<FONT color="green">514</FONT>            if (CACHE_SIZE &gt; dataSets.size()) {<a name="line.514"></a>
<FONT color="green">515</FONT>                    dataSets.add(ds);<a name="line.515"></a>
<FONT color="green">516</FONT>                    return true;<a name="line.516"></a>
<FONT color="green">517</FONT>            }<a name="line.517"></a>
<FONT color="green">518</FONT>            <a name="line.518"></a>
<FONT color="green">519</FONT>            increaseDispersalFactor();<a name="line.519"></a>
<FONT color="green">520</FONT>            return addDataSet_AllDataMode(ds);<a name="line.520"></a>
<FONT color="green">521</FONT>    }<a name="line.521"></a>
<FONT color="green">522</FONT>    <a name="line.522"></a>
<FONT color="green">523</FONT>    /**<a name="line.523"></a>
<FONT color="green">524</FONT>     * Increases the value which must divide datafile indices of all cached datasets without remainder.<a name="line.524"></a>
<FONT color="green">525</FONT>     * Datasets with the wrong datafile indices are removed from the cache and the cache indices are updated.<a name="line.525"></a>
<FONT color="green">526</FONT>     * This method is used to compact the cache in {@code AllDataMode}-mode.<a name="line.526"></a>
<FONT color="green">527</FONT>     */<a name="line.527"></a>
<FONT color="green">528</FONT>    private void increaseDispersalFactor() {<a name="line.528"></a>
<FONT color="green">529</FONT>            <a name="line.529"></a>
<FONT color="green">530</FONT>            // Remove every second dataset:<a name="line.530"></a>
<FONT color="green">531</FONT>            int i = 0;<a name="line.531"></a>
<FONT color="green">532</FONT>            boolean remove = false;<a name="line.532"></a>
<FONT color="green">533</FONT>            while (i &lt; dataSets.size()) {<a name="line.533"></a>
<FONT color="green">534</FONT>                    if (remove)<a name="line.534"></a>
<FONT color="green">535</FONT>                            dataSets.remove(i);<a name="line.535"></a>
<FONT color="green">536</FONT>                    else<a name="line.536"></a>
<FONT color="green">537</FONT>                            i++;<a name="line.537"></a>
<FONT color="green">538</FONT>                    remove = !remove;<a name="line.538"></a>
<FONT color="green">539</FONT>            }<a name="line.539"></a>
<FONT color="green">540</FONT>            <a name="line.540"></a>
<FONT color="green">541</FONT>            if (dataSets instanceof ArrayList)      <a name="line.541"></a>
<FONT color="green">542</FONT>                    ((ArrayList) dataSets).ensureCapacity(CACHE_SIZE);<a name="line.542"></a>
<FONT color="green">543</FONT>            <a name="line.543"></a>
<FONT color="green">544</FONT>            // Increase dispersal factor:<a name="line.544"></a>
<FONT color="green">545</FONT>            dispersalFactor *= 2;<a name="line.545"></a>
<FONT color="green">546</FONT>            <a name="line.546"></a>
<FONT color="green">547</FONT>            // Rebuild the extreme values cache:<a name="line.547"></a>
<FONT color="green">548</FONT>            resetExtremeValues();<a name="line.548"></a>
<FONT color="green">549</FONT>            for (DataSet ds : dataSets)<a name="line.549"></a>
<FONT color="green">550</FONT>                    includeExtremeValues(ds);<a name="line.550"></a>
<FONT color="green">551</FONT>    }<a name="line.551"></a>
<FONT color="green">552</FONT>    <a name="line.552"></a>
<FONT color="green">553</FONT>    /**<a name="line.553"></a>
<FONT color="green">554</FONT>     * Adds a dataset when cache is in {@code TailDataMode}.<a name="line.554"></a>
<FONT color="green">555</FONT>     * @param ds A dataset.<a name="line.555"></a>
<FONT color="green">556</FONT>     * @return {@code true}.<a name="line.556"></a>
<FONT color="green">557</FONT>     */<a name="line.557"></a>
<FONT color="green">558</FONT>    private boolean addDataSet_TailDataMode(DataSet ds) {<a name="line.558"></a>
<FONT color="green">559</FONT>            <a name="line.559"></a>
<FONT color="green">560</FONT>            if (CACHE_SIZE &gt; dataSets.size()) {<a name="line.560"></a>
<FONT color="green">561</FONT>                    dataSets.add(ds);<a name="line.561"></a>
<FONT color="green">562</FONT>                    return true;<a name="line.562"></a>
<FONT color="green">563</FONT>            }<a name="line.563"></a>
<FONT color="green">564</FONT>            <a name="line.564"></a>
<FONT color="green">565</FONT>            removeDatalistHead();<a name="line.565"></a>
<FONT color="green">566</FONT>            return addDataSet_TailDataMode(ds);<a name="line.566"></a>
<FONT color="green">567</FONT>    }<a name="line.567"></a>
<FONT color="green">568</FONT>    <a name="line.568"></a>
<FONT color="green">569</FONT>    /**<a name="line.569"></a>
<FONT color="green">570</FONT>     * Removes the oldest datasets in this cache.<a name="line.570"></a>
<FONT color="green">571</FONT>     * This method is used to compact the cache in {@code AllDataMode}-mode.<a name="line.571"></a>
<FONT color="green">572</FONT>     */<a name="line.572"></a>
<FONT color="green">573</FONT>    private void removeDatalistHead() {<a name="line.573"></a>
<FONT color="green">574</FONT>            <a name="line.574"></a>
<FONT color="green">575</FONT>            // Remove datasets wich were cached the longes time ago:<a name="line.575"></a>
<FONT color="green">576</FONT>            <a name="line.576"></a>
<FONT color="green">577</FONT>            if (dataSets instanceof RemoveRangeArrayList) {<a name="line.577"></a>
<FONT color="green">578</FONT>                    ((RemoveRangeArrayList) dataSets).removeRangeint(0, CACHE_SIZE - TAIL_BALANCE_SIZE);<a name="line.578"></a>
<FONT color="green">579</FONT>                    <a name="line.579"></a>
<FONT color="green">580</FONT>            } else {<a name="line.580"></a>
<FONT color="green">581</FONT>                    while (TAIL_BALANCE_SIZE &gt; dataSets.size())<a name="line.581"></a>
<FONT color="green">582</FONT>                            dataSets.remove(0);<a name="line.582"></a>
<FONT color="green">583</FONT>            }<a name="line.583"></a>
<FONT color="green">584</FONT>            <a name="line.584"></a>
<FONT color="green">585</FONT>            if (dataSets instanceof ArrayList)<a name="line.585"></a>
<FONT color="green">586</FONT>                    ((ArrayList) dataSets).ensureCapacity(CACHE_SIZE);<a name="line.586"></a>
<FONT color="green">587</FONT>            <a name="line.587"></a>
<FONT color="green">588</FONT>            // Rebuild the extreme values cache:<a name="line.588"></a>
<FONT color="green">589</FONT>            resetExtremeValues();<a name="line.589"></a>
<FONT color="green">590</FONT>            for (DataSet ds : dataSets)<a name="line.590"></a>
<FONT color="green">591</FONT>                    includeExtremeValues(ds);<a name="line.591"></a>
<FONT color="green">592</FONT>    }<a name="line.592"></a>
<FONT color="green">593</FONT>    <a name="line.593"></a>
<FONT color="green">594</FONT>    /**<a name="line.594"></a>
<FONT color="green">595</FONT>     * Caches info on the data file.<a name="line.595"></a>
<FONT color="green">596</FONT>     * @param info File info.<a name="line.596"></a>
<FONT color="green">597</FONT>     */<a name="line.597"></a>
<FONT color="green">598</FONT>    public void addDataFileInfo(String info) {<a name="line.598"></a>
<FONT color="green">599</FONT>            this.dataFileInfo.add(info);<a name="line.599"></a>
<FONT color="green">600</FONT>            fireEvent(CacheEvent.UpdateDataFileInfo);<a name="line.600"></a>
<FONT color="green">601</FONT>    }<a name="line.601"></a>
<FONT color="green">602</FONT>    <a name="line.602"></a>
<FONT color="green">603</FONT>    /**<a name="line.603"></a>
<FONT color="green">604</FONT>     * @return A list of all caches data file info strings.<a name="line.604"></a>
<FONT color="green">605</FONT>     */<a name="line.605"></a>
<FONT color="green">606</FONT>    public List&lt;String&gt; listDataFileInfo() {<a name="line.606"></a>
<FONT color="green">607</FONT>            return Collections.unmodifiableList(dataFileInfo);<a name="line.607"></a>
<FONT color="green">608</FONT>    }<a name="line.608"></a>
<FONT color="green">609</FONT>    <a name="line.609"></a>
<FONT color="green">610</FONT>    /**<a name="line.610"></a>
<FONT color="green">611</FONT>     * @return The data file info where all cached info strings are separated by new-lines and<a name="line.611"></a>
<FONT color="green">612</FONT>     * concatenated into a single string.<a name="line.612"></a>
<FONT color="green">613</FONT>     */<a name="line.613"></a>
<FONT color="green">614</FONT>    public String getDataFileInfo() {<a name="line.614"></a>
<FONT color="green">615</FONT>            <a name="line.615"></a>
<FONT color="green">616</FONT>            StringWriter s = new StringWriter();<a name="line.616"></a>
<FONT color="green">617</FONT>            PrintWriter w = new PrintWriter(s);<a name="line.617"></a>
<FONT color="green">618</FONT>            for (String infoLine : dataFileInfo)<a name="line.618"></a>
<FONT color="green">619</FONT>                    w.println(infoLine);<a name="line.619"></a>
<FONT color="green">620</FONT>            <a name="line.620"></a>
<FONT color="green">621</FONT>            w.close();<a name="line.621"></a>
<FONT color="green">622</FONT>            return s.toString();<a name="line.622"></a>
<FONT color="green">623</FONT>    }<a name="line.623"></a>
<FONT color="green">624</FONT>    <a name="line.624"></a>
<FONT color="green">625</FONT>    /**<a name="line.625"></a>
<FONT color="green">626</FONT>     * Adds an observer to this cache.<a name="line.626"></a>
<FONT color="green">627</FONT>     * @param observer An observer.<a name="line.627"></a>
<FONT color="green">628</FONT>     * @return Whether the observer was really added because is was not yet on the list.<a name="line.628"></a>
<FONT color="green">629</FONT>     */<a name="line.629"></a>
<FONT color="green">630</FONT>    public boolean addObserver(CacheObserver observer) {<a name="line.630"></a>
<FONT color="green">631</FONT>            if (hasObserver(observer))<a name="line.631"></a>
<FONT color="green">632</FONT>                    return false;<a name="line.632"></a>
<FONT color="green">633</FONT>            return observers.add(observer);<a name="line.633"></a>
<FONT color="green">634</FONT>    }<a name="line.634"></a>
<FONT color="green">635</FONT>    <a name="line.635"></a>
<FONT color="green">636</FONT>    /**<a name="line.636"></a>
<FONT color="green">637</FONT>     * @param observer An observer.<a name="line.637"></a>
<FONT color="green">638</FONT>     * @return Whether this cache already has the specified observer.<a name="line.638"></a>
<FONT color="green">639</FONT>     */<a name="line.639"></a>
<FONT color="green">640</FONT>    public boolean hasObserver(CacheObserver observer) {<a name="line.640"></a>
<FONT color="green">641</FONT>            return observers.contains(observer);    <a name="line.641"></a>
<FONT color="green">642</FONT>    }<a name="line.642"></a>
<FONT color="green">643</FONT>    <a name="line.643"></a>
<FONT color="green">644</FONT>    /**<a name="line.644"></a>
<FONT color="green">645</FONT>     * @param observer An observer to remove.<a name="line.645"></a>
<FONT color="green">646</FONT>     * @return Whther teh observer was there as was removed.<a name="line.646"></a>
<FONT color="green">647</FONT>     */<a name="line.647"></a>
<FONT color="green">648</FONT>    public boolean removeObserver(CacheObserver observer) {<a name="line.648"></a>
<FONT color="green">649</FONT>            return observers.remove(observer);<a name="line.649"></a>
<FONT color="green">650</FONT>    }<a name="line.650"></a>
<FONT color="green">651</FONT>    <a name="line.651"></a>
<FONT color="green">652</FONT>    /**<a name="line.652"></a>
<FONT color="green">653</FONT>     * @return Number of observers.<a name="line.653"></a>
<FONT color="green">654</FONT>     */<a name="line.654"></a>
<FONT color="green">655</FONT>    public int countObservers() {<a name="line.655"></a>
<FONT color="green">656</FONT>            return observers.size();<a name="line.656"></a>
<FONT color="green">657</FONT>    }<a name="line.657"></a>
<FONT color="green">658</FONT>    <a name="line.658"></a>
<FONT color="green">659</FONT>    /**<a name="line.659"></a>
<FONT color="green">660</FONT>     * @return Read-only list of observers.<a name="line.660"></a>
<FONT color="green">661</FONT>     */<a name="line.661"></a>
<FONT color="green">662</FONT>    public List&lt;CacheObserver&gt; getObservers() {<a name="line.662"></a>
<FONT color="green">663</FONT>            return java.util.Collections.unmodifiableList(observers);<a name="line.663"></a>
<FONT color="green">664</FONT>    }<a name="line.664"></a>
<FONT color="green">665</FONT>    <a name="line.665"></a>
<FONT color="green">666</FONT>    /**<a name="line.666"></a>
<FONT color="green">667</FONT>     * Notifies the observers of a specified event. If this cache is currently in {@code delayEvents}<a name="line.667"></a>
<FONT color="green">668</FONT>     * mode, the observers are not notyfied and the event is cached.<a name="line.668"></a>
<FONT color="green">669</FONT>     * @param event An event.<a name="line.669"></a>
<FONT color="green">670</FONT>     */<a name="line.670"></a>
<FONT color="green">671</FONT>    public void fireEvent(CacheEvent event) {<a name="line.671"></a>
<FONT color="green">672</FONT>            if (delayEvents) {<a name="line.672"></a>
<FONT color="green">673</FONT>                    if (null != event) {<a name="line.673"></a>
<FONT color="green">674</FONT>                            delayedEvents.add(event);<a name="line.674"></a>
<FONT color="green">675</FONT>                            //System.out.println("Delaying event: " + event);<a name="line.675"></a>
<FONT color="green">676</FONT>                    }<a name="line.676"></a>
<FONT color="green">677</FONT>            } else {<a name="line.677"></a>
<FONT color="green">678</FONT>                    for (CacheObserver observer : observers)<a name="line.678"></a>
<FONT color="green">679</FONT>                            observer.cacheEventFired(this, event);<a name="line.679"></a>
<FONT color="green">680</FONT>            }<a name="line.680"></a>
<FONT color="green">681</FONT>    }<a name="line.681"></a>
<FONT color="green">682</FONT>    <a name="line.682"></a>
<FONT color="green">683</FONT>    /**<a name="line.683"></a>
<FONT color="green">684</FONT>     * When this method is invoked the cache enters the {@code delayEvents}-mode;<a name="line.684"></a>
<FONT color="green">685</FONT>     * while in this mode events are not supplied to observers, instead they are cached<a name="line.685"></a>
<FONT color="green">686</FONT>     * and fired only when {@code fireDelayedEvents} is invoked. This is can be useful<a name="line.686"></a>
<FONT color="green">687</FONT>     * when the cache is modified several times in one go. In such case the notification<a name="line.687"></a>
<FONT color="green">688</FONT>     * of observers can be consolidated which might save processing similar events many times.<a name="line.688"></a>
<FONT color="green">689</FONT>     * <a name="line.689"></a>
<FONT color="green">690</FONT>     * @see #fireDelayedEvents()<a name="line.690"></a>
<FONT color="green">691</FONT>     */<a name="line.691"></a>
<FONT color="green">692</FONT>    public void startDelayEvents() {<a name="line.692"></a>
<FONT color="green">693</FONT>            if (!delayEvents)<a name="line.693"></a>
<FONT color="green">694</FONT>                    delayedEvents.clear();<a name="line.694"></a>
<FONT color="green">695</FONT>            delayEvents = true;<a name="line.695"></a>
<FONT color="green">696</FONT>    }<a name="line.696"></a>
<FONT color="green">697</FONT>    <a name="line.697"></a>
<FONT color="green">698</FONT>    /**<a name="line.698"></a>
<FONT color="green">699</FONT>     * Ends the {@code delayEvents}-mode and returns in the normal observable mode;<a name="line.699"></a>
<FONT color="green">700</FONT>     * all events cached while in that mode are fired. However, each type of event<a name="line.700"></a>
<FONT color="green">701</FONT>     * is fired at most once. The order in which the events are fires is unspecified<a name="line.701"></a>
<FONT color="green">702</FONT>     * and might not correspond to the order in which the events actually occured.  <a name="line.702"></a>
<FONT color="green">703</FONT>     */<a name="line.703"></a>
<FONT color="green">704</FONT>    public void fireDelayedEvents() {<a name="line.704"></a>
<FONT color="green">705</FONT>            if (!delayEvents)<a name="line.705"></a>
<FONT color="green">706</FONT>                    return;<a name="line.706"></a>
<FONT color="green">707</FONT>            delayEvents = false;<a name="line.707"></a>
<FONT color="green">708</FONT>            for (CacheEvent event : delayedEvents) {<a name="line.708"></a>
<FONT color="green">709</FONT>                    //System.out.println("Fire delayed event: " + event);<a name="line.709"></a>
<FONT color="green">710</FONT>                    fireEvent(event);<a name="line.710"></a>
<FONT color="green">711</FONT>            }<a name="line.711"></a>
<FONT color="green">712</FONT>            delayedEvents.clear();  <a name="line.712"></a>
<FONT color="green">713</FONT>    }<a name="line.713"></a>
<FONT color="green">714</FONT>    <a name="line.714"></a>
<FONT color="green">715</FONT>    /**<a name="line.715"></a>
<FONT color="green">716</FONT>     * A {@code ArrayList} which publicly publishes its {@code removeRangeint} method.<a name="line.716"></a>
<FONT color="green">717</FONT>     * @param &lt;E&gt; Any class.<a name="line.717"></a>
<FONT color="green">718</FONT>     */<a name="line.718"></a>
<FONT color="green">719</FONT>    private class RemoveRangeArrayList&lt;E&gt; extends ArrayList&lt;E&gt; {<a name="line.719"></a>
<FONT color="green">720</FONT>            public RemoveRangeArrayList() { super(); }<a name="line.720"></a>
<FONT color="green">721</FONT>            public RemoveRangeArrayList(int initialCapacity) { super(initialCapacity); }<a name="line.721"></a>
<FONT color="green">722</FONT>            public void removeRangeint(int fromIndex, int toIndex) { super.removeRange(fromIndex, toIndex); }<a name="line.722"></a>
<FONT color="green">723</FONT>    } // private class RemoveRangeArrayList&lt;E&gt;<a name="line.723"></a>
<FONT color="green">724</FONT>    <a name="line.724"></a>
<FONT color="green">725</FONT>    /**<a name="line.725"></a>
<FONT color="green">726</FONT>     * A read-only iterator for data series labels.<a name="line.726"></a>
<FONT color="green">727</FONT>     */<a name="line.727"></a>
<FONT color="green">728</FONT>    private class DataSeriesLabelIterator extends ReadOnlyIterator&lt;String&gt; {<a name="line.728"></a>
<FONT color="green">729</FONT>            private Iterator&lt;DataSeries&gt; iterator = null;<a name="line.729"></a>
<FONT color="green">730</FONT>            <a name="line.730"></a>
<FONT color="green">731</FONT>            public DataSeriesLabelIterator(Iterator&lt;DataSeries&gt; iter) {<a name="line.731"></a>
<FONT color="green">732</FONT>                    super(null);<a name="line.732"></a>
<FONT color="green">733</FONT>                    iterator = iter;<a name="line.733"></a>
<FONT color="green">734</FONT>            }<a name="line.734"></a>
<FONT color="green">735</FONT>            <a name="line.735"></a>
<FONT color="green">736</FONT>            @Override<a name="line.736"></a>
<FONT color="green">737</FONT>            public boolean hasNext() {<a name="line.737"></a>
<FONT color="green">738</FONT>                    return iterator.hasNext();<a name="line.738"></a>
<FONT color="green">739</FONT>            }<a name="line.739"></a>
<FONT color="green">740</FONT>            <a name="line.740"></a>
<FONT color="green">741</FONT>            @Override<a name="line.741"></a>
<FONT color="green">742</FONT>            public String next() {<a name="line.742"></a>
<FONT color="green">743</FONT>                    return iterator.next().getLabel();<a name="line.743"></a>
<FONT color="green">744</FONT>            }<a name="line.744"></a>
<FONT color="green">745</FONT>            <a name="line.745"></a>
<FONT color="green">746</FONT>            @Override<a name="line.746"></a>
<FONT color="green">747</FONT>            public void remove() {<a name="line.747"></a>
<FONT color="green">748</FONT>                    throw new UnsupportedOperationException("Cannot use this iterator to remove items.");       <a name="line.748"></a>
<FONT color="green">749</FONT>            }<a name="line.749"></a>
<FONT color="green">750</FONT>    } // class DataSeriesLabelIterator<a name="line.750"></a>
<FONT color="green">751</FONT>    <a name="line.751"></a>
<FONT color="green">752</FONT>    } // class DataCache<a name="line.752"></a>




























































</PRE>
</BODY>
</HTML>
