	package visGrid.diagram.navigator;

/**
 * @generated
 */
public class VisGridNavigatorContentProvider implements org.eclipse.ui.navigator.ICommonContentProvider {

		/**
 * @generated
 */
private static final Object[] EMPTY_ARRAY = new Object[0];

	/**
 * @generated
 */
private org.eclipse.jface.viewers.Viewer myViewer;

	/**
 * @generated
 */
private org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain myEditingDomain;

	/**
 * @generated
 */
private org.eclipse.emf.workspace.util.WorkspaceSynchronizer myWorkspaceSynchronizer;

	/**
 * @generated
 */
private Runnable myViewerRefreshRunnable;
	
	/**
 * @generated
 */
@SuppressWarnings({ "unchecked", "serial", "rawtypes" })
public VisGridNavigatorContentProvider() {
	org.eclipse.emf.transaction.TransactionalEditingDomain editingDomain = org.eclipse.gmf.runtime.emf.core.GMFEditingDomainFactory.INSTANCE.createEditingDomain();
myEditingDomain = (org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain) editingDomain;
myEditingDomain.setResourceToReadOnlyMap(new java.util.HashMap() {
	public Object get(Object key) {
		if (!containsKey(key)) {
			put(key, Boolean.TRUE);
		}
		return super.get(key);
	}
});
myViewerRefreshRunnable = new Runnable() {
	public void run() {
		if (myViewer != null) {
			myViewer.refresh();
		}
	}
};
myWorkspaceSynchronizer = new org.eclipse.emf.workspace.util.WorkspaceSynchronizer(editingDomain, new org.eclipse.emf.workspace.util.WorkspaceSynchronizer.Delegate() {
	public void dispose() {
	}

	public boolean handleResourceChanged(final org.eclipse.emf.ecore.resource.Resource resource) {
		unloadAllResources();
asyncRefresh();
return true;
	}
	
	public boolean handleResourceDeleted(org.eclipse.emf.ecore.resource.Resource resource) {
		unloadAllResources();
asyncRefresh();
return true;
	}
	
	public boolean handleResourceMoved(org.eclipse.emf.ecore.resource.Resource resource, final org.eclipse.emf.common.util.URI newURI) {
		unloadAllResources();
asyncRefresh();
return true;
	}
});
}

		/**
 * @generated
 */
public void dispose() {
	myWorkspaceSynchronizer.dispose();
	myWorkspaceSynchronizer = null;
	myViewerRefreshRunnable = null;
	myViewer = null;
	unloadAllResources();
	((org.eclipse.emf.transaction.TransactionalEditingDomain) myEditingDomain).dispose();
	myEditingDomain = null;
}
	
		/**
 * @generated
 */
public void inputChanged(org.eclipse.jface.viewers.Viewer viewer, Object oldInput, Object newInput) {
	myViewer = viewer;
}
	
	
	/**
 * @generated
 */
	void unloadAllResources() {
		for (org.eclipse.emf.ecore.resource.Resource nextResource : myEditingDomain.getResourceSet().getResources()) {
			nextResource.unload();
		}
	}
	
	/**
 * @generated
 */
	void asyncRefresh() {
		if (myViewer != null && !myViewer.getControl().isDisposed()) {
			myViewer.getControl().getDisplay().asyncExec(myViewerRefreshRunnable);
		}
	}
	
	/**
 * @generated
 */
public Object[] getElements(Object inputElement) {
	return getChildren(inputElement);
}
	
	/**
 * @generated
 */
public void restoreState(org.eclipse.ui.IMemento aMemento) {
}

/**
 * @generated
 */
public void saveState(org.eclipse.ui.IMemento aMemento) {
}
    
    /**
 * @generated
 */
public void init(org.eclipse.ui.navigator.ICommonContentExtensionSite aConfig) {
}
    
    	/**
 * @generated
 */
public Object[] getChildren(Object parentElement) {
	if (parentElement instanceof org.eclipse.core.resources.IFile) {
		org.eclipse.core.resources.IFile file = (org.eclipse.core.resources.IFile) parentElement;
org.eclipse.emf.common.util.URI fileURI = org.eclipse.emf.common.util.URI.createPlatformResourceURI(file.getFullPath().toString(), true);
org.eclipse.emf.ecore.resource.Resource resource = myEditingDomain.getResourceSet().getResource(fileURI, true);
	java.util.ArrayList<visGrid.diagram.navigator.VisGridNavigatorItem> result = new java.util.ArrayList<visGrid.diagram.navigator.VisGridNavigatorItem>();
					java.util.ArrayList<org.eclipse.gmf.runtime.notation.View> topViews = new java.util.ArrayList<org.eclipse.gmf.runtime.notation.View>(resource.getContents().size());
		for (org.eclipse.emf.ecore.EObject o : resource.getContents()) {
			if (o instanceof org.eclipse.gmf.runtime.notation.View) {
				topViews.add((org.eclipse.gmf.runtime.notation.View) o);
			}
		}
						return result.toArray();
   	} 
    	
   	if (parentElement instanceof visGrid.diagram.navigator.VisGridNavigatorGroup) {
	visGrid.diagram.navigator.VisGridNavigatorGroup group = (visGrid.diagram.navigator.VisGridNavigatorGroup) parentElement;
return group.getChildren();
	} 
		
	if (parentElement instanceof visGrid.diagram.navigator.VisGridNavigatorItem) {
	visGrid.diagram.navigator.VisGridNavigatorItem navigatorItem = (visGrid.diagram.navigator.VisGridNavigatorItem) parentElement;
if (navigatorItem.isLeaf() || !isOwnView(navigatorItem.getView())) {
	return EMPTY_ARRAY;
}
return getViewChildren(navigatorItem.getView(), parentElement);
	}
		
		return EMPTY_ARRAY;
}
    
	/**
 * @generated
 */
private Object[] getViewChildren(org.eclipse.gmf.runtime.notation.View view, Object parentElement) {
   	switch (visGrid.diagram.part.VisGridVisualIDRegistry.getVisualID(view)) {
	
case visGrid.diagram.edit.parts.LinkEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Link_2023_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionLinkEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.RefrigeratorEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Refrigerator_2077_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionRefrigeratorEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionSwitchEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionSwitch_4009_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionSwitch_4009_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.SwitchEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.PlcEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Plc_2015_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionPlcEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.RegulatorEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Regulator_2078_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionRegulatorEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionTriplex_nodeEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionTriplex_node_4038_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionTriplex_node_4038_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Triplex_nodeEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionEvchargerEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionEvcharger_4055_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionEvcharger_4055_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.EvchargerEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionFault_checkEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionFault_check_4068_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionFault_check_4068_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Fault_checkEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionRestorationEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionRestoration_4045_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionRestoration_4045_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.RestorationEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionCapacitorEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionCapacitor_4065_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionCapacitor_4065_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.CapacitorEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.MotorEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Motor_2026_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionMotorEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.CapacitorEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Capacitor_2049_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionCapacitorEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionPlayerEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionPlayer_4013_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionPlayer_4013_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.PlayerEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.NodeEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Node_2024_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionNodeEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.AuctionEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Auction_2035_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionAuctionEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.CollectorEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Collector_2057_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionCollectorEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.Frequency_genEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Frequency_gen_2065_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionFrequency_genEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.Triplex_line_configurationEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Triplex_line_configuration_2072_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionTriplex_line_configurationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionCapbankEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionCapbank_4046_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionCapbank_4046_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.CapbankEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.DishwasherEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Dishwasher_2017_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionDishwasherEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.Windturb_dgEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Windturb_dg_2058_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionWindturb_dgEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionFrequency_genEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionFrequency_gen_4047_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionFrequency_gen_4047_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Frequency_genEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.Series_reactorEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Series_reactor_2041_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionSeries_reactorEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionVoltdumpEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionVoltdump_4071_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionVoltdump_4071_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.VoltdumpEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.MeterEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Meter_2025_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionMeterEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.Regulator_configurationEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Regulator_configuration_2067_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionRegulator_configurationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.EvchargerEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Evcharger_2052_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEvchargerEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.HouseEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_House_2007_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionHouseEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionLineEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionLine_4061_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionLine_4061_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.LineEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.MicrowaveEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Microwave_2043_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionMicrowaveEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.Overhead_line_conductorEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Overhead_line_conductor_2050_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionOverhead_line_conductorEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionOfficeEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionOffice_4057_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionOffice_4057_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.OfficeEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.VoltdumpEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Voltdump_2027_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionVoltdumpEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionLine_spacingEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionLine_spacing_4004_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionLine_spacing_4004_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Line_spacingEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.Energy_storageEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Energy_storage_2005_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEnergy_storageEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionClimateEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionClimate_4060_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionClimate_4060_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ClimateEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionTriplex_meterEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionTriplex_meter_4062_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionTriplex_meter_4062_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Triplex_meterEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionRegulatorEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionRegulator_4049_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionRegulator_4049_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.RegulatorEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.Fault_checkEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Fault_check_2060_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionFault_checkEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.Dc_dc_converterEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Dc_dc_converter_2034_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionDc_dc_converterEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionVolt_var_controlEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionVolt_var_control_4003_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionVolt_var_control_4003_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Volt_var_controlEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.Volt_var_controlEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Volt_var_control_2014_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionVolt_var_controlEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.FreezerEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Freezer_2068_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionFreezerEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionLoadEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionLoad_4064_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionLoad_4064_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.LoadEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.Residential_enduseEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Residential_enduse_2018_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionResidential_enduseEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionHistogramEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionHistogram_4043_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionHistogram_4043_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.HistogramEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionLine_configurationEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionLine_configuration_4027_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionLine_configuration_4027_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Line_configurationEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionRangeEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionRange_4050_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionRange_4050_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.RangeEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.SubstationEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Substation_2010_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionSubstationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionCommEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionComm_4002_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionComm_4002_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.CommEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionRecorderEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionRecorder_4052_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionRecorder_4052_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.RecorderEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionResidential_enduseEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionResidential_enduse_4005_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionResidential_enduse_4005_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Residential_enduseEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionClotheswasherEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionClotheswasher_4044_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionClotheswasher_4044_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ClotheswasherEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.WaterheaterEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Waterheater_2011_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionWaterheaterEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.MultizoneEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Multizone_2046_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionMultizoneEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.FuseEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Fuse_2039_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionFuseEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ControllerEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Controller_2037_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionControllerEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.Triplex_line_conductorEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Triplex_line_conductor_2038_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionTriplex_line_conductorEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionMeterEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionMeter_4067_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionMeter_4067_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.MeterEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.RangeEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Range_2051_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionRangeEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionMultizoneEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionMultizone_4010_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionMultizone_4010_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.MultizoneEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionEnergy_storageEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionEnergy_storage_4069_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionEnergy_storage_4069_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Energy_storageEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionDryerEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionDryer_4039_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionDryer_4039_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.DryerEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionUnderground_lineEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionUnderground_line_4024_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionUnderground_line_4024_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Underground_lineEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.HistogramEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Histogram_2028_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionHistogramEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.OccupantloadEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Occupantload_2056_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionOccupantloadEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionFreezerEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionFreezer_4070_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionFreezer_4070_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.FreezerEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionStubauctionEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionStubauction_4059_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionStubauction_4059_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.StubauctionEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionTransformerEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionTransformer_4032_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionTransformer_4032_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.TransformerEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.Triplex_meterEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Triplex_meter_2063_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionTriplex_meterEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.CommEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Comm_2013_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionCommEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionRegulator_configurationEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionRegulator_configuration_4054_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionRegulator_configuration_4054_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Regulator_configurationEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionCollectorEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionCollector_4030_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionCollector_4030_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.CollectorEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionCsv_readerEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionCsv_reader_4016_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionCsv_reader_4016_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Csv_readerEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.CapbankEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Capbank_2066_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionCapbankEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.SolarEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Solar_2044_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionSolarEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.DryerEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Dryer_2036_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionDryerEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.RecorderEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Recorder_2022_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionRecorderEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionOverhead_line_conductorEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionOverhead_line_conductor_4058_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionOverhead_line_conductor_4058_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Overhead_line_conductorEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionShaperEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionShaper_4034_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionShaper_4034_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ShaperEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.Triplex_lineEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Triplex_line_2071_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionTriplex_lineEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionTriplex_line_configurationEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionTriplex_line_configuration_4078_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionTriplex_line_configuration_4078_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Triplex_line_configurationEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.RectifierEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Rectifier_2002_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionRectifierEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup outgoinglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Connection_2054_outgoinglinks,
	"icons/outgoingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionRelayEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionCommEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionVolt_var_controlEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionLine_spacingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionResidential_enduseEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionWindturb_dgEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionBatteryEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionAuctionEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionSwitchEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionMultizoneEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionWeatherEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionTransformer_configurationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionPlayerEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionLinkEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionController2EditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionCsv_readerEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionControllerEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionDiesel_dgEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionLightsEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionInverterEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionTriplex_line_conductorEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionFuseEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionMicroturbineEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionUnderground_lineEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionZIPloadEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionSubstationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionLine_configurationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionPlcEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionGeneratorEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionCollectorEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionOccupantloadEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionTransformerEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionRefrigeratorEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionShaperEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionPqloadEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionMicrowaveEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionTriplex_lineEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionTriplex_nodeEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionDryerEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionOverhead_lineEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionPlugloadEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionHouse_aEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionHistogramEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionClotheswasherEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionRestorationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionCapbankEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionFrequency_genEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionHouseEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionRegulatorEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionRangeEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionPower_electronicsEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionRecorderEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionSolarEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionRegulator_configurationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEvchargerEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionRectifierEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionOfficeEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionOverhead_line_conductorEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionStubauctionEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionClimateEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionLineEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionTriplex_meterEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionDc_dc_converterEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionLoadEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionCapacitorEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionSeries_reactorEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionMeterEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionFault_checkEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEnergy_storageEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionFreezerEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionVoltdumpEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionMotorEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionNodeEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionBilldumpEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionWaterheaterEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionUnderground_line_conductorEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionDishwasherEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionTriplex_line_configurationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
															if (!outgoinglinks.isEmpty()) {		result.add(outgoinglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionInverterEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionInverter_4020_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionInverter_4020_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.InverterEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionTriplex_line_conductorEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionTriplex_line_conductor_4021_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionTriplex_line_conductor_4021_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Triplex_line_conductorEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.Underground_line_conductorEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Underground_line_conductor_2055_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionUnderground_line_conductorEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionZIPloadEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionZIPload_4025_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionZIPload_4025_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ZIPloadEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.BilldumpEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Billdump_2031_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionBilldumpEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionOverhead_lineEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionOverhead_line_4040_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionOverhead_line_4040_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Overhead_lineEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.Overhead_lineEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Overhead_line_2001_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionOverhead_lineEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.Triplex_nodeEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Triplex_node_2073_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionTriplex_nodeEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionMotorEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionMotor_4072_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionMotor_4072_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.MotorEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionBatteryEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionBattery_4007_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionBattery_4007_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.BatteryEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.GeneratorEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Generator_2032_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionGeneratorEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.Diesel_dgEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Diesel_dg_2047_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionDiesel_dgEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ClotheswasherEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Clotheswasher_2053_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionClotheswasherEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.Controller2EditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Controller2_2003_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionController2EditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionHouse_aEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionHouse_a_4042_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionHouse_a_4042_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.House_aEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.PqloadEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Pqload_2069_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionPqloadEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.StubauctionEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Stubauction_2042_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionStubauctionEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.Csv_readerEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Csv_reader_2074_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionCsv_readerEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.TransformerEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Transformer_2040_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionTransformerEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.InverterEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Inverter_2006_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionInverterEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionSubstationEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionSubstation_4026_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionSubstation_4026_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.SubstationEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.House_aEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_House_a_2059_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionHouse_aEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionLightsEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionLights_4019_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionLights_4019_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.LightsEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionWaterheaterEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionWaterheater_4075_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionWaterheater_4075_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.WaterheaterEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionAuctionEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionAuction_4008_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionAuction_4008_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.AuctionEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionPqloadEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionPqload_4035_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionPqload_4035_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.PqloadEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.Transformer_configurationEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Transformer_configuration_2061_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionTransformer_configurationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionController2EditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionController2_4015_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionController2_4015_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Controller2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ShaperEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Shaper_2064_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionShaperEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionTransformer_configurationEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionTransformer_configuration_4012_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionTransformer_configuration_4012_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Transformer_configurationEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.GridEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Diagram sv = (org.eclipse.gmf.runtime.notation.Diagram) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup links = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Grid_1000_links,
	"icons/linksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Overhead_lineEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.RectifierEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Controller2EditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.MicroturbineEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Energy_storageEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.InverterEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.HouseEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ZIPloadEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.PlugloadEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.SubstationEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.WaterheaterEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Line_configurationEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.CommEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Volt_var_controlEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.PlcEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.LightsEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.DishwasherEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Residential_enduseEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.PlayerEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Power_electronicsEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Underground_lineEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.RecorderEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.LinkEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.NodeEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.MeterEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.MotorEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.VoltdumpEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.HistogramEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.BatteryEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.SwitchEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.BilldumpEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.GeneratorEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.RelayEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Dc_dc_converterEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.AuctionEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.DryerEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ControllerEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Triplex_line_conductorEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.FuseEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.TransformerEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Series_reactorEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.StubauctionEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.MicrowaveEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.SolarEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.RestorationEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.MultizoneEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Diesel_dgEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.LoadEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.CapacitorEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Overhead_line_conductorEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.RangeEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.EvchargerEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ClotheswasherEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Underground_line_conductorEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.OccupantloadEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.CollectorEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Windturb_dgEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.House_aEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Fault_checkEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Transformer_configurationEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.LineEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Triplex_meterEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ShaperEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Frequency_genEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.CapbankEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Regulator_configurationEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.FreezerEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.PqloadEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ClimateEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Triplex_lineEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Triplex_line_configurationEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Triplex_nodeEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Csv_readerEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.WeatherEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Line_spacingEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.RefrigeratorEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.RegulatorEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.OfficeEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionRelayEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionCommEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionVolt_var_controlEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionLine_spacingEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionResidential_enduseEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionWindturb_dgEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionBatteryEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionAuctionEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionSwitchEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionMultizoneEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionWeatherEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionTransformer_configurationEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionPlayerEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionLinkEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionController2EditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionCsv_readerEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionControllerEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionDiesel_dgEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionLightsEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionInverterEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionTriplex_line_conductorEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionFuseEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionMicroturbineEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionUnderground_lineEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionZIPloadEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionSubstationEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionLine_configurationEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionPlcEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionGeneratorEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionCollectorEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionOccupantloadEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionTransformerEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionRefrigeratorEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionShaperEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionPqloadEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionMicrowaveEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionTriplex_lineEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionTriplex_nodeEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionDryerEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionOverhead_lineEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionPlugloadEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionHouse_aEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionHistogramEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionClotheswasherEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionRestorationEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionCapbankEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionFrequency_genEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionHouseEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionRegulatorEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionRangeEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionPower_electronicsEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionRecorderEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionSolarEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionRegulator_configurationEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEvchargerEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionRectifierEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionOfficeEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionOverhead_line_conductorEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionStubauctionEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionClimateEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionLineEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionTriplex_meterEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionDc_dc_converterEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionLoadEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionCapacitorEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionSeries_reactorEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionMeterEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionFault_checkEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEnergy_storageEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionFreezerEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionVoltdumpEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionMotorEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionNodeEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionBilldumpEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionWaterheaterEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionUnderground_line_conductorEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionDishwasherEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionTriplex_line_configurationEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
															if (!links.isEmpty()) {		result.add(links);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionWeatherEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionWeather_4011_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionWeather_4011_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.WeatherEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionTriplex_lineEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionTriplex_line_4037_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionTriplex_line_4037_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Triplex_lineEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionOccupantloadEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionOccupantload_4031_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionOccupantload_4031_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.OccupantloadEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionDiesel_dgEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionDiesel_dg_4018_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionDiesel_dg_4018_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Diesel_dgEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.Power_electronicsEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Power_electronics_2020_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionPower_electronicsEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionRelayEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionRelay_4001_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionRelay_4001_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.RelayEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionFuseEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionFuse_4022_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionFuse_4022_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.FuseEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionBilldumpEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionBilldump_4074_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionBilldump_4074_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.BilldumpEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionNodeEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionNode_4073_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionNode_4073_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.NodeEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionDishwasherEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionDishwasher_4077_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionDishwasher_4077_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.DishwasherEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.BatteryEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Battery_2029_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionBatteryEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionUnderground_line_conductorEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionUnderground_line_conductor_4076_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionUnderground_line_conductor_4076_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Underground_line_conductorEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionRectifierEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionRectifier_4056_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionRectifier_4056_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.RectifierEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionPlcEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionPlc_4028_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionPlc_4028_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.PlcEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionSeries_reactorEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionSeries_reactor_4066_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionSeries_reactor_4066_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Series_reactorEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionGeneratorEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionGenerator_4029_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionGenerator_4029_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.GeneratorEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionSolarEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionSolar_4053_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionSolar_4053_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.SolarEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.Underground_lineEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Underground_line_2021_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionUnderground_lineEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.Line_configurationEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Line_configuration_2012_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionLine_configurationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.LightsEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Lights_2016_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionLightsEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ClimateEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Climate_2070_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionClimateEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.LineEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Line_2062_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionLineEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.MicroturbineEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Microturbine_2004_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionMicroturbineEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.LoadEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Load_2048_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionLoadEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionLinkEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionLink_4014_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionLink_4014_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.LinkEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionPower_electronicsEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionPower_electronics_4051_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionPower_electronics_4051_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Power_electronicsEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionDc_dc_converterEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionDc_dc_converter_4063_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionDc_dc_converter_4063_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Dc_dc_converterEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.PlayerEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Player_2019_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionPlayerEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionWindturb_dgEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionWindturb_dg_4006_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionWindturb_dg_4006_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.Windturb_dgEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionControllerEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionController_4017_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionController_4017_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ControllerEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ZIPloadEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ZIPload_2008_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionZIPloadEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.SwitchEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Switch_2030_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionSwitchEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.RestorationEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Restoration_2045_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionRestorationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.OfficeEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Office_2079_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionOfficeEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionMicrowaveEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionMicrowave_4036_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionMicrowave_4036_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.MicrowaveEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionHouseEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionHouse_4048_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionHouse_4048_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.HouseEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionPlugloadEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionPlugload_4041_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionPlugload_4041_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.PlugloadEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionMicroturbineEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionMicroturbine_4023_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionMicroturbine_4023_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.MicroturbineEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.PlugloadEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Plugload_2009_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionPlugloadEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.ConnectionRefrigeratorEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup target = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionRefrigerator_4033_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	visGrid.diagram.navigator.VisGridNavigatorGroup source = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_ConnectionRefrigerator_4033_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.RefrigeratorEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.RelayEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Relay_2033_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionRelayEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.Line_spacingEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Line_spacing_2076_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionLine_spacingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}

case visGrid.diagram.edit.parts.WeatherEditPart.VISUAL_ID: {
	java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem> result = new java.util.LinkedList<visGrid.diagram.navigator.VisGridAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				visGrid.diagram.navigator.VisGridNavigatorGroup incominglinks = new visGrid.diagram.navigator.VisGridNavigatorGroup(
	visGrid.diagram.part.Messages.NavigatorGroupName_Weather_2075_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.ConnectionWeatherEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}			return result.toArray();
}
	}
	return EMPTY_ARRAY;
}
    
    /**
 * @generated
 */
private java.util.Collection<org.eclipse.gmf.runtime.notation.View> getLinksSourceByType(java.util.Collection<org.eclipse.gmf.runtime.notation.Edge> edges, String type) {
	java.util.LinkedList<org.eclipse.gmf.runtime.notation.View> result = new java.util.LinkedList<org.eclipse.gmf.runtime.notation.View>();
 	for (org.eclipse.gmf.runtime.notation.Edge nextEdge : edges) {
 		org.eclipse.gmf.runtime.notation.View nextEdgeSource = nextEdge.getSource();
 		if (type.equals(nextEdgeSource.getType()) && isOwnView(nextEdgeSource)) {
 			result.add(nextEdgeSource);
 		}
 	}
 	return result;
}
	
/**
 * @generated
 */
 private java.util.Collection<org.eclipse.gmf.runtime.notation.View> getLinksTargetByType(java.util.Collection<org.eclipse.gmf.runtime.notation.Edge> edges, String type) {
	java.util.LinkedList<org.eclipse.gmf.runtime.notation.View> result = new java.util.LinkedList<org.eclipse.gmf.runtime.notation.View>();
 	for (org.eclipse.gmf.runtime.notation.Edge nextEdge : edges) {
 		org.eclipse.gmf.runtime.notation.View nextEdgeTarget = nextEdge.getTarget();
 		if (type.equals(nextEdgeTarget.getType()) && isOwnView(nextEdgeTarget)) {
 			result.add(nextEdgeTarget);
 		}
 	}
 	return result;
}

/**
 * @generated
 */
 private java.util.Collection<org.eclipse.gmf.runtime.notation.View> getOutgoingLinksByType(java.util.Collection<? extends org.eclipse.gmf.runtime.notation.View> nodes, String type) {
	java.util.LinkedList<org.eclipse.gmf.runtime.notation.View> result = new java.util.LinkedList<org.eclipse.gmf.runtime.notation.View>();
 	for (org.eclipse.gmf.runtime.notation.View nextNode : nodes) {
		result.addAll(selectViewsByType(nextNode.getSourceEdges(), type));
 	}
 	return result;
}
	
/**
 * @generated
 */
private java.util.Collection<org.eclipse.gmf.runtime.notation.View> getIncomingLinksByType(java.util.Collection<? extends org.eclipse.gmf.runtime.notation.View> nodes, String type) {
	java.util.LinkedList<org.eclipse.gmf.runtime.notation.View> result = new java.util.LinkedList<org.eclipse.gmf.runtime.notation.View>();
 	for (org.eclipse.gmf.runtime.notation.View nextNode : nodes) {
		result.addAll(selectViewsByType(nextNode.getTargetEdges(), type));
 	}
 	return result;
}
	
/**
 * @generated
 */
private java.util.Collection<org.eclipse.gmf.runtime.notation.View> getChildrenByType(java.util.Collection<? extends org.eclipse.gmf.runtime.notation.View> nodes, String type) {
	java.util.LinkedList<org.eclipse.gmf.runtime.notation.View> result = new java.util.LinkedList<org.eclipse.gmf.runtime.notation.View>();
	for (org.eclipse.gmf.runtime.notation.View nextNode : nodes) {
		result.addAll(selectViewsByType(nextNode.getChildren(), type));
	}
	return result;
}
	
/**
 * @generated
 */
private java.util.Collection<org.eclipse.gmf.runtime.notation.View> getDiagramLinksByType(java.util.Collection<org.eclipse.gmf.runtime.notation.Diagram> diagrams, String type) {
	java.util.ArrayList<org.eclipse.gmf.runtime.notation.View> result = new java.util.ArrayList<org.eclipse.gmf.runtime.notation.View>();
	for (org.eclipse.gmf.runtime.notation.Diagram nextDiagram : diagrams) {
		result.addAll(selectViewsByType(nextDiagram.getEdges(), type));
	}
	return result;
}

// TODO refactor as static method
/**
 * @generated
 */
private java.util.Collection<org.eclipse.gmf.runtime.notation.View> selectViewsByType(java.util.Collection<org.eclipse.gmf.runtime.notation.View> views, String type) {
	java.util.ArrayList<org.eclipse.gmf.runtime.notation.View> result = new java.util.ArrayList<org.eclipse.gmf.runtime.notation.View>();
	for (org.eclipse.gmf.runtime.notation.View nextView : views) {
		if (type.equals(nextView.getType()) && isOwnView(nextView)) {
			result.add(nextView);
		}
	}
	return result;
}
	
/**
 * @generated
 */
private boolean isOwnView(org.eclipse.gmf.runtime.notation.View view) {
	return visGrid.diagram.edit.parts.GridEditPart.MODEL_ID.equals(visGrid.diagram.part.VisGridVisualIDRegistry.getModelID(view));
}
	
/**
 * @generated
 */
private java.util.Collection<visGrid.diagram.navigator.VisGridNavigatorItem> createNavigatorItems(java.util.Collection<org.eclipse.gmf.runtime.notation.View> views, Object parent, boolean isLeafs) {
	java.util.ArrayList<visGrid.diagram.navigator.VisGridNavigatorItem> result = new java.util.ArrayList<visGrid.diagram.navigator.VisGridNavigatorItem>(views.size());
	for (org.eclipse.gmf.runtime.notation.View nextView : views) {
		result.add(new visGrid.diagram.navigator.VisGridNavigatorItem(nextView, parent, isLeafs));
	}
	return result;
}
		
	/**
 * @generated
 */
public Object getParent(Object element) {
	if (element instanceof visGrid.diagram.navigator.VisGridAbstractNavigatorItem) {
    	visGrid.diagram.navigator.VisGridAbstractNavigatorItem abstractNavigatorItem = (visGrid.diagram.navigator.VisGridAbstractNavigatorItem) element;
		return abstractNavigatorItem.getParent();
	}
	return null;
}
	
	/**
 * @generated
 */
public boolean hasChildren(Object element) {
	return element instanceof org.eclipse.core.resources.IFile || getChildren(element).length > 0;
}
    
    }
