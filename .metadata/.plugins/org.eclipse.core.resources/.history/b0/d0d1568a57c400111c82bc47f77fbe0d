package testvis.actions;

import http.Property;

import java.io.IOException;
import java.util.Collections;
import java.util.Vector;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceImpl;
import org.eclipse.jface.action.IAction;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.ui.IWorkbenchWindow;
import org.eclipse.ui.IWorkbenchWindowActionDelegate;
import org.eclipse.jface.dialogs.MessageDialog;

import dataTypes.Model;

import visGrid.*;

/**
 * Our sample action implements workbench action delegate.
 * The action proxy will be created by the workbench and
 * shown in the UI. When the user tries to use the action,
 * this delegate will be created and execution will be 
 * delegated to it.
 * @see IWorkbenchWindowActionDelegate
 */
public class SampleAction implements IWorkbenchWindowActionDelegate {
	private IWorkbenchWindow window;

	public SampleAction() {
	}

	/**
	 * The action has been activated. The argument of the
	 * method represents the 'real' action sitting
	 * in the workbench UI.
	 * @see IWorkbenchWindowActionDelegate#run
	 */
	public void run(IAction action) {
		try {
			VisGridFactory factory = VisGridFactory.eINSTANCE;
			Grid grid = factory.createGrid();

			Vector<Model> modules = Property.getModuleList();
			for (int i=0;i<modules.size();i++){
				String type = modules.get(i).getType();
				
				if (type.equals("Auction")) {
					Auction auction= factory.create Auction();
					grid.getConnections().add(Auction);
					}
					if (type.equals("Battery")) {
					Battery battery= factory.create Battery();
					grid.getConnections().add(Battery);
					}
					if (type.equals("Billdump")) {
					Billdump billdump= factory.create Billdump();
					grid.getConnections().add(Billdump);
					}
					if (type.equals("Capacitor")) {
					Capacitor capacitor= factory.create Capacitor();
					grid.getConnections().add(Capacitor);
					}
					if (type.equals("Capbank")) {
					Capbank capbank= factory.create Capbank();
					grid.getConnections().add(Capbank);
					}
					if (type.equals("Climate")) {
					Climate climate= factory.create Climate();
					grid.getConnections().add(Climate);
					}
					if (type.equals("Clotheswasher")) {
					Clotheswasher clotheswasher= factory.create Clotheswasher();
					grid.getConnections().add(Clotheswasher);
					}
					if (type.equals("Collector")) {
					Collector collector= factory.create Collector();
					grid.getConnections().add(Collector);
					}
					if (type.equals("Comm")) {
					Comm comm= factory.create Comm();
					grid.getConnections().add(Comm);
					}
					if (type.equals("Connection")) {
					Connection connection= factory.create Connection();
					grid.getConnections().add(Connection);
					}
					if (type.equals("Controller")) {
					Controller controller= factory.create Controller();
					grid.getConnections().add(Controller);
					}
					if (type.equals("Controller2")) {
					Controller2 controller2= factory.create Controller2();
					grid.getConnections().add(Controller2);
					}
					if (type.equals("Csv_reader")) {
					Csv_reader csv_reader= factory.create Csv_reader();
					grid.getConnections().add(Csv_reader);
					}
					if (type.equals("Dc_dc_converter")) {
					Dc_dc_converter dc_dc_converter= factory.create Dc_dc_converter();
					grid.getConnections().add(Dc_dc_converter);
					}
					if (type.equals("Diesel_dg")) {
					Diesel_dg diesel_dg= factory.create Diesel_dg();
					grid.getConnections().add(Diesel_dg);
					}
					if (type.equals("Dishwasher")) {
					Dishwasher dishwasher= factory.create Dishwasher();
					grid.getConnections().add(Dishwasher);
					}
					if (type.equals("Dryer")) {
					Dryer dryer= factory.create Dryer();
					grid.getConnections().add(Dryer);
					}
					if (type.equals("Energy_storage")) {
					Energy_storage energy_storage= factory.create Energy_storage();
					grid.getConnections().add(Energy_storage);
					}
					if (type.equals("Evcharger")) {
					Evcharger evcharger= factory.create Evcharger();
					grid.getConnections().add(Evcharger);
					}
					if (type.equals("Fault_check")) {
					Fault_check fault_check= factory.create Fault_check();
					grid.getConnections().add(Fault_check);
					}
					if (type.equals("Freezer")) {
					Freezer freezer= factory.create Freezer();
					grid.getConnections().add(Freezer);
					}
					if (type.equals("Frequency_gen")) {
					Frequency_gen frequency_gen= factory.create Frequency_gen();
					grid.getConnections().add(Frequency_gen);
					}
					if (type.equals("Fuse")) {
					Fuse fuse= factory.create Fuse();
					grid.getConnections().add(Fuse);
					}
					if (type.equals("Generator")) {
					Generator generator= factory.create Generator();
					grid.getConnections().add(Generator);
					}
					if (type.equals("Grid")) {
					Grid grid= factory.create Grid();
					grid.getConnections().add(Grid);
					}
					if (type.equals("Histogram")) {
					Histogram histogram= factory.create Histogram();
					grid.getConnections().add(Histogram);
					}
					if (type.equals("House_a")) {
					House_a house_a= factory.create House_a();
					grid.getConnections().add(House_a);
					}
					if (type.equals("House")) {
					House house= factory.create House();
					grid.getConnections().add(House);
					}
					if (type.equals("Inverter")) {
					Inverter inverter= factory.create Inverter();
					grid.getConnections().add(Inverter);
					}
					if (type.equals("Lights")) {
					Lights lights= factory.create Lights();
					grid.getConnections().add(Lights);
					}
					if (type.equals("Line_configuration")) {
					Line_configuration line_configuration= factory.create Line_configuration();
					grid.getConnections().add(Line_configuration);
					}
					if (type.equals("Line_spacing")) {
					Line_spacing line_spacing= factory.create Line_spacing();
					grid.getConnections().add(Line_spacing);
					}
					if (type.equals("Line")) {
					Line line= factory.create Line();
					grid.getConnections().add(Line);
					}
					if (type.equals("Link")) {
					Link link= factory.create Link();
					grid.getConnections().add(Link);
					}
					if (type.equals("Load")) {
					Load load= factory.create Load();
					grid.getConnections().add(Load);
					}
					if (type.equals("Meter")) {
					Meter meter= factory.create Meter();
					grid.getConnections().add(Meter);
					}
					if (type.equals("Microturbine")) {
					Microturbine microturbine= factory.create Microturbine();
					grid.getConnections().add(Microturbine);
					}
					if (type.equals("Microwave")) {
					Microwave microwave= factory.create Microwave();
					grid.getConnections().add(Microwave);
					}
					if (type.equals("Motor")) {
					Motor motor= factory.create Motor();
					grid.getConnections().add(Motor);
					}
					if (type.equals("Multizone")) {
					Multizone multizone= factory.create Multizone();
					grid.getConnections().add(Multizone);
					}
					if (type.equals("Node")) {
					Node node= factory.create Node();
					grid.getConnections().add(Node);
					}
					if (type.equals("Occupantload")) {
					Occupantload occupantload= factory.create Occupantload();
					grid.getConnections().add(Occupantload);
					}
					if (type.equals("Office")) {
					Office office= factory.create Office();
					grid.getConnections().add(Office);
					}
					if (type.equals("Overhead_line_conductor")) {
					Overhead_line_conductor overhead_line_conductor= factory.create Overhead_line_conductor();
					grid.getConnections().add(Overhead_line_conductor);
					}
					if (type.equals("Overhead_line")) {
					Overhead_line overhead_line= factory.create Overhead_line();
					grid.getConnections().add(Overhead_line);
					}
					if (type.equals("Player")) {
					Player player= factory.create Player();
					grid.getConnections().add(Player);
					}
					if (type.equals("Plc")) {
					Plc plc= factory.create Plc();
					grid.getConnections().add(Plc);
					}
					if (type.equals("Plugload")) {
					Plugload plugload= factory.create Plugload();
					grid.getConnections().add(Plugload);
					}
					if (type.equals("Power_electronics")) {
					Power_electronics power_electronics= factory.create Power_electronics();
					grid.getConnections().add(Power_electronics);
					}
					if (type.equals("Pqload")) {
					Pqload pqload= factory.create Pqload();
					grid.getConnections().add(Pqload);
					}
					if (type.equals("Range")) {
					Range range= factory.create Range();
					grid.getConnections().add(Range);
					}
					if (type.equals("Recorder")) {
					Recorder recorder= factory.create Recorder();
					grid.getConnections().add(Recorder);
					}
					if (type.equals("Rectifier")) {
					Rectifier rectifier= factory.create Rectifier();
					grid.getConnections().add(Rectifier);
					}
					if (type.equals("Refrigerator")) {
					Refrigerator refrigerator= factory.create Refrigerator();
					grid.getConnections().add(Refrigerator);
					}
					if (type.equals("Regulator_configuration")) {
					Regulator_configuration regulator_configuration= factory.create Regulator_configuration();
					grid.getConnections().add(Regulator_configuration);
					}
					if (type.equals("Regulator")) {
					Regulator regulator= factory.create Regulator();
					grid.getConnections().add(Regulator);
					}
					if (type.equals("Relay")) {
					Relay relay= factory.create Relay();
					grid.getConnections().add(Relay);
					}
					if (type.equals("Residential_enduse")) {
					Residential_enduse residential_enduse= factory.create Residential_enduse();
					grid.getConnections().add(Residential_enduse);
					}
					if (type.equals("Restoration")) {
					Restoration restoration= factory.create Restoration();
					grid.getConnections().add(Restoration);
					}
					if (type.equals("Series_reactor")) {
					Series_reactor series_reactor= factory.create Series_reactor();
					grid.getConnections().add(Series_reactor);
					}
					if (type.equals("Shaper")) {
					Shaper shaper= factory.create Shaper();
					grid.getConnections().add(Shaper);
					}
					if (type.equals("Solar")) {
					Solar solar= factory.create Solar();
					grid.getConnections().add(Solar);
					}
					if (type.equals("Stubauction")) {
					Stubauction stubauction= factory.create Stubauction();
					grid.getConnections().add(Stubauction);
					}
					if (type.equals("Substation")) {
					Substation substation= factory.create Substation();
					grid.getConnections().add(Substation);
					}
					if (type.equals("Switch")) {
					Switch switch= factory.create Switch();
					grid.getConnections().add(Switch);
					}
					if (type.equals("Transformer_configuration")) {
					Transformer_configuration transformer_configuration= factory.create Transformer_configuration();
					grid.getConnections().add(Transformer_configuration);
					}
					if (type.equals("Transformer")) {
					Transformer transformer= factory.create Transformer();
					grid.getConnections().add(Transformer);
					}
					if (type.equals("Triplex_line_conductor")) {
					Triplex_line_conductor triplex_line_conductor= factory.create Triplex_line_conductor();
					grid.getConnections().add(Triplex_line_conductor);
					}
					if (type.equals("Triplex_line_configuration")) {
					Triplex_line_configuration triplex_line_configuration= factory.create Triplex_line_configuration();
					grid.getConnections().add(Triplex_line_configuration);
					}
					if (type.equals("Triplex_line")) {
					Triplex_line triplex_line= factory.create Triplex_line();
					grid.getConnections().add(Triplex_line);
					}
					if (type.equals("Triplex_meter")) {
					Triplex_meter triplex_meter= factory.create Triplex_meter();
					grid.getConnections().add(Triplex_meter);
					}
					if (type.equals("Triplex_node")) {
					Triplex_node triplex_node= factory.create Triplex_node();
					grid.getConnections().add(Triplex_node);
					}
					if (type.equals("Underground_line_conductor")) {
					Underground_line_conductor underground_line_conductor= factory.create Underground_line_conductor();
					grid.getConnections().add(Underground_line_conductor);
					}
					if (type.equals("Underground_line")) {
					Underground_line underground_line= factory.create Underground_line();
					grid.getConnections().add(Underground_line);
					}
					if (type.equals("VisGridFactory")) {
					VisGridFactory visgridfactory= factory.create VisGridFactory();
					grid.getConnections().add(VisGridFactory);
					}
					if (type.equals("VisGridPackage")) {
					VisGridPackage visgridpackage= factory.create VisGridPackage();
					grid.getConnections().add(VisGridPackage);
					}
					if (type.equals("Volt_var_control")) {
					Volt_var_control volt_var_control= factory.create Volt_var_control();
					grid.getConnections().add(Volt_var_control);
					}
					if (type.equals("Voltdump")) {
					Voltdump voltdump= factory.create Voltdump();
					grid.getConnections().add(Voltdump);
					}
					if (type.equals("Waterheater")) {
					Waterheater waterheater= factory.create Waterheater();
					grid.getConnections().add(Waterheater);
					}
					if (type.equals("Weather")) {
					Weather weather= factory.create Weather();
					grid.getConnections().add(Weather);
					}
					if (type.equals("Windturb_dg")) {
					Windturb_dg windturb_dg= factory.create Windturb_dg();
					grid.getConnections().add(Windturb_dg);
					}
					if (type.equals("ZIPload")) {
					ZIPload zipload= factory.create ZIPload();
					grid.getConnections().add(ZIPload);
					}

				
			}

			Climate climate = factory.createClimate();
			grid.getConnections().add(climate);

			Resource resource = new XMIResourceImpl();
			URI uri = URI.createPlatformResourceURI("exampleplugin/example.visgrid");
			resource.setURI(uri);
			resource.getContents().add(grid);
			resource.save(Collections.EMPTY_MAP);
		} catch (IOException e) {
			e.printStackTrace();
		}

		MessageDialog.openInformation(
				window.getShell(),
				"TestVis",
				"Hello, Eclipse world");
	}

	/**
	 * Selection in the workbench has been changed. We 
	 * can change the state of the 'real' action here
	 * if we want, but this can only happen after 
	 * the delegate has been created.
	 * @see IWorkbenchWindowActionDelegate#selectionChanged
	 */
	public void selectionChanged(IAction action, ISelection selection) {
	}

	/**
	 * We can use this method to dispose of any system
	 * resources we previously allocated.
	 * @see IWorkbenchWindowActionDelegate#dispose
	 */
	public void dispose() {
	}

	/**
	 * We will cache window object in order to
	 * be able to provide parent shell for the message dialog.
	 * @see IWorkbenchWindowActionDelegate#init
	 */
	public void init(IWorkbenchWindow window) {
		this.window = window;
	}
}