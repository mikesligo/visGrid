package visGrid.diagram.edit.parts;

/**
 * @generated
 */
public class PlugloadEditPart extends org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeNodeEditPart  {

			/**
 * @generated
 */
	public static final int VISUAL_ID = 2031;

	/**
 * @generated
 */
	protected org.eclipse.draw2d.IFigure contentPane;

	/**
 * @generated
 */
	protected org.eclipse.draw2d.IFigure primaryShape;
	
		/**
 * @generated
 */
	public PlugloadEditPart(org.eclipse.gmf.runtime.notation.View view) {
		super(view);
	}
	
		/**
 * @generated
 */
	protected void createDefaultEditPolicies() {
				super.createDefaultEditPolicies();
			installEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.SEMANTIC_ROLE, new visGrid.diagram.edit.policies.PlugloadItemSemanticEditPolicy());
						installEditPolicy(org.eclipse.gef.EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy());
			// XXX need an SCR to runtime to have another abstract superclass that would let children add reasonable editpolicies
	// removeEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.CONNECTION_HANDLES_ROLE);
	}
	
		/**
 * @generated
 */
	protected org.eclipse.gef.editpolicies.LayoutEditPolicy createLayoutEditPolicy() {
			
		org.eclipse.gmf.runtime.diagram.ui.editpolicies.FlowLayoutEditPolicy lep = new org.eclipse.gmf.runtime.diagram.ui.editpolicies.FlowLayoutEditPolicy() {
			
			protected org.eclipse.gef.commands.Command createAddCommand(org.eclipse.gef.EditPart child, org.eclipse.gef.EditPart after) {
				return null;
			}

			protected org.eclipse.gef.commands.Command createMoveChildCommand(org.eclipse.gef.EditPart child, org.eclipse.gef.EditPart after) {
				return null;
			}

			protected org.eclipse.gef.commands.Command getCreateCommand(org.eclipse.gef.requests.CreateRequest request) {
				return null;
			}
		};
		return lep;
		}
	
		/**
 * @generated
 */
	protected org.eclipse.draw2d.IFigure createNodeShape() {
		return primaryShape = new PlugloadFigure();
	}

		/**
 * @generated
 */
	public PlugloadFigure getPrimaryShape() {
		return (PlugloadFigure) primaryShape;
	}
	
		/**
 * @generated
 */
	protected boolean addFixedChild(org.eclipse.gef.EditPart childEditPart) {
		if (childEditPart instanceof visGrid.diagram.edit.parts.PlugloadNameEditPart) {
			((visGrid.diagram.edit.parts.PlugloadNameEditPart) childEditPart).setLabel(getPrimaryShape().getFigurePlugloadNameFigure());
			return true;
		}
		return false;
	}

		/**
 * @generated
 */
	protected boolean removeFixedChild(org.eclipse.gef.EditPart childEditPart) {
		if (childEditPart instanceof visGrid.diagram.edit.parts.PlugloadNameEditPart) {
			return true;
		}
		return false;
	}

		/**
 * @generated
 */
	protected void addChildVisual(org.eclipse.gef.EditPart childEditPart, int index) {
		if (addFixedChild(childEditPart)) {
			return;
		}
		super.addChildVisual(childEditPart, -1);
	}

		/**
 * @generated
 */
	protected void removeChildVisual(org.eclipse.gef.EditPart childEditPart) {
		if (removeFixedChild(childEditPart)){
			return;
		}
		super.removeChildVisual(childEditPart);
	}

		/**
 * @generated
 */
	protected org.eclipse.draw2d.IFigure getContentPaneFor(org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart editPart) {
				return getContentPane();
	}

			
		/**
 * @generated
 */
	protected org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure createNodePlate() {
		org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure result = new org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure(40, 40);
				return result;
	}
	
						
		/**
 * Creates figure for this edit part.
 * 
 * Body of this method does not depend on settings in generation model
 * so you may safely remove <i>generated</i> tag and modify it.
 * 
 * @generated
 */
	protected org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure createNodeFigure() {
		org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure figure = createNodePlate();
		figure.setLayoutManager(new org.eclipse.draw2d.StackLayout());
		org.eclipse.draw2d.IFigure shape = createNodeShape();
		figure.add(shape);
		contentPane = setupContentPane(shape);
		return figure;
	}
	
		/**
 * Default implementation treats passed figure as content pane.
 * Respects layout one may have set for generated figure.
 * @param nodeShape instance of generated figure class
 * @generated
 */
	protected org.eclipse.draw2d.IFigure setupContentPane(org.eclipse.draw2d.IFigure nodeShape) {
					if (nodeShape.getLayoutManager() == null) {
									org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout layout =new org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout();
					layout.setSpacing(5);
					nodeShape.setLayoutManager(layout);
							}
				return nodeShape; // use nodeShape itself as contentPane
	}
	
		/**
 * @generated
 */
	public org.eclipse.draw2d.IFigure getContentPane() {
		if (contentPane != null) {
			return contentPane;
		}
		return super.getContentPane();
	}

		/**
 * @generated
 */
	protected void setForegroundColor(org.eclipse.swt.graphics.Color color) {
		if (primaryShape != null) {
			primaryShape.setForegroundColor(color);
		}
	}

		/**
 * @generated
 */
	protected void setBackgroundColor(org.eclipse.swt.graphics.Color color) {
		if (primaryShape != null) {
			primaryShape.setBackgroundColor(color);
		}
	}

		/**
 * @generated
 */
	protected void setLineWidth(int width) {
		if (primaryShape instanceof org.eclipse.draw2d.Shape) {
			((org.eclipse.draw2d.Shape) primaryShape).setLineWidth(width);
		}
	}

		/**
 * @generated
 */
	protected void setLineType(int style) {
		if (primaryShape instanceof org.eclipse.draw2d.Shape) {
			((org.eclipse.draw2d.Shape) primaryShape).setLineStyle(style);
		}
	}

				/**
 * @generated
 */
		public org.eclipse.gef.EditPart getPrimaryChildEditPart() {
			return getChildBySemanticHint(visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.PlugloadNameEditPart.VISUAL_ID));
		}
	
		/**
 * @generated
 */
	public java.util.List<org.eclipse.gmf.runtime.emf.type.core.IElementType> getMARelTypesOnSource() {
		java.util.ArrayList<org.eclipse.gmf.runtime.emf.type.core.IElementType> types = new java.util.ArrayList<org.eclipse.gmf.runtime.emf.type.core.IElementType>(1);
				types.add(visGrid.diagram.providers.VisGridElementTypes.PlugloadConnection_4032);
				return types;
	}

		/**
 * @generated
 */
	public java.util.List<org.eclipse.gmf.runtime.emf.type.core.IElementType> getMARelTypesOnSourceAndTarget(org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart targetEditPart) {
		java.util.LinkedList<org.eclipse.gmf.runtime.emf.type.core.IElementType> types = new java.util.LinkedList<org.eclipse.gmf.runtime.emf.type.core.IElementType>();
							if (targetEditPart instanceof visGrid.diagram.edit.parts.ConnectionsEditPart) {
			types.add(visGrid.diagram.providers.VisGridElementTypes.PlugloadConnection_4032);
		}
							return types;
	}

		/**
 * @generated
 */
	public java.util.List<org.eclipse.gmf.runtime.emf.type.core.IElementType> getMATypesForTarget(org.eclipse.gmf.runtime.emf.type.core.IElementType relationshipType) {
		java.util.LinkedList<org.eclipse.gmf.runtime.emf.type.core.IElementType> types = new java.util.LinkedList<org.eclipse.gmf.runtime.emf.type.core.IElementType>();
				if (relationshipType == visGrid.diagram.providers.VisGridElementTypes.PlugloadConnection_4032) {
						types.add(visGrid.diagram.providers.VisGridElementTypes.Connections_2077);
					}
				return types;
	}

		/**
 * @generated
 */
	public java.util.List<org.eclipse.gmf.runtime.emf.type.core.IElementType> getMARelTypesOnTarget() {
		java.util.ArrayList<org.eclipse.gmf.runtime.emf.type.core.IElementType> types = new java.util.ArrayList<org.eclipse.gmf.runtime.emf.type.core.IElementType>(1);
				types.add(visGrid.diagram.providers.VisGridElementTypes.ConnectionsPlugload_4104);
				return types;
	}

		/**
 * @generated
 */
	public java.util.List<org.eclipse.gmf.runtime.emf.type.core.IElementType> getMATypesForSource(org.eclipse.gmf.runtime.emf.type.core.IElementType relationshipType) {
		java.util.LinkedList<org.eclipse.gmf.runtime.emf.type.core.IElementType> types = new java.util.LinkedList<org.eclipse.gmf.runtime.emf.type.core.IElementType>();
				if (relationshipType == visGrid.diagram.providers.VisGridElementTypes.ConnectionsPlugload_4104) {
						types.add(visGrid.diagram.providers.VisGridElementTypes.Connections_2077);
					}
				return types;
	}


		
	
	
	
/**
 * @generated
 */
public class PlugloadFigure extends org.eclipse.draw2d.RectangleFigure {


	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigurePlugloadNameFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigurePlugloadCircuit_splitFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigurePlugloadDemandFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigurePlugloadInstalled_powerFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigurePlugloadShapeFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigurePlugloadLoadFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigurePlugloadEnergyFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigurePlugloadPowerFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigurePlugloadPeak_demandFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigurePlugloadHeatgainFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigurePlugloadHeatgain_fractionFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigurePlugloadCurrent_fractionFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigurePlugloadImpedance_fractionFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigurePlugloadPower_fractionFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigurePlugloadPower_factorFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigurePlugloadConstant_powerFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigurePlugloadConstant_currentFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigurePlugloadConstant_admittanceFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigurePlugloadVoltage_factorFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigurePlugloadConfigurationFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigurePlugloadOverrideFigure; 


	/**
	 * @generated
	 */
	public PlugloadFigure() {
		
	org.eclipse.draw2d.FlowLayout layoutThis = new org.eclipse.draw2d.FlowLayout();
	layoutThis.setStretchMinorAxis(false);
	layoutThis.setMinorAlignment(org.eclipse.draw2d.FlowLayout.ALIGN_LEFTTOP
);

	layoutThis.setMajorAlignment(org.eclipse.draw2d.FlowLayout.ALIGN_LEFTTOP
);
	layoutThis.setMajorSpacing(5);
	layoutThis.setMinorSpacing(5);
	layoutThis.setHorizontal(true);

	this.setLayoutManager(layoutThis);

				createContents();
	}
	/**
	 * @generated
	 */
	private void createContents(){


fFigurePlugloadNameFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigurePlugloadNameFigure.setText("<...>");

this.add(fFigurePlugloadNameFigure);



fFigurePlugloadCircuit_splitFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigurePlugloadCircuit_splitFigure.setText("<...>");

this.add(fFigurePlugloadCircuit_splitFigure);



fFigurePlugloadDemandFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigurePlugloadDemandFigure.setText("<...>");

this.add(fFigurePlugloadDemandFigure);



fFigurePlugloadInstalled_powerFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigurePlugloadInstalled_powerFigure.setText("<...>");

this.add(fFigurePlugloadInstalled_powerFigure);



fFigurePlugloadShapeFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigurePlugloadShapeFigure.setText("<...>");

this.add(fFigurePlugloadShapeFigure);



fFigurePlugloadLoadFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigurePlugloadLoadFigure.setText("<...>");

this.add(fFigurePlugloadLoadFigure);



fFigurePlugloadEnergyFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigurePlugloadEnergyFigure.setText("<...>");

this.add(fFigurePlugloadEnergyFigure);



fFigurePlugloadPowerFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigurePlugloadPowerFigure.setText("<...>");

this.add(fFigurePlugloadPowerFigure);



fFigurePlugloadPeak_demandFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigurePlugloadPeak_demandFigure.setText("<...>");

this.add(fFigurePlugloadPeak_demandFigure);



fFigurePlugloadHeatgainFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigurePlugloadHeatgainFigure.setText("<...>");

this.add(fFigurePlugloadHeatgainFigure);



fFigurePlugloadHeatgain_fractionFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigurePlugloadHeatgain_fractionFigure.setText("<...>");

this.add(fFigurePlugloadHeatgain_fractionFigure);



fFigurePlugloadCurrent_fractionFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigurePlugloadCurrent_fractionFigure.setText("<...>");

this.add(fFigurePlugloadCurrent_fractionFigure);



fFigurePlugloadImpedance_fractionFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigurePlugloadImpedance_fractionFigure.setText("<...>");

this.add(fFigurePlugloadImpedance_fractionFigure);



fFigurePlugloadPower_fractionFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigurePlugloadPower_fractionFigure.setText("<...>");

this.add(fFigurePlugloadPower_fractionFigure);



fFigurePlugloadPower_factorFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigurePlugloadPower_factorFigure.setText("<...>");

this.add(fFigurePlugloadPower_factorFigure);



fFigurePlugloadConstant_powerFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigurePlugloadConstant_powerFigure.setText("<...>");

this.add(fFigurePlugloadConstant_powerFigure);



fFigurePlugloadConstant_currentFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigurePlugloadConstant_currentFigure.setText("<...>");

this.add(fFigurePlugloadConstant_currentFigure);



fFigurePlugloadConstant_admittanceFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigurePlugloadConstant_admittanceFigure.setText("<...>");

this.add(fFigurePlugloadConstant_admittanceFigure);



fFigurePlugloadVoltage_factorFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigurePlugloadVoltage_factorFigure.setText("<...>");

this.add(fFigurePlugloadVoltage_factorFigure);



fFigurePlugloadConfigurationFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigurePlugloadConfigurationFigure.setText("<...>");

this.add(fFigurePlugloadConfigurationFigure);



fFigurePlugloadOverrideFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigurePlugloadOverrideFigure.setText("<...>");

this.add(fFigurePlugloadOverrideFigure);


	}





	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigurePlugloadNameFigure() {
		return fFigurePlugloadNameFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigurePlugloadCircuit_splitFigure() {
		return fFigurePlugloadCircuit_splitFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigurePlugloadDemandFigure() {
		return fFigurePlugloadDemandFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigurePlugloadInstalled_powerFigure() {
		return fFigurePlugloadInstalled_powerFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigurePlugloadShapeFigure() {
		return fFigurePlugloadShapeFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigurePlugloadLoadFigure() {
		return fFigurePlugloadLoadFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigurePlugloadEnergyFigure() {
		return fFigurePlugloadEnergyFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigurePlugloadPowerFigure() {
		return fFigurePlugloadPowerFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigurePlugloadPeak_demandFigure() {
		return fFigurePlugloadPeak_demandFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigurePlugloadHeatgainFigure() {
		return fFigurePlugloadHeatgainFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigurePlugloadHeatgain_fractionFigure() {
		return fFigurePlugloadHeatgain_fractionFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigurePlugloadCurrent_fractionFigure() {
		return fFigurePlugloadCurrent_fractionFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigurePlugloadImpedance_fractionFigure() {
		return fFigurePlugloadImpedance_fractionFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigurePlugloadPower_fractionFigure() {
		return fFigurePlugloadPower_fractionFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigurePlugloadPower_factorFigure() {
		return fFigurePlugloadPower_factorFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigurePlugloadConstant_powerFigure() {
		return fFigurePlugloadConstant_powerFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigurePlugloadConstant_currentFigure() {
		return fFigurePlugloadConstant_currentFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigurePlugloadConstant_admittanceFigure() {
		return fFigurePlugloadConstant_admittanceFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigurePlugloadVoltage_factorFigure() {
		return fFigurePlugloadVoltage_factorFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigurePlugloadConfigurationFigure() {
		return fFigurePlugloadConfigurationFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigurePlugloadOverrideFigure() {
		return fFigurePlugloadOverrideFigure;
	}


}


	
	}
