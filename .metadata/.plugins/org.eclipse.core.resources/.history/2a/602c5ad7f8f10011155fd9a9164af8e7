<HTML>
<BODY BGCOLOR="white">
<PRE>
<FONT color="green">001</FONT>    package org.LiveGraph.dataCache;<a name="line.1"></a>
<FONT color="green">002</FONT>    <a name="line.2"></a>
<FONT color="green">003</FONT>    import java.io.Closeable;<a name="line.3"></a>
<FONT color="green">004</FONT>    import java.io.IOException;<a name="line.4"></a>
<FONT color="green">005</FONT>    import java.io.InputStream;<a name="line.5"></a>
<FONT color="green">006</FONT>    import java.util.List;<a name="line.6"></a>
<FONT color="green">007</FONT>    <a name="line.7"></a>
<FONT color="green">008</FONT>    import org.LiveGraph.dataFile.common.DataFormatException;<a name="line.8"></a>
<FONT color="green">009</FONT>    import org.LiveGraph.dataFile.read.DataStreamObserver;<a name="line.9"></a>
<FONT color="green">010</FONT>    import org.LiveGraph.dataFile.read.DataStreamReader;<a name="line.10"></a>
<FONT color="green">011</FONT>    <a name="line.11"></a>
<FONT color="green">012</FONT>    <a name="line.12"></a>
<FONT color="green">013</FONT>    /**<a name="line.13"></a>
<FONT color="green">014</FONT>     * This reader will parse a data stream using {@link DataStreamReader} and store all<a name="line.14"></a>
<FONT color="green">015</FONT>     * information in a data cache for further processing by the application.&lt;br /&gt;<a name="line.15"></a>
<FONT color="green">016</FONT>     * &lt;br /&gt;<a name="line.16"></a>
<FONT color="green">017</FONT>     * See {@link org.LiveGraph.dataFile.write.DataStreamWriter} for the details of the data file format. <a name="line.17"></a>
<FONT color="green">018</FONT>     * <a name="line.18"></a>
<FONT color="green">019</FONT>     * &lt;p style="font-size:smaller;"&gt;This product includes software developed by the<a name="line.19"></a>
<FONT color="green">020</FONT>     *    &lt;strong&gt;LiveGraph&lt;/strong&gt; project and its contributors.&lt;br /&gt;<a name="line.20"></a>
<FONT color="green">021</FONT>     *    (&lt;a href="http://www.live-graph.org" target="_blank"&gt;http://www.live-graph.org&lt;/a&gt;)&lt;br /&gt;<a name="line.21"></a>
<FONT color="green">022</FONT>     *    Copyright (c) 2007 G. Paperin.&lt;br /&gt;<a name="line.22"></a>
<FONT color="green">023</FONT>     *    All rights reserved.<a name="line.23"></a>
<FONT color="green">024</FONT>     * &lt;/p&gt;<a name="line.24"></a>
<FONT color="green">025</FONT>     * &lt;p style="font-size:smaller;"&gt;File: DataStreamToCacheReader.java&lt;/p&gt; <a name="line.25"></a>
<FONT color="green">026</FONT>     * &lt;p style="font-size:smaller;"&gt;Redistribution and use in source and binary forms, with or<a name="line.26"></a>
<FONT color="green">027</FONT>     *    without modification, are permitted provided that the following terms and conditions are met:<a name="line.27"></a>
<FONT color="green">028</FONT>     * &lt;/p&gt;<a name="line.28"></a>
<FONT color="green">029</FONT>     * &lt;p style="font-size:smaller;"&gt;1. Redistributions of source code must retain the above<a name="line.29"></a>
<FONT color="green">030</FONT>     *    acknowledgement of the LiveGraph project and its web-site, the above copyright notice,<a name="line.30"></a>
<FONT color="green">031</FONT>     *    this list of conditions and the following disclaimer.&lt;br /&gt;<a name="line.31"></a>
<FONT color="green">032</FONT>     *    2. Redistributions in binary form must reproduce the above acknowledgement of the<a name="line.32"></a>
<FONT color="green">033</FONT>     *    LiveGraph project and its web-site, the above copyright notice, this list of conditions<a name="line.33"></a>
<FONT color="green">034</FONT>     *    and the following disclaimer in the documentation and/or other materials provided with<a name="line.34"></a>
<FONT color="green">035</FONT>     *    the distribution.&lt;br /&gt;<a name="line.35"></a>
<FONT color="green">036</FONT>     *    3. All advertising materials mentioning features or use of this software or any derived<a name="line.36"></a>
<FONT color="green">037</FONT>     *    software must display the following acknowledgement:&lt;br /&gt;<a name="line.37"></a>
<FONT color="green">038</FONT>     *    &lt;em&gt;This product includes software developed by the LiveGraph project and its<a name="line.38"></a>
<FONT color="green">039</FONT>     *    contributors.&lt;br /&gt;(http://www.live-graph.org)&lt;/em&gt;&lt;br /&gt;<a name="line.39"></a>
<FONT color="green">040</FONT>     *    4. All advertising materials distributed in form of HTML pages or any other technology<a name="line.40"></a>
<FONT color="green">041</FONT>     *    permitting active hyper-links that mention features or use of this software or any<a name="line.41"></a>
<FONT color="green">042</FONT>     *    derived software must display the acknowledgment specified in condition 3 of this<a name="line.42"></a>
<FONT color="green">043</FONT>     *    agreement, and in addition, include a visible and working hyper-link to the LiveGraph<a name="line.43"></a>
<FONT color="green">044</FONT>     *    homepage (http://www.live-graph.org).<a name="line.44"></a>
<FONT color="green">045</FONT>     * &lt;/p&gt;<a name="line.45"></a>
<FONT color="green">046</FONT>     * &lt;p style="font-size:smaller;"&gt;THIS SOFTWARE IS PROVIDED &amp;quot;AS IS&amp;quot;, WITHOUT WARRANTY<a name="line.46"></a>
<FONT color="green">047</FONT>     *    OF ANY KIND, EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF<a name="line.47"></a>
<FONT color="green">048</FONT>     *    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  NONINFRINGEMENT. IN NO EVENT SHALL<a name="line.48"></a>
<FONT color="green">049</FONT>     *    THE AUTHORS, CONTRIBUTORS OR COPYRIGHT  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER<a name="line.49"></a>
<FONT color="green">050</FONT>     *    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING  FROM, OUT OF OR<a name="line.50"></a>
<FONT color="green">051</FONT>     *    IN CONNECTION WITH THE SOFTWARE OR THE USE OR  OTHER DEALINGS IN THE SOFTWARE.<a name="line.51"></a>
<FONT color="green">052</FONT>     * &lt;/p&gt;<a name="line.52"></a>
<FONT color="green">053</FONT>     * <a name="line.53"></a>
<FONT color="green">054</FONT>     * @author Greg Paperin (&lt;a href="http://www.paperin.org" target="_blank"&gt;http://www.paperin.org&lt;/a&gt;)<a name="line.54"></a>
<FONT color="green">055</FONT>     * @version {@value org.LiveGraph.LiveGraph#version}<a name="line.55"></a>
<FONT color="green">056</FONT>     */<a name="line.56"></a>
<FONT color="green">057</FONT>    public class DataStreamToCacheReader implements Closeable, DataStreamObserver {<a name="line.57"></a>
<FONT color="green">058</FONT>    <a name="line.58"></a>
<FONT color="green">059</FONT>    /**<a name="line.59"></a>
<FONT color="green">060</FONT>     * Data stream reader.<a name="line.60"></a>
<FONT color="green">061</FONT>     */<a name="line.61"></a>
<FONT color="green">062</FONT>    private DataStreamReader in = null;<a name="line.62"></a>
<FONT color="green">063</FONT>    <a name="line.63"></a>
<FONT color="green">064</FONT>    /**<a name="line.64"></a>
<FONT color="green">065</FONT>     * Cache for storage of extracted data.<a name="line.65"></a>
<FONT color="green">066</FONT>     */<a name="line.66"></a>
<FONT color="green">067</FONT>    private DataCache cache = null;<a name="line.67"></a>
<FONT color="green">068</FONT>    <a name="line.68"></a>
<FONT color="green">069</FONT>    /**<a name="line.69"></a>
<FONT color="green">070</FONT>     * Creates a data reader on the specified stream.<a name="line.70"></a>
<FONT color="green">071</FONT>     * <a name="line.71"></a>
<FONT color="green">072</FONT>     * @param is The stream from which to read.<a name="line.72"></a>
<FONT color="green">073</FONT>     * @param cache The data cache into which to store the data. <a name="line.73"></a>
<FONT color="green">074</FONT>     */<a name="line.74"></a>
<FONT color="green">075</FONT>    public DataStreamToCacheReader(InputStream is, DataCache cache) {<a name="line.75"></a>
<FONT color="green">076</FONT>            <a name="line.76"></a>
<FONT color="green">077</FONT>            if (null == cache)<a name="line.77"></a>
<FONT color="green">078</FONT>                    throw new NullPointerException("Cannot use a null cache.");<a name="line.78"></a>
<FONT color="green">079</FONT>            <a name="line.79"></a>
<FONT color="green">080</FONT>            this.in = new DataStreamReader(is, this);       <a name="line.80"></a>
<FONT color="green">081</FONT>            this.cache = cache;     <a name="line.81"></a>
<FONT color="green">082</FONT>    }<a name="line.82"></a>
<FONT color="green">083</FONT>    <a name="line.83"></a>
<FONT color="green">084</FONT>    /**<a name="line.84"></a>
<FONT color="green">085</FONT>     * @return The data cache used by this reader.<a name="line.85"></a>
<FONT color="green">086</FONT>     */<a name="line.86"></a>
<FONT color="green">087</FONT>    public DataCache getDataCache() {<a name="line.87"></a>
<FONT color="green">088</FONT>            return cache;<a name="line.88"></a>
<FONT color="green">089</FONT>    }<a name="line.89"></a>
<FONT color="green">090</FONT>    <a name="line.90"></a>
<FONT color="green">091</FONT>    /**<a name="line.91"></a>
<FONT color="green">092</FONT>     * Tells whether this reader's underlying data stream is ready to be read.<a name="line.92"></a>
<FONT color="green">093</FONT>     * <a name="line.93"></a>
<FONT color="green">094</FONT>     * @return {@code true} if the next {@code readFromStream()} is guaranteed not to block for input,<a name="line.94"></a>
<FONT color="green">095</FONT>     * {@code false} otherwise. Note that returning {@code false} does not guarantee that the next read will block.<a name="line.95"></a>
<FONT color="green">096</FONT>     * @throws IOException If an I/O error occurs.<a name="line.96"></a>
<FONT color="green">097</FONT>     */<a name="line.97"></a>
<FONT color="green">098</FONT>    public boolean ready() throws IOException {<a name="line.98"></a>
<FONT color="green">099</FONT>            return in.ready();<a name="line.99"></a>
<FONT color="green">100</FONT>    }<a name="line.100"></a>
<FONT color="green">101</FONT>    <a name="line.101"></a>
<FONT color="green">102</FONT>    /**<a name="line.102"></a>
<FONT color="green">103</FONT>     * Closes the underlying data stream. Further reading is not possible after calling this method.<a name="line.103"></a>
<FONT color="green">104</FONT>     * @throws IOException If an I/O error occurs.<a name="line.104"></a>
<FONT color="green">105</FONT>     */<a name="line.105"></a>
<FONT color="green">106</FONT>    public void close() throws IOException {<a name="line.106"></a>
<FONT color="green">107</FONT>            in.close();<a name="line.107"></a>
<FONT color="green">108</FONT>    }<a name="line.108"></a>
<FONT color="green">109</FONT>    <a name="line.109"></a>
<FONT color="green">110</FONT>    /**<a name="line.110"></a>
<FONT color="green">111</FONT>     * Reads as many data lines from the underlying stream as there are available, parses the lines and<a name="line.111"></a>
<FONT color="green">112</FONT>     * stores the extracted information (if any) in this reader's data cache.<a name="line.112"></a>
<FONT color="green">113</FONT>     *  <a name="line.113"></a>
<FONT color="green">114</FONT>     * @return number of non-empty file lines read.<a name="line.114"></a>
<FONT color="green">115</FONT>     * @throws IOException If an I/O error occurs.<a name="line.115"></a>
<FONT color="green">116</FONT>     * @throws DataFormatException If the data stream contents do not conform with the expected data<a name="line.116"></a>
<FONT color="green">117</FONT>     * stream format.<a name="line.117"></a>
<FONT color="green">118</FONT>     * @see org.LiveGraph.dataFile.write.DataStreamWriter<a name="line.118"></a>
<FONT color="green">119</FONT>     * @see org.LiveGraph.dataFile.read.DataStreamReader<a name="line.119"></a>
<FONT color="green">120</FONT>     */<a name="line.120"></a>
<FONT color="green">121</FONT>    public int readFromStream() throws IOException, DataFormatException {<a name="line.121"></a>
<FONT color="green">122</FONT>            <a name="line.122"></a>
<FONT color="green">123</FONT>            int lines = in.readFromStream();<a name="line.123"></a>
<FONT color="green">124</FONT>            return lines;   <a name="line.124"></a>
<FONT color="green">125</FONT>    }<a name="line.125"></a>
<FONT color="green">126</FONT>    <a name="line.126"></a>
<FONT color="green">127</FONT>    /**<a name="line.127"></a>
<FONT color="green">128</FONT>     * Used for callback by the {@link DataStreamReader}; does nothing.<a name="line.128"></a>
<FONT color="green">129</FONT>     */<a name="line.129"></a>
<FONT color="green">130</FONT>    public void eventCommentLine(String line, DataStreamReader reader) {<a name="line.130"></a>
<FONT color="green">131</FONT>            ; // No action required.        <a name="line.131"></a>
<FONT color="green">132</FONT>    }<a name="line.132"></a>
<FONT color="green">133</FONT>    <a name="line.133"></a>
<FONT color="green">134</FONT>    /**<a name="line.134"></a>
<FONT color="green">135</FONT>     * Used for callback by the {@link DataStreamReader}; adds a dataset to the cache.<a name="line.135"></a>
<FONT color="green">136</FONT>     */<a name="line.136"></a>
<FONT color="green">137</FONT>    public void eventDataLineRead(List&lt;String&gt; dataTokens, int datasetIndex, DataStreamReader reader) {<a name="line.137"></a>
<FONT color="green">138</FONT>            <a name="line.138"></a>
<FONT color="green">139</FONT>            List&lt;Double&gt; vals = DataStreamReader.convertTokensToDoubles(dataTokens);<a name="line.139"></a>
<FONT color="green">140</FONT>            DataSet ds = new DataSet(vals, datasetIndex);<a name="line.140"></a>
<FONT color="green">141</FONT>            cache.addDataSet(ds);   <a name="line.141"></a>
<FONT color="green">142</FONT>    }<a name="line.142"></a>
<FONT color="green">143</FONT>    <a name="line.143"></a>
<FONT color="green">144</FONT>    /**<a name="line.144"></a>
<FONT color="green">145</FONT>     * Used for callback by the {@link DataStreamReader}; adds a file info line to the cache.<a name="line.145"></a>
<FONT color="green">146</FONT>     */<a name="line.146"></a>
<FONT color="green">147</FONT>    public void eventFileInfoLine(String info, DataStreamReader reader) {<a name="line.147"></a>
<FONT color="green">148</FONT>            cache.addDataFileInfo(info);    <a name="line.148"></a>
<FONT color="green">149</FONT>    }<a name="line.149"></a>
<FONT color="green">150</FONT>    <a name="line.150"></a>
<FONT color="green">151</FONT>    /**<a name="line.151"></a>
<FONT color="green">152</FONT>     * Used for callback by the {@link DataStreamReader}; setts the data column labels in the cache.<a name="line.152"></a>
<FONT color="green">153</FONT>     */<a name="line.153"></a>
<FONT color="green">154</FONT>    public void eventLabelsSet(List&lt;String&gt; labels, DataStreamReader reader) {<a name="line.154"></a>
<FONT color="green">155</FONT>            List&lt;String&gt; uniqueLabels = DataStreamReader.createUniqueLabels(labels, true); <a name="line.155"></a>
<FONT color="green">156</FONT>            cache.resetLabels(uniqueLabels);        <a name="line.156"></a>
<FONT color="green">157</FONT>    }<a name="line.157"></a>
<FONT color="green">158</FONT>    <a name="line.158"></a>
<FONT color="green">159</FONT>    /**<a name="line.159"></a>
<FONT color="green">160</FONT>     * Used for callback by the {@link DataStreamReader}; does nothing.<a name="line.160"></a>
<FONT color="green">161</FONT>     */<a name="line.161"></a>
<FONT color="green">162</FONT>    public void eventSeparatorSet(String separator, DataStreamReader reader) {<a name="line.162"></a>
<FONT color="green">163</FONT>            ; // No action required.        <a name="line.163"></a>
<FONT color="green">164</FONT>    }<a name="line.164"></a>
<FONT color="green">165</FONT>    <a name="line.165"></a>
<FONT color="green">166</FONT>    }<a name="line.166"></a>




























































</PRE>
</BODY>
</HTML>
