package visGrid.diagram.edit.parts;

/**
 * @generated
 */
public class SolarEditPart extends org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeNodeEditPart  {

			/**
 * @generated
 */
	public static final int VISUAL_ID = 2005;

	/**
 * @generated
 */
	protected org.eclipse.draw2d.IFigure contentPane;

	/**
 * @generated
 */
	protected org.eclipse.draw2d.IFigure primaryShape;
	
		/**
 * @generated
 */
	public SolarEditPart(org.eclipse.gmf.runtime.notation.View view) {
		super(view);
	}
	
		/**
 * @generated
 */
	protected void createDefaultEditPolicies() {
				super.createDefaultEditPolicies();
			installEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.SEMANTIC_ROLE, new visGrid.diagram.edit.policies.SolarItemSemanticEditPolicy());
						installEditPolicy(org.eclipse.gef.EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy());
			// XXX need an SCR to runtime to have another abstract superclass that would let children add reasonable editpolicies
	// removeEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.CONNECTION_HANDLES_ROLE);
	}
	
		/**
 * @generated
 */
	protected org.eclipse.gef.editpolicies.LayoutEditPolicy createLayoutEditPolicy() {
			
		org.eclipse.gmf.runtime.diagram.ui.editpolicies.FlowLayoutEditPolicy lep = new org.eclipse.gmf.runtime.diagram.ui.editpolicies.FlowLayoutEditPolicy() {
			
			protected org.eclipse.gef.commands.Command createAddCommand(org.eclipse.gef.EditPart child, org.eclipse.gef.EditPart after) {
				return null;
			}

			protected org.eclipse.gef.commands.Command createMoveChildCommand(org.eclipse.gef.EditPart child, org.eclipse.gef.EditPart after) {
				return null;
			}

			protected org.eclipse.gef.commands.Command getCreateCommand(org.eclipse.gef.requests.CreateRequest request) {
				return null;
			}
		};
		return lep;
		}
	
		/**
 * @generated
 */
	protected org.eclipse.draw2d.IFigure createNodeShape() {
		return primaryShape = new SolarFigure();
	}

		/**
 * @generated
 */
	public SolarFigure getPrimaryShape() {
		return (SolarFigure) primaryShape;
	}
	
		/**
 * @generated
 */
	protected boolean addFixedChild(org.eclipse.gef.EditPart childEditPart) {
		if (childEditPart instanceof visGrid.diagram.edit.parts.SolarNameEditPart) {
			((visGrid.diagram.edit.parts.SolarNameEditPart) childEditPart).setLabel(getPrimaryShape().getFigureSolarNameFigure());
			return true;
		}
		return false;
	}

		/**
 * @generated
 */
	protected boolean removeFixedChild(org.eclipse.gef.EditPart childEditPart) {
		if (childEditPart instanceof visGrid.diagram.edit.parts.SolarNameEditPart) {
			return true;
		}
		return false;
	}

		/**
 * @generated
 */
	protected void addChildVisual(org.eclipse.gef.EditPart childEditPart, int index) {
		if (addFixedChild(childEditPart)) {
			return;
		}
		super.addChildVisual(childEditPart, -1);
	}

		/**
 * @generated
 */
	protected void removeChildVisual(org.eclipse.gef.EditPart childEditPart) {
		if (removeFixedChild(childEditPart)){
			return;
		}
		super.removeChildVisual(childEditPart);
	}

		/**
 * @generated
 */
	protected org.eclipse.draw2d.IFigure getContentPaneFor(org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart editPart) {
				return getContentPane();
	}

			
		/**
 * @generated
 */
	protected org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure createNodePlate() {
		org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure result = new org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure(40, 40);
				return result;
	}
	
						
		/**
 * Creates figure for this edit part.
 * 
 * Body of this method does not depend on settings in generation model
 * so you may safely remove <i>generated</i> tag and modify it.
 * 
 * @generated
 */
	protected org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure createNodeFigure() {
		org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure figure = createNodePlate();
		figure.setLayoutManager(new org.eclipse.draw2d.StackLayout());
		org.eclipse.draw2d.IFigure shape = createNodeShape();
		figure.add(shape);
		contentPane = setupContentPane(shape);
		return figure;
	}
	
		/**
 * Default implementation treats passed figure as content pane.
 * Respects layout one may have set for generated figure.
 * @param nodeShape instance of generated figure class
 * @generated
 */
	protected org.eclipse.draw2d.IFigure setupContentPane(org.eclipse.draw2d.IFigure nodeShape) {
					if (nodeShape.getLayoutManager() == null) {
									org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout layout =new org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout();
					layout.setSpacing(5);
					nodeShape.setLayoutManager(layout);
							}
				return nodeShape; // use nodeShape itself as contentPane
	}
	
		/**
 * @generated
 */
	public org.eclipse.draw2d.IFigure getContentPane() {
		if (contentPane != null) {
			return contentPane;
		}
		return super.getContentPane();
	}

		/**
 * @generated
 */
	protected void setForegroundColor(org.eclipse.swt.graphics.Color color) {
		if (primaryShape != null) {
			primaryShape.setForegroundColor(color);
		}
	}

		/**
 * @generated
 */
	protected void setBackgroundColor(org.eclipse.swt.graphics.Color color) {
		if (primaryShape != null) {
			primaryShape.setBackgroundColor(color);
		}
	}

		/**
 * @generated
 */
	protected void setLineWidth(int width) {
		if (primaryShape instanceof org.eclipse.draw2d.Shape) {
			((org.eclipse.draw2d.Shape) primaryShape).setLineWidth(width);
		}
	}

		/**
 * @generated
 */
	protected void setLineType(int style) {
		if (primaryShape instanceof org.eclipse.draw2d.Shape) {
			((org.eclipse.draw2d.Shape) primaryShape).setLineStyle(style);
		}
	}

				/**
 * @generated
 */
		public org.eclipse.gef.EditPart getPrimaryChildEditPart() {
			return getChildBySemanticHint(visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.SolarNameEditPart.VISUAL_ID));
		}
	



		
	
	
	
/**
 * @generated
 */
public class SolarFigure extends org.eclipse.draw2d.RectangleFigure {


	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureSolarNameFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureSolarGenerator_modeFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureSolarGenerator_statusFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureSolarPanel_typeFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureSolarPower_typeFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureSolarNoctFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureSolarTcellFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureSolarTambientFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureSolarInsolationFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureSolarRinternalFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureSolarRated_InsolationFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureSolarV_MaxFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureSolarVoc_MaxFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureSolarVocFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureSolarEfficiencyFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureSolarAreaFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureSolarRated_kVAFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureSolarV_OutFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureSolarI_OutFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureSolarVA_OutFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureSolarPhasesFigure; 


	/**
	 * @generated
	 */
	public SolarFigure() {
		
	org.eclipse.draw2d.FlowLayout layoutThis = new org.eclipse.draw2d.FlowLayout();
	layoutThis.setStretchMinorAxis(false);
	layoutThis.setMinorAlignment(org.eclipse.draw2d.FlowLayout.ALIGN_LEFTTOP
);

	layoutThis.setMajorAlignment(org.eclipse.draw2d.FlowLayout.ALIGN_LEFTTOP
);
	layoutThis.setMajorSpacing(5);
	layoutThis.setMinorSpacing(5);
	layoutThis.setHorizontal(true);

	this.setLayoutManager(layoutThis);

				createContents();
	}
	/**
	 * @generated
	 */
	private void createContents(){


fFigureSolarNameFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureSolarNameFigure.setText("<...>");

this.add(fFigureSolarNameFigure);



fFigureSolarGenerator_modeFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureSolarGenerator_modeFigure.setText("<...>");

this.add(fFigureSolarGenerator_modeFigure);



fFigureSolarGenerator_statusFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureSolarGenerator_statusFigure.setText("<...>");

this.add(fFigureSolarGenerator_statusFigure);



fFigureSolarPanel_typeFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureSolarPanel_typeFigure.setText("<...>");

this.add(fFigureSolarPanel_typeFigure);



fFigureSolarPower_typeFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureSolarPower_typeFigure.setText("<...>");

this.add(fFigureSolarPower_typeFigure);



fFigureSolarNoctFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureSolarNoctFigure.setText("<...>");

this.add(fFigureSolarNoctFigure);



fFigureSolarTcellFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureSolarTcellFigure.setText("<...>");

this.add(fFigureSolarTcellFigure);



fFigureSolarTambientFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureSolarTambientFigure.setText("<...>");

this.add(fFigureSolarTambientFigure);



fFigureSolarInsolationFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureSolarInsolationFigure.setText("<...>");

this.add(fFigureSolarInsolationFigure);



fFigureSolarRinternalFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureSolarRinternalFigure.setText("<...>");

this.add(fFigureSolarRinternalFigure);



fFigureSolarRated_InsolationFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureSolarRated_InsolationFigure.setText("<...>");

this.add(fFigureSolarRated_InsolationFigure);



fFigureSolarV_MaxFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureSolarV_MaxFigure.setText("<...>");

this.add(fFigureSolarV_MaxFigure);



fFigureSolarVoc_MaxFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureSolarVoc_MaxFigure.setText("<...>");

this.add(fFigureSolarVoc_MaxFigure);



fFigureSolarVocFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureSolarVocFigure.setText("<...>");

this.add(fFigureSolarVocFigure);



fFigureSolarEfficiencyFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureSolarEfficiencyFigure.setText("<...>");

this.add(fFigureSolarEfficiencyFigure);



fFigureSolarAreaFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureSolarAreaFigure.setText("<...>");

this.add(fFigureSolarAreaFigure);



fFigureSolarRated_kVAFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureSolarRated_kVAFigure.setText("<...>");

this.add(fFigureSolarRated_kVAFigure);



fFigureSolarV_OutFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureSolarV_OutFigure.setText("<...>");

this.add(fFigureSolarV_OutFigure);



fFigureSolarI_OutFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureSolarI_OutFigure.setText("<...>");

this.add(fFigureSolarI_OutFigure);



fFigureSolarVA_OutFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureSolarVA_OutFigure.setText("<...>");

this.add(fFigureSolarVA_OutFigure);



fFigureSolarPhasesFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureSolarPhasesFigure.setText("<...>");

this.add(fFigureSolarPhasesFigure);


	}





	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureSolarNameFigure() {
		return fFigureSolarNameFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureSolarGenerator_modeFigure() {
		return fFigureSolarGenerator_modeFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureSolarGenerator_statusFigure() {
		return fFigureSolarGenerator_statusFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureSolarPanel_typeFigure() {
		return fFigureSolarPanel_typeFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureSolarPower_typeFigure() {
		return fFigureSolarPower_typeFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureSolarNoctFigure() {
		return fFigureSolarNoctFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureSolarTcellFigure() {
		return fFigureSolarTcellFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureSolarTambientFigure() {
		return fFigureSolarTambientFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureSolarInsolationFigure() {
		return fFigureSolarInsolationFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureSolarRinternalFigure() {
		return fFigureSolarRinternalFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureSolarRated_InsolationFigure() {
		return fFigureSolarRated_InsolationFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureSolarV_MaxFigure() {
		return fFigureSolarV_MaxFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureSolarVoc_MaxFigure() {
		return fFigureSolarVoc_MaxFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureSolarVocFigure() {
		return fFigureSolarVocFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureSolarEfficiencyFigure() {
		return fFigureSolarEfficiencyFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureSolarAreaFigure() {
		return fFigureSolarAreaFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureSolarRated_kVAFigure() {
		return fFigureSolarRated_kVAFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureSolarV_OutFigure() {
		return fFigureSolarV_OutFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureSolarI_OutFigure() {
		return fFigureSolarI_OutFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureSolarVA_OutFigure() {
		return fFigureSolarVA_OutFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureSolarPhasesFigure() {
		return fFigureSolarPhasesFigure;
	}


}


	
	}
