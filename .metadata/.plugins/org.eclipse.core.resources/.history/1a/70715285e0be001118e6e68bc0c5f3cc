package visGrid.diagram.edit.parts;

/**
 * @generated
 */
public class LineEditPart extends org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeNodeEditPart  {

			/**
 * @generated
 */
	public static final int VISUAL_ID = 2063;

	/**
 * @generated
 */
	protected org.eclipse.draw2d.IFigure contentPane;

	/**
 * @generated
 */
	protected org.eclipse.draw2d.IFigure primaryShape;
	
		/**
 * @generated
 */
	public LineEditPart(org.eclipse.gmf.runtime.notation.View view) {
		super(view);
	}
	
		/**
 * @generated
 */
	protected void createDefaultEditPolicies() {
				super.createDefaultEditPolicies();
			installEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.SEMANTIC_ROLE, new visGrid.diagram.edit.policies.LineItemSemanticEditPolicy());
						installEditPolicy(org.eclipse.gef.EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy());
			// XXX need an SCR to runtime to have another abstract superclass that would let children add reasonable editpolicies
	// removeEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.CONNECTION_HANDLES_ROLE);
	}
	
		/**
 * @generated
 */
	protected org.eclipse.gef.editpolicies.LayoutEditPolicy createLayoutEditPolicy() {
			
		org.eclipse.gmf.runtime.diagram.ui.editpolicies.FlowLayoutEditPolicy lep = new org.eclipse.gmf.runtime.diagram.ui.editpolicies.FlowLayoutEditPolicy() {
			
			protected org.eclipse.gef.commands.Command createAddCommand(org.eclipse.gef.EditPart child, org.eclipse.gef.EditPart after) {
				return null;
			}

			protected org.eclipse.gef.commands.Command createMoveChildCommand(org.eclipse.gef.EditPart child, org.eclipse.gef.EditPart after) {
				return null;
			}

			protected org.eclipse.gef.commands.Command getCreateCommand(org.eclipse.gef.requests.CreateRequest request) {
				return null;
			}
		};
		return lep;
		}
	
		/**
 * @generated
 */
	protected org.eclipse.draw2d.IFigure createNodeShape() {
		return primaryShape = new LineFigure();
	}

		/**
 * @generated
 */
	public LineFigure getPrimaryShape() {
		return (LineFigure) primaryShape;
	}
	
		/**
 * @generated
 */
	protected boolean addFixedChild(org.eclipse.gef.EditPart childEditPart) {
		if (childEditPart instanceof visGrid.diagram.edit.parts.LineNameEditPart) {
			((visGrid.diagram.edit.parts.LineNameEditPart) childEditPart).setLabel(getPrimaryShape().getFigureLineNameFigure());
			return true;
		}
		return false;
	}

		/**
 * @generated
 */
	protected boolean removeFixedChild(org.eclipse.gef.EditPart childEditPart) {
		if (childEditPart instanceof visGrid.diagram.edit.parts.LineNameEditPart) {
			return true;
		}
		return false;
	}

		/**
 * @generated
 */
	protected void addChildVisual(org.eclipse.gef.EditPart childEditPart, int index) {
		if (addFixedChild(childEditPart)) {
			return;
		}
		super.addChildVisual(childEditPart, -1);
	}

		/**
 * @generated
 */
	protected void removeChildVisual(org.eclipse.gef.EditPart childEditPart) {
		if (removeFixedChild(childEditPart)){
			return;
		}
		super.removeChildVisual(childEditPart);
	}

		/**
 * @generated
 */
	protected org.eclipse.draw2d.IFigure getContentPaneFor(org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart editPart) {
				return getContentPane();
	}

			
		/**
 * @generated
 */
	protected org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure createNodePlate() {
		org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure result = new org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure(40, 40);
				return result;
	}
	
						
		/**
 * Creates figure for this edit part.
 * 
 * Body of this method does not depend on settings in generation model
 * so you may safely remove <i>generated</i> tag and modify it.
 * 
 * @generated
 */
	protected org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure createNodeFigure() {
		org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure figure = createNodePlate();
		figure.setLayoutManager(new org.eclipse.draw2d.StackLayout());
		org.eclipse.draw2d.IFigure shape = createNodeShape();
		figure.add(shape);
		contentPane = setupContentPane(shape);
		return figure;
	}
	
		/**
 * Default implementation treats passed figure as content pane.
 * Respects layout one may have set for generated figure.
 * @param nodeShape instance of generated figure class
 * @generated
 */
	protected org.eclipse.draw2d.IFigure setupContentPane(org.eclipse.draw2d.IFigure nodeShape) {
					if (nodeShape.getLayoutManager() == null) {
									org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout layout =new org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout();
					layout.setSpacing(5);
					nodeShape.setLayoutManager(layout);
							}
				return nodeShape; // use nodeShape itself as contentPane
	}
	
		/**
 * @generated
 */
	public org.eclipse.draw2d.IFigure getContentPane() {
		if (contentPane != null) {
			return contentPane;
		}
		return super.getContentPane();
	}

		/**
 * @generated
 */
	protected void setForegroundColor(org.eclipse.swt.graphics.Color color) {
		if (primaryShape != null) {
			primaryShape.setForegroundColor(color);
		}
	}

		/**
 * @generated
 */
	protected void setBackgroundColor(org.eclipse.swt.graphics.Color color) {
		if (primaryShape != null) {
			primaryShape.setBackgroundColor(color);
		}
	}

		/**
 * @generated
 */
	protected void setLineWidth(int width) {
		if (primaryShape instanceof org.eclipse.draw2d.Shape) {
			((org.eclipse.draw2d.Shape) primaryShape).setLineWidth(width);
		}
	}

		/**
 * @generated
 */
	protected void setLineType(int style) {
		if (primaryShape instanceof org.eclipse.draw2d.Shape) {
			((org.eclipse.draw2d.Shape) primaryShape).setLineStyle(style);
		}
	}

				/**
 * @generated
 */
		public org.eclipse.gef.EditPart getPrimaryChildEditPart() {
			return getChildBySemanticHint(visGrid.diagram.part.VisGridVisualIDRegistry.getType(visGrid.diagram.edit.parts.LineNameEditPart.VISUAL_ID));
		}
	



		
	
	
	
/**
 * @generated
 */
public class LineFigure extends org.eclipse.draw2d.RectangleFigure {


	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureLineNameFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureLineConfigurationFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureLineLengthFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureLineStatusFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureLineFromFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureLineToFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureLinePower_inFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureLinePower_outFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureLinePower_lossesFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureLinePower_in_AFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureLinePower_in_BFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureLinePower_in_CFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureLinePower_out_AFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureLinePower_out_BFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureLinePower_out_CFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureLinePower_losses_AFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureLinePower_losses_BFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureLinePower_losses_CFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureLineFlow_directionFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureLinePhasesFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureLineNominal_voltageFigure; 


	/**
	 * @generated
	 */
	public LineFigure() {
		
	org.eclipse.draw2d.FlowLayout layoutThis = new org.eclipse.draw2d.FlowLayout();
	layoutThis.setStretchMinorAxis(false);
	layoutThis.setMinorAlignment(org.eclipse.draw2d.FlowLayout.ALIGN_LEFTTOP
);

	layoutThis.setMajorAlignment(org.eclipse.draw2d.FlowLayout.ALIGN_LEFTTOP
);
	layoutThis.setMajorSpacing(5);
	layoutThis.setMinorSpacing(5);
	layoutThis.setHorizontal(true);

	this.setLayoutManager(layoutThis);

				createContents();
	}
	/**
	 * @generated
	 */
	private void createContents(){


fFigureLineNameFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureLineNameFigure.setText("<...>");

this.add(fFigureLineNameFigure);



fFigureLineConfigurationFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureLineConfigurationFigure.setText("<...>");

this.add(fFigureLineConfigurationFigure);



fFigureLineLengthFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureLineLengthFigure.setText("<...>");

this.add(fFigureLineLengthFigure);



fFigureLineStatusFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureLineStatusFigure.setText("<...>");

this.add(fFigureLineStatusFigure);



fFigureLineFromFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureLineFromFigure.setText("<...>");

this.add(fFigureLineFromFigure);



fFigureLineToFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureLineToFigure.setText("<...>");

this.add(fFigureLineToFigure);



fFigureLinePower_inFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureLinePower_inFigure.setText("<...>");

this.add(fFigureLinePower_inFigure);



fFigureLinePower_outFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureLinePower_outFigure.setText("<...>");

this.add(fFigureLinePower_outFigure);



fFigureLinePower_lossesFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureLinePower_lossesFigure.setText("<...>");

this.add(fFigureLinePower_lossesFigure);



fFigureLinePower_in_AFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureLinePower_in_AFigure.setText("<...>");

this.add(fFigureLinePower_in_AFigure);



fFigureLinePower_in_BFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureLinePower_in_BFigure.setText("<...>");

this.add(fFigureLinePower_in_BFigure);



fFigureLinePower_in_CFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureLinePower_in_CFigure.setText("<...>");

this.add(fFigureLinePower_in_CFigure);



fFigureLinePower_out_AFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureLinePower_out_AFigure.setText("<...>");

this.add(fFigureLinePower_out_AFigure);



fFigureLinePower_out_BFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureLinePower_out_BFigure.setText("<...>");

this.add(fFigureLinePower_out_BFigure);



fFigureLinePower_out_CFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureLinePower_out_CFigure.setText("<...>");

this.add(fFigureLinePower_out_CFigure);



fFigureLinePower_losses_AFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureLinePower_losses_AFigure.setText("<...>");

this.add(fFigureLinePower_losses_AFigure);



fFigureLinePower_losses_BFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureLinePower_losses_BFigure.setText("<...>");

this.add(fFigureLinePower_losses_BFigure);



fFigureLinePower_losses_CFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureLinePower_losses_CFigure.setText("<...>");

this.add(fFigureLinePower_losses_CFigure);



fFigureLineFlow_directionFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureLineFlow_directionFigure.setText("<...>");

this.add(fFigureLineFlow_directionFigure);



fFigureLinePhasesFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureLinePhasesFigure.setText("<...>");

this.add(fFigureLinePhasesFigure);



fFigureLineNominal_voltageFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
fFigureLineNominal_voltageFigure.setText("<...>");

this.add(fFigureLineNominal_voltageFigure);


	}





	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureLineNameFigure() {
		return fFigureLineNameFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureLineConfigurationFigure() {
		return fFigureLineConfigurationFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureLineLengthFigure() {
		return fFigureLineLengthFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureLineStatusFigure() {
		return fFigureLineStatusFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureLineFromFigure() {
		return fFigureLineFromFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureLineToFigure() {
		return fFigureLineToFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureLinePower_inFigure() {
		return fFigureLinePower_inFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureLinePower_outFigure() {
		return fFigureLinePower_outFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureLinePower_lossesFigure() {
		return fFigureLinePower_lossesFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureLinePower_in_AFigure() {
		return fFigureLinePower_in_AFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureLinePower_in_BFigure() {
		return fFigureLinePower_in_BFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureLinePower_in_CFigure() {
		return fFigureLinePower_in_CFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureLinePower_out_AFigure() {
		return fFigureLinePower_out_AFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureLinePower_out_BFigure() {
		return fFigureLinePower_out_BFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureLinePower_out_CFigure() {
		return fFigureLinePower_out_CFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureLinePower_losses_AFigure() {
		return fFigureLinePower_losses_AFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureLinePower_losses_BFigure() {
		return fFigureLinePower_losses_BFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureLinePower_losses_CFigure() {
		return fFigureLinePower_losses_CFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureLineFlow_directionFigure() {
		return fFigureLineFlow_directionFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureLinePhasesFigure() {
		return fFigureLinePhasesFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureLineNominal_voltageFigure() {
		return fFigureLineNominal_voltageFigure;
	}


}


	
	}
