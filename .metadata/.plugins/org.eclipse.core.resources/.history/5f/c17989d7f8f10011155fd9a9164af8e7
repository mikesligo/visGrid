<HTML>
<BODY BGCOLOR="white">
<PRE>
<FONT color="green">001</FONT>    package org.LiveGraph.plot;<a name="line.1"></a>
<FONT color="green">002</FONT>    <a name="line.2"></a>
<FONT color="green">003</FONT>    import java.awt.Color;<a name="line.3"></a>
<FONT color="green">004</FONT>    import java.awt.Dimension;<a name="line.4"></a>
<FONT color="green">005</FONT>    import java.awt.Font;<a name="line.5"></a>
<FONT color="green">006</FONT>    import java.awt.FontMetrics;<a name="line.6"></a>
<FONT color="green">007</FONT>    import java.awt.Graphics;<a name="line.7"></a>
<FONT color="green">008</FONT>    import java.awt.Point;<a name="line.8"></a>
<FONT color="green">009</FONT>    import java.awt.Rectangle;<a name="line.9"></a>
<FONT color="green">010</FONT>    import java.awt.geom.AffineTransform;<a name="line.10"></a>
<FONT color="green">011</FONT>    import java.awt.geom.NoninvertibleTransformException;<a name="line.11"></a>
<FONT color="green">012</FONT>    import java.awt.geom.Point2D;<a name="line.12"></a>
<FONT color="green">013</FONT>    import java.awt.geom.Rectangle2D;<a name="line.13"></a>
<FONT color="green">014</FONT>    import java.util.ArrayList;<a name="line.14"></a>
<FONT color="green">015</FONT>    import java.util.Arrays;<a name="line.15"></a>
<FONT color="green">016</FONT>    import java.util.Collections;<a name="line.16"></a>
<FONT color="green">017</FONT>    import java.util.Comparator;<a name="line.17"></a>
<FONT color="green">018</FONT>    import java.util.List;<a name="line.18"></a>
<FONT color="green">019</FONT>    <a name="line.19"></a>
<FONT color="green">020</FONT>    import org.LiveGraph.LiveGraph;<a name="line.20"></a>
<FONT color="green">021</FONT>    import org.LiveGraph.dataCache.CacheObserver;<a name="line.21"></a>
<FONT color="green">022</FONT>    import org.LiveGraph.dataCache.DataCache;<a name="line.22"></a>
<FONT color="green">023</FONT>    import org.LiveGraph.dataCache.DataSeries;<a name="line.23"></a>
<FONT color="green">024</FONT>    import org.LiveGraph.dataCache.DataSet;<a name="line.24"></a>
<FONT color="green">025</FONT>    import org.LiveGraph.settings.DataSeriesSettings;<a name="line.25"></a>
<FONT color="green">026</FONT>    import org.LiveGraph.settings.GraphSettings;<a name="line.26"></a>
<FONT color="green">027</FONT>    import org.LiveGraph.settings.ObservableSettings;<a name="line.27"></a>
<FONT color="green">028</FONT>    import org.LiveGraph.settings.SettingsObserver;<a name="line.28"></a>
<FONT color="green">029</FONT>    import org.LiveGraph.settings.DataSeriesSettings.TransformMode;<a name="line.29"></a>
<FONT color="green">030</FONT>    import org.LiveGraph.settings.GraphSettings.HGridType;<a name="line.30"></a>
<FONT color="green">031</FONT>    import org.LiveGraph.settings.GraphSettings.VGridType;<a name="line.31"></a>
<FONT color="green">032</FONT>    import org.LiveGraph.settings.GraphSettings.XAxisType;<a name="line.32"></a>
<FONT color="green">033</FONT>    <a name="line.33"></a>
<FONT color="green">034</FONT>    <a name="line.34"></a>
<FONT color="green">035</FONT>    /**<a name="line.35"></a>
<FONT color="green">036</FONT>     * This class handles the conversion of the cached data to a screen image and the<a name="line.36"></a>
<FONT color="green">037</FONT>     * drawing of the image on a {@code Graphics} object.<a name="line.37"></a>
<FONT color="green">038</FONT>     * &lt;br /&gt;<a name="line.38"></a>
<FONT color="green">039</FONT>     * This class uses an {@code AffineTransform} object to convert the data held in the<a name="line.39"></a>
<FONT color="green">040</FONT>     * cache to a data plot in screen coordinates. In order to keep the {@code AffineTransform}<a name="line.40"></a>
<FONT color="green">041</FONT>     * object appropriate for the current display at all times a plotter listens to<a name="line.41"></a>
<FONT color="green">042</FONT>     * various {@link DataCache} and {@link ObservableSettings} events; in addition it offers<a name="line.42"></a>
<FONT color="green">043</FONT>     * a {@link #setScreenSize(int, int)}-method which must be called each time when the<a name="line.43"></a>
<FONT color="green">044</FONT>     * canvas-panel that uses the plotter changes its size.<a name="line.44"></a>
<FONT color="green">045</FONT>     * &lt;br /&gt;<a name="line.45"></a>
<FONT color="green">046</FONT>     * Whenever the {@link #dataCache} changes, a plotter uses the current {@link #datScrTransform}<a name="line.46"></a>
<FONT color="green">047</FONT>     * object to convert the data from the cache into a plot in screen coordinates according to<a name="line.47"></a>
<FONT color="green">048</FONT>     * the current global graph- and series-settings. The screen data obtained this way is locally<a name="line.48"></a>
<FONT color="green">049</FONT>     * cached in the {@link #screenDataBuffer} array. This way the data does not need to be<a name="line.49"></a>
<FONT color="green">050</FONT>     * re-computed each time the plot must be drawn on the screen.<a name="line.50"></a>
<FONT color="green">051</FONT>     * &lt;br /&gt;<a name="line.51"></a>
<FONT color="green">052</FONT>     * In this version the plotter handles data values transformations required by the display<a name="line.52"></a>
<FONT color="green">053</FONT>     * options (if any) on the fly. If new options should be added to theinterface, this mechanism<a name="line.53"></a>
<FONT color="green">054</FONT>     * should be replaces by a more flexible solution.<a name="line.54"></a>
<FONT color="green">055</FONT>     * <a name="line.55"></a>
<FONT color="green">056</FONT>     * &lt;p style="font-size:smaller;"&gt;This product includes software developed by the<a name="line.56"></a>
<FONT color="green">057</FONT>     *    &lt;strong&gt;LiveGraph&lt;/strong&gt; project and its contributors.&lt;br /&gt;<a name="line.57"></a>
<FONT color="green">058</FONT>     *    (&lt;a href="http://www.live-graph.org" target="_blank"&gt;http://www.live-graph.org&lt;/a&gt;)&lt;br /&gt;<a name="line.58"></a>
<FONT color="green">059</FONT>     *    Copyright (c) 2007 G. Paperin.&lt;br /&gt;<a name="line.59"></a>
<FONT color="green">060</FONT>     *    All rights reserved.<a name="line.60"></a>
<FONT color="green">061</FONT>     * &lt;/p&gt;<a name="line.61"></a>
<FONT color="green">062</FONT>     * &lt;p style="font-size:smaller;"&gt;File: Plotter.java&lt;/p&gt; <a name="line.62"></a>
<FONT color="green">063</FONT>     * &lt;p style="font-size:smaller;"&gt;Redistribution and use in source and binary forms, with or<a name="line.63"></a>
<FONT color="green">064</FONT>     *    without modification, are permitted provided that the following terms and conditions are met:<a name="line.64"></a>
<FONT color="green">065</FONT>     * &lt;/p&gt;<a name="line.65"></a>
<FONT color="green">066</FONT>     * &lt;p style="font-size:smaller;"&gt;1. Redistributions of source code must retain the above<a name="line.66"></a>
<FONT color="green">067</FONT>     *    acknowledgement of the LiveGraph project and its web-site, the above copyright notice,<a name="line.67"></a>
<FONT color="green">068</FONT>     *    this list of conditions and the following disclaimer.&lt;br /&gt;<a name="line.68"></a>
<FONT color="green">069</FONT>     *    2. Redistributions in binary form must reproduce the above acknowledgement of the<a name="line.69"></a>
<FONT color="green">070</FONT>     *    LiveGraph project and its web-site, the above copyright notice, this list of conditions<a name="line.70"></a>
<FONT color="green">071</FONT>     *    and the following disclaimer in the documentation and/or other materials provided with<a name="line.71"></a>
<FONT color="green">072</FONT>     *    the distribution.&lt;br /&gt;<a name="line.72"></a>
<FONT color="green">073</FONT>     *    3. All advertising materials mentioning features or use of this software or any derived<a name="line.73"></a>
<FONT color="green">074</FONT>     *    software must display the following acknowledgement:&lt;br /&gt;<a name="line.74"></a>
<FONT color="green">075</FONT>     *    &lt;em&gt;This product includes software developed by the LiveGraph project and its<a name="line.75"></a>
<FONT color="green">076</FONT>     *    contributors.&lt;br /&gt;(http://www.live-graph.org)&lt;/em&gt;&lt;br /&gt;<a name="line.76"></a>
<FONT color="green">077</FONT>     *    4. All advertising materials distributed in form of HTML pages or any other technology<a name="line.77"></a>
<FONT color="green">078</FONT>     *    permitting active hyper-links that mention features or use of this software or any<a name="line.78"></a>
<FONT color="green">079</FONT>     *    derived software must display the acknowledgment specified in condition 3 of this<a name="line.79"></a>
<FONT color="green">080</FONT>     *    agreement, and in addition, include a visible and working hyper-link to the LiveGraph<a name="line.80"></a>
<FONT color="green">081</FONT>     *    homepage (http://www.live-graph.org).<a name="line.81"></a>
<FONT color="green">082</FONT>     * &lt;/p&gt;<a name="line.82"></a>
<FONT color="green">083</FONT>     * &lt;p style="font-size:smaller;"&gt;THIS SOFTWARE IS PROVIDED &amp;quot;AS IS&amp;quot;, WITHOUT WARRANTY<a name="line.83"></a>
<FONT color="green">084</FONT>     *    OF ANY KIND, EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF<a name="line.84"></a>
<FONT color="green">085</FONT>     *    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  NONINFRINGEMENT. IN NO EVENT SHALL<a name="line.85"></a>
<FONT color="green">086</FONT>     *    THE AUTHORS, CONTRIBUTORS OR COPYRIGHT  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER<a name="line.86"></a>
<FONT color="green">087</FONT>     *    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING  FROM, OUT OF OR<a name="line.87"></a>
<FONT color="green">088</FONT>     *    IN CONNECTION WITH THE SOFTWARE OR THE USE OR  OTHER DEALINGS IN THE SOFTWARE.<a name="line.88"></a>
<FONT color="green">089</FONT>     * &lt;/p&gt;<a name="line.89"></a>
<FONT color="green">090</FONT>     * <a name="line.90"></a>
<FONT color="green">091</FONT>     * @author Greg Paperin (&lt;a href="http://www.paperin.org" target="_blank"&gt;http://www.paperin.org&lt;/a&gt;)<a name="line.91"></a>
<FONT color="green">092</FONT>     * @version {@value org.LiveGraph.LiveGraph#version}<a name="line.92"></a>
<FONT color="green">093</FONT>     */<a name="line.93"></a>
<FONT color="green">094</FONT>    public class Plotter implements CacheObserver, SettingsObserver {<a name="line.94"></a>
<FONT color="green">095</FONT>    <a name="line.95"></a>
<FONT color="green">096</FONT>    /**<a name="line.96"></a>
<FONT color="green">097</FONT>     * Vertical margin.<a name="line.97"></a>
<FONT color="green">098</FONT>     */<a name="line.98"></a>
<FONT color="green">099</FONT>    private static final int VMARGIN = 20;<a name="line.99"></a>
<FONT color="green">100</FONT>    <a name="line.100"></a>
<FONT color="green">101</FONT>    /**<a name="line.101"></a>
<FONT color="green">102</FONT>     * Horisiontal margin.<a name="line.102"></a>
<FONT color="green">103</FONT>     */<a name="line.103"></a>
<FONT color="green">104</FONT>    private static final int HMARGIN = 20;<a name="line.104"></a>
<FONT color="green">105</FONT>    <a name="line.105"></a>
<FONT color="green">106</FONT>    /*<a name="line.106"></a>
<FONT color="green">107</FONT>     * Minimum plot size.<a name="line.107"></a>
<FONT color="green">108</FONT>     */<a name="line.108"></a>
<FONT color="green">109</FONT>    private static final Dimension minScreenSize = new Dimension(150, 100);<a name="line.109"></a>
<FONT color="green">110</FONT>    <a name="line.110"></a>
<FONT color="green">111</FONT>    /**<a name="line.111"></a>
<FONT color="green">112</FONT>     * Y axis colour.<a name="line.112"></a>
<FONT color="green">113</FONT>     */<a name="line.113"></a>
<FONT color="green">114</FONT>    private static final Color VAXIS_COL = Color.BLACK;<a name="line.114"></a>
<FONT color="green">115</FONT>    <a name="line.115"></a>
<FONT color="green">116</FONT>    /**<a name="line.116"></a>
<FONT color="green">117</FONT>     * X axis colour.<a name="line.117"></a>
<FONT color="green">118</FONT>     */<a name="line.118"></a>
<FONT color="green">119</FONT>    private static final Color HAXIS_COL = Color.BLACK;<a name="line.119"></a>
<FONT color="green">120</FONT>    <a name="line.120"></a>
<FONT color="green">121</FONT>    /**<a name="line.121"></a>
<FONT color="green">122</FONT>     * Label font size.<a name="line.122"></a>
<FONT color="green">123</FONT>     */<a name="line.123"></a>
<FONT color="green">124</FONT>    private static final int FONT_SIZE = 9;<a name="line.124"></a>
<FONT color="green">125</FONT>    <a name="line.125"></a>
<FONT color="green">126</FONT>    /**<a name="line.126"></a>
<FONT color="green">127</FONT>     * Gap between axes labels.<a name="line.127"></a>
<FONT color="green">128</FONT>     */<a name="line.128"></a>
<FONT color="green">129</FONT>    private static final int AXES_LBL_GAP = 100;<a name="line.129"></a>
<FONT color="green">130</FONT>    <a name="line.130"></a>
<FONT color="green">131</FONT>    /**<a name="line.131"></a>
<FONT color="green">132</FONT>     * Size of the scale marks on the axes.<a name="line.132"></a>
<FONT color="green">133</FONT>     */<a name="line.133"></a>
<FONT color="green">134</FONT>    private static final int AXES_MARKS_SIZE = 4;<a name="line.134"></a>
<FONT color="green">135</FONT>    <a name="line.135"></a>
<FONT color="green">136</FONT>    /**<a name="line.136"></a>
<FONT color="green">137</FONT>     * Radius for datapoints marks on small graphs.<a name="line.137"></a>
<FONT color="green">138</FONT>     */<a name="line.138"></a>
<FONT color="green">139</FONT>    private static final int DATAPOINT_RAD = 3;<a name="line.139"></a>
<FONT color="green">140</FONT>    <a name="line.140"></a>
<FONT color="green">141</FONT>    /**<a name="line.141"></a>
<FONT color="green">142</FONT>     * The minimum distance between grid lines (in pixels).<a name="line.142"></a>
<FONT color="green">143</FONT>     */<a name="line.143"></a>
<FONT color="green">144</FONT>    private static final int MIN_GRIDLINE_DIST = 3;<a name="line.144"></a>
<FONT color="green">145</FONT>    <a name="line.145"></a>
<FONT color="green">146</FONT>    <a name="line.146"></a>
<FONT color="green">147</FONT>    /**<a name="line.147"></a>
<FONT color="green">148</FONT>     * The data cache. <a name="line.148"></a>
<FONT color="green">149</FONT>     */<a name="line.149"></a>
<FONT color="green">150</FONT>    private DataCache dataCache = null;<a name="line.150"></a>
<FONT color="green">151</FONT>    <a name="line.151"></a>
<FONT color="green">152</FONT>    /**<a name="line.152"></a>
<FONT color="green">153</FONT>     * Data series settings.<a name="line.153"></a>
<FONT color="green">154</FONT>     */<a name="line.154"></a>
<FONT color="green">155</FONT>    private DataSeriesSettings seriesSetts = null;<a name="line.155"></a>
<FONT color="green">156</FONT>    <a name="line.156"></a>
<FONT color="green">157</FONT>    /**<a name="line.157"></a>
<FONT color="green">158</FONT>     * Graph settings.<a name="line.158"></a>
<FONT color="green">159</FONT>     */<a name="line.159"></a>
<FONT color="green">160</FONT>    private GraphSettings graphSetts = null;<a name="line.160"></a>
<FONT color="green">161</FONT>    <a name="line.161"></a>
<FONT color="green">162</FONT>    <a name="line.162"></a>
<FONT color="green">163</FONT>    /**<a name="line.163"></a>
<FONT color="green">164</FONT>     * Whether anythig at all is to be displayed.<a name="line.164"></a>
<FONT color="green">165</FONT>     */<a name="line.165"></a>
<FONT color="green">166</FONT>    private boolean showAtLeastOneSeries = false;<a name="line.166"></a>
<FONT color="green">167</FONT>    <a name="line.167"></a>
<FONT color="green">168</FONT>    /**<a name="line.168"></a>
<FONT color="green">169</FONT>     * Buffers the screen coordinates of the graphs.<a name="line.169"></a>
<FONT color="green">170</FONT>     */<a name="line.170"></a>
<FONT color="green">171</FONT>    private SeriesScreenData[] screenDataBuffer = null;<a name="line.171"></a>
<FONT color="green">172</FONT>    <a name="line.172"></a>
<FONT color="green">173</FONT>    /**<a name="line.173"></a>
<FONT color="green">174</FONT>     * Buffers the x coordinates.<a name="line.174"></a>
<FONT color="green">175</FONT>     */<a name="line.175"></a>
<FONT color="green">176</FONT>    private double[] xCoordinates = null;<a name="line.176"></a>
<FONT color="green">177</FONT>    <a name="line.177"></a>
<FONT color="green">178</FONT>    /**<a name="line.178"></a>
<FONT color="green">179</FONT>     * Used for sorting points by x values. <a name="line.179"></a>
<FONT color="green">180</FONT>     */<a name="line.180"></a>
<FONT color="green">181</FONT>    private PointsByIndexComparator pointsByIndexComparator = null; <a name="line.181"></a>
<FONT color="green">182</FONT>    <a name="line.182"></a>
<FONT color="green">183</FONT>    <a name="line.183"></a>
<FONT color="green">184</FONT>    /**<a name="line.184"></a>
<FONT color="green">185</FONT>     * Viewable area in data coordinates.<a name="line.185"></a>
<FONT color="green">186</FONT>     */<a name="line.186"></a>
<FONT color="green">187</FONT>    private Rectangle2D.Double dataViewport = null;<a name="line.187"></a>
<FONT color="green">188</FONT>    <a name="line.188"></a>
<FONT color="green">189</FONT>    /**<a name="line.189"></a>
<FONT color="green">190</FONT>     * Screen size in pixels.<a name="line.190"></a>
<FONT color="green">191</FONT>     */<a name="line.191"></a>
<FONT color="green">192</FONT>    private Dimension screenSize = null;<a name="line.192"></a>
<FONT color="green">193</FONT>    <a name="line.193"></a>
<FONT color="green">194</FONT>    /**<a name="line.194"></a>
<FONT color="green">195</FONT>     * Data space to screen space transformation.<a name="line.195"></a>
<FONT color="green">196</FONT>     */<a name="line.196"></a>
<FONT color="green">197</FONT>    private AffineTransform datScrTransform = null;<a name="line.197"></a>
<FONT color="green">198</FONT>    <a name="line.198"></a>
<FONT color="green">199</FONT>    <a name="line.199"></a>
<FONT color="green">200</FONT>    /**<a name="line.200"></a>
<FONT color="green">201</FONT>     * Whether screen data computation is in progress.<a name="line.201"></a>
<FONT color="green">202</FONT>     */<a name="line.202"></a>
<FONT color="green">203</FONT>    private boolean dataComputationRunning = false;<a name="line.203"></a>
<FONT color="green">204</FONT>    <a name="line.204"></a>
<FONT color="green">205</FONT>    /**<a name="line.205"></a>
<FONT color="green">206</FONT>     * Whether screen data computation is in progress.<a name="line.206"></a>
<FONT color="green">207</FONT>     */<a name="line.207"></a>
<FONT color="green">208</FONT>    private boolean pointHighlightComputationRunning = false;<a name="line.208"></a>
<FONT color="green">209</FONT>    <a name="line.209"></a>
<FONT color="green">210</FONT>    /**<a name="line.210"></a>
<FONT color="green">211</FONT>     * Whether the next change of h-grid settings was initiated by this plotter and should<a name="line.211"></a>
<FONT color="green">212</FONT>     * therefore be ignored by the plotter's handler.<a name="line.212"></a>
<FONT color="green">213</FONT>     */<a name="line.213"></a>
<FONT color="green">214</FONT>    private boolean selfSettingHGridSize = false;<a name="line.214"></a>
<FONT color="green">215</FONT>    <a name="line.215"></a>
<FONT color="green">216</FONT>    /**<a name="line.216"></a>
<FONT color="green">217</FONT>     * The h-grid size get by a settings change that was not initiated by this<a name="line.217"></a>
<FONT color="green">218</FONT>     * plotter itself.<a name="line.218"></a>
<FONT color="green">219</FONT>     */<a name="line.219"></a>
<FONT color="green">220</FONT>    private double userHGridStep = Double.NaN;<a name="line.220"></a>
<FONT color="green">221</FONT>    <a name="line.221"></a>
<FONT color="green">222</FONT>    /**<a name="line.222"></a>
<FONT color="green">223</FONT>     * The actual h-grid step after the consideration of plot size.<a name="line.223"></a>
<FONT color="green">224</FONT>     */<a name="line.224"></a>
<FONT color="green">225</FONT>    private double hGridStep = Double.NaN;<a name="line.225"></a>
<FONT color="green">226</FONT>    <a name="line.226"></a>
<FONT color="green">227</FONT>    /**<a name="line.227"></a>
<FONT color="green">228</FONT>     * Whether the next change of v-grid settings was initiated by this plotter and should<a name="line.228"></a>
<FONT color="green">229</FONT>     * therefore be ignored by the plotter's handler.<a name="line.229"></a>
<FONT color="green">230</FONT>     */<a name="line.230"></a>
<FONT color="green">231</FONT>    private boolean selfSettingVGridSize = false;<a name="line.231"></a>
<FONT color="green">232</FONT>    <a name="line.232"></a>
<FONT color="green">233</FONT>    /**<a name="line.233"></a>
<FONT color="green">234</FONT>     * The v-grid size get by a settings change that was not initiated by this<a name="line.234"></a>
<FONT color="green">235</FONT>     * plotter itself.<a name="line.235"></a>
<FONT color="green">236</FONT>     */<a name="line.236"></a>
<FONT color="green">237</FONT>    private double userVGridStep = Double.NaN;<a name="line.237"></a>
<FONT color="green">238</FONT>    <a name="line.238"></a>
<FONT color="green">239</FONT>    /**<a name="line.239"></a>
<FONT color="green">240</FONT>     * The actual v-grid step after the consideration of plot size.<a name="line.240"></a>
<FONT color="green">241</FONT>     */<a name="line.241"></a>
<FONT color="green">242</FONT>    private double vGridStep = Double.NaN;<a name="line.242"></a>
<FONT color="green">243</FONT>    <a name="line.243"></a>
<FONT color="green">244</FONT>    <a name="line.244"></a>
<FONT color="green">245</FONT>    /**<a name="line.245"></a>
<FONT color="green">246</FONT>     * Whether dara points close to the mouse position should be highlighted. <a name="line.246"></a>
<FONT color="green">247</FONT>     */<a name="line.247"></a>
<FONT color="green">248</FONT>    private boolean highlightPoints = true;<a name="line.248"></a>
<FONT color="green">249</FONT>    <a name="line.249"></a>
<FONT color="green">250</FONT>    <a name="line.250"></a>
<FONT color="green">251</FONT>    /**<a name="line.251"></a>
<FONT color="green">252</FONT>     * Creates a plotter for the data held in the specified cache.<a name="line.252"></a>
<FONT color="green">253</FONT>     * @param dataCache Cache holding the data to plot.<a name="line.253"></a>
<FONT color="green">254</FONT>     */<a name="line.254"></a>
<FONT color="green">255</FONT>    public Plotter(DataCache dataCache) {<a name="line.255"></a>
<FONT color="green">256</FONT>            <a name="line.256"></a>
<FONT color="green">257</FONT>            if (null == dataCache)<a name="line.257"></a>
<FONT color="green">258</FONT>                    throw new NullPointerException("Plotter cannot act on a null cache"); <a name="line.258"></a>
<FONT color="green">259</FONT>            <a name="line.259"></a>
<FONT color="green">260</FONT>            this.dataCache = dataCache;<a name="line.260"></a>
<FONT color="green">261</FONT>            this.initGlobalParameters();<a name="line.261"></a>
<FONT color="green">262</FONT>            <a name="line.262"></a>
<FONT color="green">263</FONT>            this.resetScreenDataBuffer();<a name="line.263"></a>
<FONT color="green">264</FONT>            this.xCoordinates = new double[DataCache.CACHE_SIZE];<a name="line.264"></a>
<FONT color="green">265</FONT>            this.pointsByIndexComparator = new PointsByIndexComparator();<a name="line.265"></a>
<FONT color="green">266</FONT>            <a name="line.266"></a>
<FONT color="green">267</FONT>            this.dataViewport = new Rectangle2D.Double();<a name="line.267"></a>
<FONT color="green">268</FONT>            this.screenSize = new Dimension();<a name="line.268"></a>
<FONT color="green">269</FONT>            this.datScrTransform = new AffineTransform();<a name="line.269"></a>
<FONT color="green">270</FONT>            <a name="line.270"></a>
<FONT color="green">271</FONT>            this.dataComputationRunning = false;<a name="line.271"></a>
<FONT color="green">272</FONT>            this.pointHighlightComputationRunning = false;<a name="line.272"></a>
<FONT color="green">273</FONT>            <a name="line.273"></a>
<FONT color="green">274</FONT>            this.selfSettingHGridSize = false;<a name="line.274"></a>
<FONT color="green">275</FONT>            this.userHGridStep = graphSetts.getHGridSize();<a name="line.275"></a>
<FONT color="green">276</FONT>            this.hGridStep = graphSetts.getHGridSize();<a name="line.276"></a>
<FONT color="green">277</FONT>            <a name="line.277"></a>
<FONT color="green">278</FONT>            this.selfSettingVGridSize = false;<a name="line.278"></a>
<FONT color="green">279</FONT>            this.userVGridStep = graphSetts.getVGridSize();<a name="line.279"></a>
<FONT color="green">280</FONT>            this.vGridStep = graphSetts.getVGridSize();<a name="line.280"></a>
<FONT color="green">281</FONT>            <a name="line.281"></a>
<FONT color="green">282</FONT>            this.computeGridSteps();<a name="line.282"></a>
<FONT color="green">283</FONT>            <a name="line.283"></a>
<FONT color="green">284</FONT>            this.highlightPoints = true;<a name="line.284"></a>
<FONT color="green">285</FONT>    }<a name="line.285"></a>
<FONT color="green">286</FONT>    <a name="line.286"></a>
<FONT color="green">287</FONT>    /**<a name="line.287"></a>
<FONT color="green">288</FONT>     * Used by the constructor to initialise global settings references.<a name="line.288"></a>
<FONT color="green">289</FONT>     */<a name="line.289"></a>
<FONT color="green">290</FONT>    private void initGlobalParameters() {<a name="line.290"></a>
<FONT color="green">291</FONT>            this.seriesSetts = LiveGraph.application().getDataSeriesSettings();<a name="line.291"></a>
<FONT color="green">292</FONT>            this.graphSetts = LiveGraph.application().getGraphSettings();<a name="line.292"></a>
<FONT color="green">293</FONT>    }<a name="line.293"></a>
<FONT color="green">294</FONT>    <a name="line.294"></a>
<FONT color="green">295</FONT>    <a name="line.295"></a>
<FONT color="green">296</FONT>    /**<a name="line.296"></a>
<FONT color="green">297</FONT>     * Gets whether the screen area is large enough to paint the graph.<a name="line.297"></a>
<FONT color="green">298</FONT>     * <a name="line.298"></a>
<FONT color="green">299</FONT>     * @return {@code true} iff the screen area is large enough to paint the graph.<a name="line.299"></a>
<FONT color="green">300</FONT>     */<a name="line.300"></a>
<FONT color="green">301</FONT>    public boolean screenTooSmall() {<a name="line.301"></a>
<FONT color="green">302</FONT>            return (minScreenSize.height &gt; screenSize.height || minScreenSize.width &gt; screenSize.width);<a name="line.302"></a>
<FONT color="green">303</FONT>    }<a name="line.303"></a>
<FONT color="green">304</FONT>    <a name="line.304"></a>
<FONT color="green">305</FONT>    /**<a name="line.305"></a>
<FONT color="green">306</FONT>     * Gets whether at least one series is to be plotted.<a name="line.306"></a>
<FONT color="green">307</FONT>     * <a name="line.307"></a>
<FONT color="green">308</FONT>     * @return {@code true} if at seast one data series should be plotted, {@code false} otherwise.<a name="line.308"></a>
<FONT color="green">309</FONT>     */<a name="line.309"></a>
<FONT color="green">310</FONT>    public boolean getShowAtLeastOneSeries() {<a name="line.310"></a>
<FONT color="green">311</FONT>            return this.showAtLeastOneSeries;<a name="line.311"></a>
<FONT color="green">312</FONT>    }<a name="line.312"></a>
<FONT color="green">313</FONT>    <a name="line.313"></a>
<FONT color="green">314</FONT>    /**<a name="line.314"></a>
<FONT color="green">315</FONT>     * Paints the previously computed graphs along with the axes, labels, grids and so on to the<a name="line.315"></a>
<FONT color="green">316</FONT>     * specified graphics context.<a name="line.316"></a>
<FONT color="green">317</FONT>     * @param g Paint context.<a name="line.317"></a>
<FONT color="green">318</FONT>     */<a name="line.318"></a>
<FONT color="green">319</FONT>    public void paint(Graphics g) {<a name="line.319"></a>
<FONT color="green">320</FONT>                    <a name="line.320"></a>
<FONT color="green">321</FONT>            // If screen is to small, just paint a message: <a name="line.321"></a>
<FONT color="green">322</FONT>            if (screenTooSmall()) {<a name="line.322"></a>
<FONT color="green">323</FONT>                    g.setColor(Color.BLACK);        <a name="line.323"></a>
<FONT color="green">324</FONT>                    g.setFont(new Font(g.getFont().getName(), g.getFont().getStyle(), FONT_SIZE));<a name="line.324"></a>
<FONT color="green">325</FONT>                    FontMetrics fMetrics = g.getFontMetrics();<a name="line.325"></a>
<FONT color="green">326</FONT>                    g.drawString("LiveGraph " + LiveGraph.version, 2, fMetrics.getHeight() + 2);<a name="line.326"></a>
<FONT color="green">327</FONT>                    g.drawString("Enlarge this window to see the plot.", 2, 2 * fMetrics.getHeight() + 4);<a name="line.327"></a>
<FONT color="green">328</FONT>                    return;<a name="line.328"></a>
<FONT color="green">329</FONT>            }<a name="line.329"></a>
<FONT color="green">330</FONT>    <a name="line.330"></a>
<FONT color="green">331</FONT>            <a name="line.331"></a>
<FONT color="green">332</FONT>            // If there is nothing to show, just print a message:   <a name="line.332"></a>
<FONT color="green">333</FONT>            if (!showAtLeastOneSeries) {<a name="line.333"></a>
<FONT color="green">334</FONT>                    g.setColor(Color.BLACK);<a name="line.334"></a>
<FONT color="green">335</FONT>                    g.setFont(new Font(g.getFont().getName(), g.getFont().getStyle(), FONT_SIZE));<a name="line.335"></a>
<FONT color="green">336</FONT>                    FontMetrics fMetrics = g.getFontMetrics();<a name="line.336"></a>
<FONT color="green">337</FONT>                    g.drawString("LiveGraph " + LiveGraph.version, 2, fMetrics.getHeight() + 2);<a name="line.337"></a>
<FONT color="green">338</FONT>                    g.drawString("No data to display.", 2, 2 * fMetrics.getHeight() + 4);<a name="line.338"></a>
<FONT color="green">339</FONT>                    return;<a name="line.339"></a>
<FONT color="green">340</FONT>            }<a name="line.340"></a>
<FONT color="green">341</FONT>            <a name="line.341"></a>
<FONT color="green">342</FONT>            <a name="line.342"></a>
<FONT color="green">343</FONT>            // If data computation is running, do not do anything:  <a name="line.343"></a>
<FONT color="green">344</FONT>            if (dataComputationRunning)<a name="line.344"></a>
<FONT color="green">345</FONT>                    return;<a name="line.345"></a>
<FONT color="green">346</FONT>            <a name="line.346"></a>
<FONT color="green">347</FONT>            // Now do the actual painting:<a name="line.347"></a>
<FONT color="green">348</FONT>            paintGrids(g);<a name="line.348"></a>
<FONT color="green">349</FONT>            paintAxes(g);<a name="line.349"></a>
<FONT color="green">350</FONT>            paintData(g);<a name="line.350"></a>
<FONT color="green">351</FONT>            <a name="line.351"></a>
<FONT color="green">352</FONT>    } // public void paint(Graphics g)<a name="line.352"></a>
<FONT color="green">353</FONT>    <a name="line.353"></a>
<FONT color="green">354</FONT>    <a name="line.354"></a>
<FONT color="green">355</FONT>    /**<a name="line.355"></a>
<FONT color="green">356</FONT>     * Paints the grid.<a name="line.356"></a>
<FONT color="green">357</FONT>     * @param g The graphics context.<a name="line.357"></a>
<FONT color="green">358</FONT>     */<a name="line.358"></a>
<FONT color="green">359</FONT>    private void paintGrids(Graphics g) {<a name="line.359"></a>
<FONT color="green">360</FONT>            <a name="line.360"></a>
<FONT color="green">361</FONT>            // Plot horizontal grid:<a name="line.361"></a>
<FONT color="green">362</FONT>            <a name="line.362"></a>
<FONT color="green">363</FONT>            if (HGridType.HGrid_Simple == graphSetts.getHGridType()) {<a name="line.363"></a>
<FONT color="green">364</FONT>                    <a name="line.364"></a>
<FONT color="green">365</FONT>                    g.setColor(graphSetts.getHGridColour());<a name="line.365"></a>
<FONT color="green">366</FONT>                    <a name="line.366"></a>
<FONT color="green">367</FONT>                    double dataViewportBottom = dataViewport.y - dataViewport.height;<a name="line.367"></a>
<FONT color="green">368</FONT>                    double gy = dataViewportBottom + hGridStep - (dataViewportBottom % hGridStep);<a name="line.368"></a>
<FONT color="green">369</FONT>                    <a name="line.369"></a>
<FONT color="green">370</FONT>                    Point2D.Double p1 = new Point2D.Double();<a name="line.370"></a>
<FONT color="green">371</FONT>                    Point2D.Double p2 = new Point2D.Double();<a name="line.371"></a>
<FONT color="green">372</FONT>                    <a name="line.372"></a>
<FONT color="green">373</FONT>                    while (gy &lt;= dataViewport.y) {<a name="line.373"></a>
<FONT color="green">374</FONT>                            <a name="line.374"></a>
<FONT color="green">375</FONT>                            p1.setLocation(dataViewport.x, gy);<a name="line.375"></a>
<FONT color="green">376</FONT>                            p2.setLocation(dataViewport.x + dataViewport.width, gy);<a name="line.376"></a>
<FONT color="green">377</FONT>                            datScrTransform.transform(p1, p1);<a name="line.377"></a>
<FONT color="green">378</FONT>                            datScrTransform.transform(p2, p2);<a name="line.378"></a>
<FONT color="green">379</FONT>                            g.drawLine((int) p1.x, (int) p1.y, (int) p2.x, (int) p2.y);<a name="line.379"></a>
<FONT color="green">380</FONT>                            gy += hGridStep;<a name="line.380"></a>
<FONT color="green">381</FONT>                    }<a name="line.381"></a>
<FONT color="green">382</FONT>            }<a name="line.382"></a>
<FONT color="green">383</FONT>            <a name="line.383"></a>
<FONT color="green">384</FONT>            <a name="line.384"></a>
<FONT color="green">385</FONT>            // Plot vertical grid if it is alligned at x-axis units:<a name="line.385"></a>
<FONT color="green">386</FONT>            <a name="line.386"></a>
<FONT color="green">387</FONT>            if (VGridType.VGrid_XAUnitAligned == graphSetts.getVGridType()) {<a name="line.387"></a>
<FONT color="green">388</FONT>                    <a name="line.388"></a>
<FONT color="green">389</FONT>                    g.setColor(graphSetts.getVGridColour());<a name="line.389"></a>
<FONT color="green">390</FONT>                    <a name="line.390"></a>
<FONT color="green">391</FONT>                    double gx = dataViewport.x + vGridStep - (dataViewport.x % vGridStep);<a name="line.391"></a>
<FONT color="green">392</FONT>                    <a name="line.392"></a>
<FONT color="green">393</FONT>                    Point2D.Double p1 = new Point2D.Double();<a name="line.393"></a>
<FONT color="green">394</FONT>                    Point2D.Double p2 = new Point2D.Double();<a name="line.394"></a>
<FONT color="green">395</FONT>                    <a name="line.395"></a>
<FONT color="green">396</FONT>                    while (gx &lt;= dataViewport.x + dataViewport.width) {<a name="line.396"></a>
<FONT color="green">397</FONT>                            <a name="line.397"></a>
<FONT color="green">398</FONT>                            p1.setLocation(gx, dataViewport.y);<a name="line.398"></a>
<FONT color="green">399</FONT>                            p2.setLocation(gx, dataViewport.y - dataViewport.height);<a name="line.399"></a>
<FONT color="green">400</FONT>                            datScrTransform.transform(p1, p1);<a name="line.400"></a>
<FONT color="green">401</FONT>                            datScrTransform.transform(p2, p2);<a name="line.401"></a>
<FONT color="green">402</FONT>                            g.drawLine((int) p1.x, (int) p1.y, (int) p2.x, (int) p2.y);<a name="line.402"></a>
<FONT color="green">403</FONT>                            gx += vGridStep;<a name="line.403"></a>
<FONT color="green">404</FONT>                    }<a name="line.404"></a>
<FONT color="green">405</FONT>            }<a name="line.405"></a>
<FONT color="green">406</FONT>            <a name="line.406"></a>
<FONT color="green">407</FONT>            <a name="line.407"></a>
<FONT color="green">408</FONT>            // Plot vertical grid if it is alligned at dataset file indices:<a name="line.408"></a>
<FONT color="green">409</FONT>            <a name="line.409"></a>
<FONT color="green">410</FONT>            // Get any (e.g. the first) data series which will be drawn:    <a name="line.410"></a>
<FONT color="green">411</FONT>            SeriesScreenData firstSeriesVisible = null;<a name="line.411"></a>
<FONT color="green">412</FONT>            for (int s = 0; s &lt; screenDataBuffer.length; s++) {<a name="line.412"></a>
<FONT color="green">413</FONT>                    if (screenDataBuffer[s].doShow) {<a name="line.413"></a>
<FONT color="green">414</FONT>                            firstSeriesVisible = screenDataBuffer[s];<a name="line.414"></a>
<FONT color="green">415</FONT>                            break;<a name="line.415"></a>
<FONT color="green">416</FONT>                    }<a name="line.416"></a>
<FONT color="green">417</FONT>            }<a name="line.417"></a>
<FONT color="green">418</FONT>            <a name="line.418"></a>
<FONT color="green">419</FONT>            if (VGridType.VGrid_DSNumAligned == graphSetts.getVGridType()) {<a name="line.419"></a>
<FONT color="green">420</FONT>                    <a name="line.420"></a>
<FONT color="green">421</FONT>                    g.setColor(graphSetts.getVGridColour());<a name="line.421"></a>
<FONT color="green">422</FONT>                    <a name="line.422"></a>
<FONT color="green">423</FONT>                    int gy1 = VMARGIN;<a name="line.423"></a>
<FONT color="green">424</FONT>                    int gy2 = VMARGIN + screenSize.height;<a name="line.424"></a>
<FONT color="green">425</FONT>            <a name="line.425"></a>
<FONT color="green">426</FONT>                    int curDSInd, gx;<a name="line.426"></a>
<FONT color="green">427</FONT>                    int lastDSInd = firstSeriesVisible.dsIndices[0];<a name="line.427"></a>
<FONT color="green">428</FONT>                    for (int p = 0; p &lt; firstSeriesVisible.plotPoints; p++) {<a name="line.428"></a>
<FONT color="green">429</FONT>                            <a name="line.429"></a>
<FONT color="green">430</FONT>                            curDSInd = firstSeriesVisible.dsIndices[p];<a name="line.430"></a>
<FONT color="green">431</FONT>                            if (curDSInd - lastDSInd &gt;= vGridStep) {                             <a name="line.431"></a>
<FONT color="green">432</FONT>                                    gx = (int) firstSeriesVisible.points[p].x;<a name="line.432"></a>
<FONT color="green">433</FONT>                                    g.drawLine(gx, gy1, gx, gy2);<a name="line.433"></a>
<FONT color="green">434</FONT>                                    lastDSInd = curDSInd;                           <a name="line.434"></a>
<FONT color="green">435</FONT>                            }<a name="line.435"></a>
<FONT color="green">436</FONT>                            <a name="line.436"></a>
<FONT color="green">437</FONT>                    }               <a name="line.437"></a>
<FONT color="green">438</FONT>            }<a name="line.438"></a>
<FONT color="green">439</FONT>    } // private void paintGrids<a name="line.439"></a>
<FONT color="green">440</FONT>    <a name="line.440"></a>
<FONT color="green">441</FONT>    <a name="line.441"></a>
<FONT color="green">442</FONT>    /**<a name="line.442"></a>
<FONT color="green">443</FONT>     * Paints the coordinate axes.<a name="line.443"></a>
<FONT color="green">444</FONT>     * @param g The graphics context.<a name="line.444"></a>
<FONT color="green">445</FONT>     */<a name="line.445"></a>
<FONT color="green">446</FONT>    private void paintAxes(Graphics g) {<a name="line.446"></a>
<FONT color="green">447</FONT>            <a name="line.447"></a>
<FONT color="green">448</FONT>            // Setup font:<a name="line.448"></a>
<FONT color="green">449</FONT>            <a name="line.449"></a>
<FONT color="green">450</FONT>            Font font = g.getFont();<a name="line.450"></a>
<FONT color="green">451</FONT>            g.setFont(new Font(font.getName(), font.getStyle(), FONT_SIZE));<a name="line.451"></a>
<FONT color="green">452</FONT>            FontMetrics fMetrics = g.getFontMetrics();<a name="line.452"></a>
<FONT color="green">453</FONT>            <a name="line.453"></a>
<FONT color="green">454</FONT>            // Plot horisontal axis:<a name="line.454"></a>
<FONT color="green">455</FONT>            <a name="line.455"></a>
<FONT color="green">456</FONT>            int xAxisY = VMARGIN + screenSize.height;<a name="line.456"></a>
<FONT color="green">457</FONT>            Point sph = new Point();<a name="line.457"></a>
<FONT color="green">458</FONT>            <a name="line.458"></a>
<FONT color="green">459</FONT>            g.setColor(HAXIS_COL);<a name="line.459"></a>
<FONT color="green">460</FONT>            g.drawLine(HMARGIN / 2, xAxisY, HMARGIN * 3 / 2 + screenSize.width, xAxisY);<a name="line.460"></a>
<FONT color="green">461</FONT>            <a name="line.461"></a>
<FONT color="green">462</FONT>            int sx = HMARGIN;<a name="line.462"></a>
<FONT color="green">463</FONT>            while(true) {<a name="line.463"></a>
<FONT color="green">464</FONT>                    sph.setLocation(sx, xAxisY);<a name="line.464"></a>
<FONT color="green">465</FONT>                    Point2D.Double dp = screenToDataPoint(sph);<a name="line.465"></a>
<FONT color="green">466</FONT>                    String lbl = String.format("%.3f", dp.x);<a name="line.466"></a>
<FONT color="green">467</FONT>                    if (sx + 2 + fMetrics.stringWidth(lbl) + 2 &gt; HMARGIN * 2 + screenSize.width)<a name="line.467"></a>
<FONT color="green">468</FONT>                            break;<a name="line.468"></a>
<FONT color="green">469</FONT>                    if (HMARGIN &lt; sx)<a name="line.469"></a>
<FONT color="green">470</FONT>                            g.drawLine(sx, xAxisY - AXES_MARKS_SIZE / 2, sx, xAxisY + AXES_MARKS_SIZE / 2);                         <a name="line.470"></a>
<FONT color="green">471</FONT>                    g.drawString(lbl, sx + 2, xAxisY + AXES_MARKS_SIZE / 2 + fMetrics.getHeight());<a name="line.471"></a>
<FONT color="green">472</FONT>                    sx += AXES_LBL_GAP;<a name="line.472"></a>
<FONT color="green">473</FONT>            }<a name="line.473"></a>
<FONT color="green">474</FONT>            <a name="line.474"></a>
<FONT color="green">475</FONT>            <a name="line.475"></a>
<FONT color="green">476</FONT>            // Plot vertical axis:<a name="line.476"></a>
<FONT color="green">477</FONT>            <a name="line.477"></a>
<FONT color="green">478</FONT>            int yAxisX = HMARGIN;<a name="line.478"></a>
<FONT color="green">479</FONT>            Point spv = new Point();<a name="line.479"></a>
<FONT color="green">480</FONT>            <a name="line.480"></a>
<FONT color="green">481</FONT>            g.setColor(VAXIS_COL);<a name="line.481"></a>
<FONT color="green">482</FONT>            g.drawLine(yAxisX, VMARGIN * 3 / 2 + screenSize.height, yAxisX, VMARGIN / 2);<a name="line.482"></a>
<FONT color="green">483</FONT>            <a name="line.483"></a>
<FONT color="green">484</FONT>            int sy = VMARGIN + screenSize.height;<a name="line.484"></a>
<FONT color="green">485</FONT>            while(true) {<a name="line.485"></a>
<FONT color="green">486</FONT>                    spv.setLocation(yAxisX, sy);<a name="line.486"></a>
<FONT color="green">487</FONT>                    Point2D.Double dp = screenToDataPoint(spv);<a name="line.487"></a>
<FONT color="green">488</FONT>                    String lbl = String.format("%.3f", dp.y);<a name="line.488"></a>
<FONT color="green">489</FONT>                    if (sy - 2 - fMetrics.getHeight() - 2 &lt; 0)<a name="line.489"></a>
<FONT color="green">490</FONT>                            break;<a name="line.490"></a>
<FONT color="green">491</FONT>                    if (VMARGIN + screenSize.height &gt; sy)<a name="line.491"></a>
<FONT color="green">492</FONT>                            g.drawLine(yAxisX - AXES_MARKS_SIZE / 2, sy, yAxisX + AXES_MARKS_SIZE / 2, sy);                         <a name="line.492"></a>
<FONT color="green">493</FONT>                    g.drawString(lbl, yAxisX + AXES_MARKS_SIZE / 2 + 2, sy - 2);<a name="line.493"></a>
<FONT color="green">494</FONT>                    sy -= AXES_LBL_GAP;<a name="line.494"></a>
<FONT color="green">495</FONT>            }<a name="line.495"></a>
<FONT color="green">496</FONT>            <a name="line.496"></a>
<FONT color="green">497</FONT>    } // private void paintAxes<a name="line.497"></a>
<FONT color="green">498</FONT>    <a name="line.498"></a>
<FONT color="green">499</FONT>    <a name="line.499"></a>
<FONT color="green">500</FONT>    /**<a name="line.500"></a>
<FONT color="green">501</FONT>     * Paints the data series.<a name="line.501"></a>
<FONT color="green">502</FONT>     * @param g The graphics context.<a name="line.502"></a>
<FONT color="green">503</FONT>     */<a name="line.503"></a>
<FONT color="green">504</FONT>    private void paintData(Graphics g) {<a name="line.504"></a>
<FONT color="green">505</FONT>            <a name="line.505"></a>
<FONT color="green">506</FONT>            // Get any (e.g. the first) data series which will be drawn:    <a name="line.506"></a>
<FONT color="green">507</FONT>            SeriesScreenData firstSeriesVisible = null;<a name="line.507"></a>
<FONT color="green">508</FONT>            for (int s = 0; s &lt; screenDataBuffer.length; s++) {<a name="line.508"></a>
<FONT color="green">509</FONT>                    if (screenDataBuffer[s].doShow) {<a name="line.509"></a>
<FONT color="green">510</FONT>                            firstSeriesVisible = screenDataBuffer[s];<a name="line.510"></a>
<FONT color="green">511</FONT>                            break;<a name="line.511"></a>
<FONT color="green">512</FONT>                    }<a name="line.512"></a>
<FONT color="green">513</FONT>            }<a name="line.513"></a>
<FONT color="green">514</FONT>            <a name="line.514"></a>
<FONT color="green">515</FONT>            // Plot data:   <a name="line.515"></a>
<FONT color="green">516</FONT>            boolean drawPoints = true;<a name="line.516"></a>
<FONT color="green">517</FONT>            if (0 &lt; firstSeriesVisible.plotPoints)<a name="line.517"></a>
<FONT color="green">518</FONT>                    drawPoints = (screenSize.width / firstSeriesVisible.plotPoints &gt; 4 * DATAPOINT_RAD);<a name="line.518"></a>
<FONT color="green">519</FONT>            <a name="line.519"></a>
<FONT color="green">520</FONT>            SeriesScreenData series = null;<a name="line.520"></a>
<FONT color="green">521</FONT>            for (int s = 0; s &lt; screenDataBuffer.length; s++) {<a name="line.521"></a>
<FONT color="green">522</FONT>                    <a name="line.522"></a>
<FONT color="green">523</FONT>                    series = screenDataBuffer[s];<a name="line.523"></a>
<FONT color="green">524</FONT>                    if (!series.doShow)<a name="line.524"></a>
<FONT color="green">525</FONT>                            continue;<a name="line.525"></a>
<FONT color="green">526</FONT>                    <a name="line.526"></a>
<FONT color="green">527</FONT>                    g.setColor(series.colour);<a name="line.527"></a>
<FONT color="green">528</FONT>                    <a name="line.528"></a>
<FONT color="green">529</FONT>                    Point2D.Double[] points = series.points;<a name="line.529"></a>
<FONT color="green">530</FONT>                    int x1 = (int) points[0].x;<a name="line.530"></a>
<FONT color="green">531</FONT>                    int y1 = (int) points[0].y;<a name="line.531"></a>
<FONT color="green">532</FONT>                    int x2, y2;<a name="line.532"></a>
<FONT color="green">533</FONT>                    boolean connect = true;<a name="line.533"></a>
<FONT color="green">534</FONT>                    for (int p = 0; p &lt; series.plotPoints; p++) {        <a name="line.534"></a>
<FONT color="green">535</FONT>                            if (Double.isNaN(points[p].x) || Double.isNaN(points[p].y)<a name="line.535"></a>
<FONT color="green">536</FONT>                                            || Double.isInfinite(points[p].x) || Double.isInfinite(points[p].y)) {<a name="line.536"></a>
<FONT color="green">537</FONT>                                    connect = false;<a name="line.537"></a>
<FONT color="green">538</FONT>                                    continue;                               <a name="line.538"></a>
<FONT color="green">539</FONT>                            }                       <a name="line.539"></a>
<FONT color="green">540</FONT>                            x2 = (int) points[p].x;<a name="line.540"></a>
<FONT color="green">541</FONT>                            y2 = (int) points[p].y;<a name="line.541"></a>
<FONT color="green">542</FONT>                            if (!connect) {<a name="line.542"></a>
<FONT color="green">543</FONT>                                    x1 = x2;<a name="line.543"></a>
<FONT color="green">544</FONT>                                    y1 = y2;<a name="line.544"></a>
<FONT color="green">545</FONT>                                    connect = true;<a name="line.545"></a>
<FONT color="green">546</FONT>                            }<a name="line.546"></a>
<FONT color="green">547</FONT>                            g.drawLine(x1, y1, x2, y2);<a name="line.547"></a>
<FONT color="green">548</FONT>                            if (drawPoints) {<a name="line.548"></a>
<FONT color="green">549</FONT>                                    g.drawLine(x2 - DATAPOINT_RAD, y2 - DATAPOINT_RAD, x2 + DATAPOINT_RAD, y2 + DATAPOINT_RAD);<a name="line.549"></a>
<FONT color="green">550</FONT>                                    g.drawLine(x2 - DATAPOINT_RAD, y2 + DATAPOINT_RAD, x2 + DATAPOINT_RAD, y2 - DATAPOINT_RAD);<a name="line.550"></a>
<FONT color="green">551</FONT>                                    g.drawLine(x2, y2 + DATAPOINT_RAD, x2, y2 - DATAPOINT_RAD);<a name="line.551"></a>
<FONT color="green">552</FONT>                                    g.drawLine(x2 - DATAPOINT_RAD, y2, x2 + DATAPOINT_RAD, y2);<a name="line.552"></a>
<FONT color="green">553</FONT>                            }<a name="line.553"></a>
<FONT color="green">554</FONT>                            if (series.hlPoints[p]) {<a name="line.554"></a>
<FONT color="green">555</FONT>                                    g.drawOval(x2 - DATAPOINT_RAD - 1, y2 - DATAPOINT_RAD - 1, 2 + 2 * DATAPOINT_RAD, 2 + 2 * DATAPOINT_RAD);<a name="line.555"></a>
<FONT color="green">556</FONT>                            }<a name="line.556"></a>
<FONT color="green">557</FONT>                            x1 = x2;<a name="line.557"></a>
<FONT color="green">558</FONT>                            y1 = y2;<a name="line.558"></a>
<FONT color="green">559</FONT>                    }<a name="line.559"></a>
<FONT color="green">560</FONT>            }<a name="line.560"></a>
<FONT color="green">561</FONT>    } // private void paintData<a name="line.561"></a>
<FONT color="green">562</FONT>    <a name="line.562"></a>
<FONT color="green">563</FONT>    <a name="line.563"></a>
<FONT color="green">564</FONT>    /**<a name="line.564"></a>
<FONT color="green">565</FONT>     * Computes the screen coordinates for the visible data series.<a name="line.565"></a>
<FONT color="green">566</FONT>     */<a name="line.566"></a>
<FONT color="green">567</FONT>    private synchronized void computeScreenData() {<a name="line.567"></a>
<FONT color="green">568</FONT>            <a name="line.568"></a>
<FONT color="green">569</FONT>            if (dataComputationRunning)<a name="line.569"></a>
<FONT color="green">570</FONT>                    return;<a name="line.570"></a>
<FONT color="green">571</FONT>            <a name="line.571"></a>
<FONT color="green">572</FONT>            if (screenTooSmall())<a name="line.572"></a>
<FONT color="green">573</FONT>                    return;<a name="line.573"></a>
<FONT color="green">574</FONT>            <a name="line.574"></a>
<FONT color="green">575</FONT>            dataComputationRunning = true;<a name="line.575"></a>
<FONT color="green">576</FONT>            <a name="line.576"></a>
<FONT color="green">577</FONT>            computeXCoordinates();<a name="line.577"></a>
<FONT color="green">578</FONT>            <a name="line.578"></a>
<FONT color="green">579</FONT>            showAtLeastOneSeries = false;<a name="line.579"></a>
<FONT color="green">580</FONT>            int seriesCount = dataCache.countDataSeries();<a name="line.580"></a>
<FONT color="green">581</FONT>            for (int s = 0; s &lt; seriesCount; s++) {<a name="line.581"></a>
<FONT color="green">582</FONT>                    <a name="line.582"></a>
<FONT color="green">583</FONT>                    if (!seriesSetts.getShow(s)) {<a name="line.583"></a>
<FONT color="green">584</FONT>                            screenDataBuffer[s].doShow = false;<a name="line.584"></a>
<FONT color="green">585</FONT>                            continue;<a name="line.585"></a>
<FONT color="green">586</FONT>                    }<a name="line.586"></a>
<FONT color="green">587</FONT>                    <a name="line.587"></a>
<FONT color="green">588</FONT>                    screenDataBuffer[s].doShow = true;<a name="line.588"></a>
<FONT color="green">589</FONT>                    showAtLeastOneSeries = true;<a name="line.589"></a>
<FONT color="green">590</FONT>                    computeScreenDataForSeries(s);          <a name="line.590"></a>
<FONT color="green">591</FONT>            }<a name="line.591"></a>
<FONT color="green">592</FONT>            <a name="line.592"></a>
<FONT color="green">593</FONT>            dataComputationRunning = false;<a name="line.593"></a>
<FONT color="green">594</FONT>    }<a name="line.594"></a>
<FONT color="green">595</FONT>    <a name="line.595"></a>
<FONT color="green">596</FONT>    /**<a name="line.596"></a>
<FONT color="green">597</FONT>     * Compute the x coordinates in data space according to the current settings.<a name="line.597"></a>
<FONT color="green">598</FONT>     */<a name="line.598"></a>
<FONT color="green">599</FONT>    private void computeXCoordinates() {<a name="line.599"></a>
<FONT color="green">600</FONT>            <a name="line.600"></a>
<FONT color="green">601</FONT>            // If the option is to use a data series, but the index is invalid, we default to dataset numbers:<a name="line.601"></a>
<FONT color="green">602</FONT>            <a name="line.602"></a>
<FONT color="green">603</FONT>            XAxisType xAxisType = graphSetts.getXAxisType();<a name="line.603"></a>
<FONT color="green">604</FONT>            int xSerInd = -1;<a name="line.604"></a>
<FONT color="green">605</FONT>            if (XAxisType.XAxis_DSNum != xAxisType) {<a name="line.605"></a>
<FONT color="green">606</FONT>                    xSerInd = graphSetts.getXAxisSeriesIndex();             <a name="line.606"></a>
<FONT color="green">607</FONT>                    if (0 &gt; xSerInd || dataCache.countDataSeries() &lt;= xSerInd)<a name="line.607"></a>
<FONT color="green">608</FONT>                            xAxisType = XAxisType.XAxis_DSNum;              <a name="line.608"></a>
<FONT color="green">609</FONT>            }<a name="line.609"></a>
<FONT color="green">610</FONT>            <a name="line.610"></a>
<FONT color="green">611</FONT>            // Now we can follow the secure option:<a name="line.611"></a>
<FONT color="green">612</FONT>            <a name="line.612"></a>
<FONT color="green">613</FONT>            int dataLen = dataCache.countDataSets();<a name="line.613"></a>
<FONT color="green">614</FONT>            <a name="line.614"></a>
<FONT color="green">615</FONT>            switch(xAxisType) {<a name="line.615"></a>
<FONT color="green">616</FONT>                    <a name="line.616"></a>
<FONT color="green">617</FONT>                    case XAxis_DSNum:                       <a name="line.617"></a>
<FONT color="green">618</FONT>                            for (int i = 0; i &lt; dataLen; i++)<a name="line.618"></a>
<FONT color="green">619</FONT>                                    xCoordinates[i] = dataCache.getDataSet(i).getDataFileIndex();<a name="line.619"></a>
<FONT color="green">620</FONT>                            break;                  <a name="line.620"></a>
<FONT color="green">621</FONT>                            <a name="line.621"></a>
<FONT color="green">622</FONT>                    case XAxis_DataValSimple:<a name="line.622"></a>
<FONT color="green">623</FONT>                            for (int i = 0; i &lt; dataLen; i++)<a name="line.623"></a>
<FONT color="green">624</FONT>                                    xCoordinates[i] = dataCache.getDataSet(i).getValue(xSerInd);<a name="line.624"></a>
<FONT color="green">625</FONT>                            break;<a name="line.625"></a>
<FONT color="green">626</FONT>                            <a name="line.626"></a>
<FONT color="green">627</FONT>                    case XAxis_DataValScaledSet:<a name="line.627"></a>
<FONT color="green">628</FONT>                            double factor = graphSetts.getXAxisScaleValue();<a name="line.628"></a>
<FONT color="green">629</FONT>                            for (int i = 0; i &lt; dataLen; i++)<a name="line.629"></a>
<FONT color="green">630</FONT>                                    xCoordinates[i] = dataCache.getDataSet(i).getValue(xSerInd) * factor;<a name="line.630"></a>
<FONT color="green">631</FONT>                            break;<a name="line.631"></a>
<FONT color="green">632</FONT>                            <a name="line.632"></a>
<FONT color="green">633</FONT>                    case XAxis_DataValTrans0to1:<a name="line.633"></a>
<FONT color="green">634</FONT>                            DataSeries xSer = dataCache.getDataSeries(xSerInd);<a name="line.634"></a>
<FONT color="green">635</FONT>                            double transfShift = xSer.getMinValue();<a name="line.635"></a>
<FONT color="green">636</FONT>                            double transfScale = xSer.getMaxValue() - transfShift;<a name="line.636"></a>
<FONT color="green">637</FONT>                            transfScale = (0 == transfScale ? 0. : 1. / transfScale);<a name="line.637"></a>
<FONT color="green">638</FONT>                            for (int i = 0; i &lt; dataLen; i++)<a name="line.638"></a>
<FONT color="green">639</FONT>                                    xCoordinates[i] = (dataCache.getDataSet(i).getValue(xSerInd) - transfShift) * transfScale;<a name="line.639"></a>
<FONT color="green">640</FONT>                            break;<a name="line.640"></a>
<FONT color="green">641</FONT>                            <a name="line.641"></a>
<FONT color="green">642</FONT>                    default:<a name="line.642"></a>
<FONT color="green">643</FONT>                            throw new Error("Unexpected x axis type");<a name="line.643"></a>
<FONT color="green">644</FONT>            }<a name="line.644"></a>
<FONT color="green">645</FONT>    }<a name="line.645"></a>
<FONT color="green">646</FONT>    <a name="line.646"></a>
<FONT color="green">647</FONT>    /**<a name="line.647"></a>
<FONT color="green">648</FONT>     * Compute the screen coordinates for the specified series.<a name="line.648"></a>
<FONT color="green">649</FONT>     * <a name="line.649"></a>
<FONT color="green">650</FONT>     * @param seriesIndex The cache index of the series to be computed.<a name="line.650"></a>
<FONT color="green">651</FONT>     */<a name="line.651"></a>
<FONT color="green">652</FONT>    private void computeScreenDataForSeries(int seriesIndex) {<a name="line.652"></a>
<FONT color="green">653</FONT>            <a name="line.653"></a>
<FONT color="green">654</FONT>            boolean dataComputationWasRunning = dataComputationRunning;<a name="line.654"></a>
<FONT color="green">655</FONT>            dataComputationRunning = true;<a name="line.655"></a>
<FONT color="green">656</FONT>            <a name="line.656"></a>
<FONT color="green">657</FONT>            // Preset data:<a name="line.657"></a>
<FONT color="green">658</FONT>            int dataPointCount = dataCache.countDataSets();<a name="line.658"></a>
<FONT color="green">659</FONT>            <a name="line.659"></a>
<FONT color="green">660</FONT>            SeriesScreenData scrData = screenDataBuffer[seriesIndex];<a name="line.660"></a>
<FONT color="green">661</FONT>            scrData.plotPoints = 0; <a name="line.661"></a>
<FONT color="green">662</FONT>            <a name="line.662"></a>
<FONT color="green">663</FONT>            // Look at each data point of the series:<a name="line.663"></a>
<FONT color="green">664</FONT>            int sp = 0;<a name="line.664"></a>
<FONT color="green">665</FONT>            double x, y; DataSet ds;        <a name="line.665"></a>
<FONT color="green">666</FONT>            for (int dp = 0; dp &lt; dataPointCount; dp++) {<a name="line.666"></a>
<FONT color="green">667</FONT>                    <a name="line.667"></a>
<FONT color="green">668</FONT>                    // Get raw Y and X:<a name="line.668"></a>
<FONT color="green">669</FONT>                    ds = dataCache.getDataSet(dp);<a name="line.669"></a>
<FONT color="green">670</FONT>                    y = ds.getValue(seriesIndex);           <a name="line.670"></a>
<FONT color="green">671</FONT>                    y = scrData.transformer.transf(y);<a name="line.671"></a>
<FONT color="green">672</FONT>                    x = xCoordinates[dp];<a name="line.672"></a>
<FONT color="green">673</FONT>                    <a name="line.673"></a>
<FONT color="green">674</FONT>                    // Transform the point to screen coordinates:<a name="line.674"></a>
<FONT color="green">675</FONT>                    scrData.dsIndices[sp] = ds.getDataFileIndex();<a name="line.675"></a>
<FONT color="green">676</FONT>                    scrData.points[sp].y = y;<a name="line.676"></a>
<FONT color="green">677</FONT>                    scrData.points[sp].x = x;<a name="line.677"></a>
<FONT color="green">678</FONT>                    datScrTransform.transform(scrData.points[sp], scrData.points[sp]);<a name="line.678"></a>
<FONT color="green">679</FONT>                    <a name="line.679"></a>
<FONT color="green">680</FONT>                    // Save point index for latter sorting:<a name="line.680"></a>
<FONT color="green">681</FONT>                    scrData.sortedPoints[sp].val = sp;<a name="line.681"></a>
<FONT color="green">682</FONT>                    <a name="line.682"></a>
<FONT color="green">683</FONT>                    sp++;<a name="line.683"></a>
<FONT color="green">684</FONT>            }<a name="line.684"></a>
<FONT color="green">685</FONT>            <a name="line.685"></a>
<FONT color="green">686</FONT>            // Save the number of points actually computed:<a name="line.686"></a>
<FONT color="green">687</FONT>            scrData.plotPoints = sp;<a name="line.687"></a>
<FONT color="green">688</FONT>            <a name="line.688"></a>
<FONT color="green">689</FONT>            // Sort points for fast access when highlighting with the mouse:<a name="line.689"></a>
<FONT color="green">690</FONT>            if (highlightPoints) {<a name="line.690"></a>
<FONT color="green">691</FONT>                    Arrays.fill(scrData.hlPoints, 0, sp, false);<a name="line.691"></a>
<FONT color="green">692</FONT>                    pointsByIndexComparator.setSeries(scrData);<a name="line.692"></a>
<FONT color="green">693</FONT>                    Arrays.sort(scrData.sortedPoints, 0, sp, pointsByIndexComparator);<a name="line.693"></a>
<FONT color="green">694</FONT>            }<a name="line.694"></a>
<FONT color="green">695</FONT>            <a name="line.695"></a>
<FONT color="green">696</FONT>            dataComputationRunning = dataComputationWasRunning;<a name="line.696"></a>
<FONT color="green">697</FONT>    }<a name="line.697"></a>
<FONT color="green">698</FONT>    <a name="line.698"></a>
<FONT color="green">699</FONT>    <a name="line.699"></a>
<FONT color="green">700</FONT>    /**<a name="line.700"></a>
<FONT color="green">701</FONT>     * Highlights the points around the specified point.<a name="line.701"></a>
<FONT color="green">702</FONT>     * This is normally called when the mouse is moved over the plotter canvas.<a name="line.702"></a>
<FONT color="green">703</FONT>     * <a name="line.703"></a>
<FONT color="green">704</FONT>     * @param sp A marker screen point.<a name="line.704"></a>
<FONT color="green">705</FONT>     * @return A list of series indices on which at least one point was highlighted.<a name="line.705"></a>
<FONT color="green">706</FONT>     */<a name="line.706"></a>
<FONT color="green">707</FONT>    public List&lt;Integer&gt; highlightAround(Point sp) {<a name="line.707"></a>
<FONT color="green">708</FONT>            <a name="line.708"></a>
<FONT color="green">709</FONT>            // If highlighting should not be done for a reason, we do not highlight anything:<a name="line.709"></a>
<FONT color="green">710</FONT>            if (pointHighlightComputationRunning || dataComputationRunning || !highlightPoints) {<a name="line.710"></a>
<FONT color="green">711</FONT>                    List&lt;Integer&gt; hlSeries = Collections.emptyList();<a name="line.711"></a>
<FONT color="green">712</FONT>                    return hlSeries;<a name="line.712"></a>
<FONT color="green">713</FONT>            }<a name="line.713"></a>
<FONT color="green">714</FONT>            <a name="line.714"></a>
<FONT color="green">715</FONT>            pointHighlightComputationRunning = true;<a name="line.715"></a>
<FONT color="green">716</FONT>            <a name="line.716"></a>
<FONT color="green">717</FONT>            List&lt;Integer&gt; hlSeries = new ArrayList&lt;Integer&gt;();<a name="line.717"></a>
<FONT color="green">718</FONT>            <a name="line.718"></a>
<FONT color="green">719</FONT>            // Get the rectabgle within which points will be highlighted:<a name="line.719"></a>
<FONT color="green">720</FONT>            Rectangle sRect = new Rectangle(sp.x - DATAPOINT_RAD - 1, sp.y - DATAPOINT_RAD - 1,<a name="line.720"></a>
<FONT color="green">721</FONT>                                                                            1 + 2 * (DATAPOINT_RAD + 1),1 + 2 * (DATAPOINT_RAD + 1));<a name="line.721"></a>
<FONT color="green">722</FONT>            <a name="line.722"></a>
<FONT color="green">723</FONT>            // Look for points to highlight on each series:<a name="line.723"></a>
<FONT color="green">724</FONT>            SeriesScreenData series;<a name="line.724"></a>
<FONT color="green">725</FONT>            for (int s = 0; s &lt; screenDataBuffer.length; s++) {<a name="line.725"></a>
<FONT color="green">726</FONT>                    <a name="line.726"></a>
<FONT color="green">727</FONT>                    series = screenDataBuffer[s];<a name="line.727"></a>
<FONT color="green">728</FONT>                    <a name="line.728"></a>
<FONT color="green">729</FONT>                    // Skip series which are not plotted:<a name="line.729"></a>
<FONT color="green">730</FONT>                    if (null == series || !series.doShow)<a name="line.730"></a>
<FONT color="green">731</FONT>                            continue;<a name="line.731"></a>
<FONT color="green">732</FONT>                    <a name="line.732"></a>
<FONT color="green">733</FONT>                    // Clear highlight flags fopr all points of the series:<a name="line.733"></a>
<FONT color="green">734</FONT>                    boolean hlThisSeries = false;<a name="line.734"></a>
<FONT color="green">735</FONT>                    Arrays.fill(series.hlPoints, 0, series.plotPoints, false);<a name="line.735"></a>
<FONT color="green">736</FONT>                    <a name="line.736"></a>
<FONT color="green">737</FONT>                    // Find index at which the marker point would be inserted into the x-sorted series points array: <a name="line.737"></a>
<FONT color="green">738</FONT>                    pointsByIndexComparator.setSeries(series);<a name="line.738"></a>
<FONT color="green">739</FONT>                    series.points[DataCache.CACHE_SIZE].setLocation(sp.x, sp.y);<a name="line.739"></a>
<FONT color="green">740</FONT>                    int mi = Arrays.binarySearch(series.sortedPoints, 0, series.plotPoints,<a name="line.740"></a>
<FONT color="green">741</FONT>                                                                             new MutableInt(DataCache.CACHE_SIZE), pointsByIndexComparator);<a name="line.741"></a>
<FONT color="green">742</FONT>                    if (0 &gt; mi)  mi = -mi;<a name="line.742"></a>
<FONT color="green">743</FONT>                    <a name="line.743"></a>
<FONT color="green">744</FONT>                    // Extend array index to the left to include all points within the selection rectangle:<a name="line.744"></a>
<FONT color="green">745</FONT>                    int li = mi;<a name="line.745"></a>
<FONT color="green">746</FONT>                    if (li &gt;= series.plotPoints) {<a name="line.746"></a>
<FONT color="green">747</FONT>                            li = series.plotPoints - 1;<a name="line.747"></a>
<FONT color="green">748</FONT>                    } else {<a name="line.748"></a>
<FONT color="green">749</FONT>                            while (0 &lt;= li &amp;&amp; series.points[series.sortedPoints[li].val].x &gt;= sRect.x)<a name="line.749"></a>
<FONT color="green">750</FONT>                                    li--;<a name="line.750"></a>
<FONT color="green">751</FONT>                            if (-1 == li) li = 0;<a name="line.751"></a>
<FONT color="green">752</FONT>                    }<a name="line.752"></a>
<FONT color="green">753</FONT>                    <a name="line.753"></a>
<FONT color="green">754</FONT>                    // Extend array index to the right to include all points within the selection rectangle:<a name="line.754"></a>
<FONT color="green">755</FONT>                    int ri = mi;<a name="line.755"></a>
<FONT color="green">756</FONT>                    int sRectRB = sRect.x + sRect.width;<a name="line.756"></a>
<FONT color="green">757</FONT>                    while (0 &lt;= ri &amp;&amp; ri &lt; series.plotPoints &amp;&amp; series.points[series.sortedPoints[ri].val].x &lt;= sRectRB)<a name="line.757"></a>
<FONT color="green">758</FONT>                            ri++;<a name="line.758"></a>
<FONT color="green">759</FONT>                    if (ri &gt;= series.plotPoints) ri = series.plotPoints - 1;<a name="line.759"></a>
<FONT color="green">760</FONT>                    <a name="line.760"></a>
<FONT color="green">761</FONT>                    // Now loop through the points within the determined index boundaries:<a name="line.761"></a>
<FONT color="green">762</FONT>                    for (int i = li; i &lt;= ri; i++) {<a name="line.762"></a>
<FONT color="green">763</FONT>                    <a name="line.763"></a>
<FONT color="green">764</FONT>                            // Highlight a point iff it actually lies within the selection rectangle:<a name="line.764"></a>
<FONT color="green">765</FONT>                            if (sRect.contains(series.points[series.sortedPoints[i].val])) {<a name="line.765"></a>
<FONT color="green">766</FONT>                                    series.hlPoints[series.sortedPoints[i].val] = true;<a name="line.766"></a>
<FONT color="green">767</FONT>                                    hlThisSeries = true;<a name="line.767"></a>
<FONT color="green">768</FONT>                            }                       <a name="line.768"></a>
<FONT color="green">769</FONT>                    }<a name="line.769"></a>
<FONT color="green">770</FONT>    <a name="line.770"></a>
<FONT color="green">771</FONT>                    // If at least one point on the series was highlighted,<a name="line.771"></a>
<FONT color="green">772</FONT>                    // than we add the series index to the highlighted series list:<a name="line.772"></a>
<FONT color="green">773</FONT>                    if (hlThisSeries)<a name="line.773"></a>
<FONT color="green">774</FONT>                            hlSeries.add(s);<a name="line.774"></a>
<FONT color="green">775</FONT>                    <a name="line.775"></a>
<FONT color="green">776</FONT>            }<a name="line.776"></a>
<FONT color="green">777</FONT>            <a name="line.777"></a>
<FONT color="green">778</FONT>            // Done:<a name="line.778"></a>
<FONT color="green">779</FONT>            pointHighlightComputationRunning = false;<a name="line.779"></a>
<FONT color="green">780</FONT>            return hlSeries;<a name="line.780"></a>
<FONT color="green">781</FONT>    }<a name="line.781"></a>
<FONT color="green">782</FONT>    <a name="line.782"></a>
<FONT color="green">783</FONT>    /**<a name="line.783"></a>
<FONT color="green">784</FONT>     * Computes the actual grid mesh sizes taking in account the current plot size.<a name="line.784"></a>
<FONT color="green">785</FONT>     */<a name="line.785"></a>
<FONT color="green">786</FONT>    private void computeGridSteps() {<a name="line.786"></a>
<FONT color="green">787</FONT>            <a name="line.787"></a>
<FONT color="green">788</FONT>            // For horizontal grid:<a name="line.788"></a>
<FONT color="green">789</FONT>            <a name="line.789"></a>
<FONT color="green">790</FONT>            if (HGridType.HGrid_Simple == graphSetts.getHGridType()) {<a name="line.790"></a>
<FONT color="green">791</FONT>                    <a name="line.791"></a>
<FONT color="green">792</FONT>                    boolean hStepChanged = false;<a name="line.792"></a>
<FONT color="green">793</FONT>                    <a name="line.793"></a>
<FONT color="green">794</FONT>                    if (hGridStep != userHGridStep) {<a name="line.794"></a>
<FONT color="green">795</FONT>                            hGridStep = userHGridStep;<a name="line.795"></a>
<FONT color="green">796</FONT>                            hStepChanged = true;<a name="line.796"></a>
<FONT color="green">797</FONT>                    }<a name="line.797"></a>
<FONT color="green">798</FONT>                    <a name="line.798"></a>
<FONT color="green">799</FONT>                    if (hGridStep &lt; 0.0) {<a name="line.799"></a>
<FONT color="green">800</FONT>                            hGridStep = -hGridStep;<a name="line.800"></a>
<FONT color="green">801</FONT>                            hStepChanged = true;<a name="line.801"></a>
<FONT color="green">802</FONT>                    }<a name="line.802"></a>
<FONT color="green">803</FONT>                                     <a name="line.803"></a>
<FONT color="green">804</FONT>                    double minHGridStep = dataViewport.height * MIN_GRIDLINE_DIST / screenSize.height;<a name="line.804"></a>
<FONT color="green">805</FONT>                    if (hGridStep &lt; minHGridStep<a name="line.805"></a>
<FONT color="green">806</FONT>                                    &amp;&amp; !Double.isInfinite(dataViewport.height) &amp;&amp; 0. != dataViewport.height) {<a name="line.806"></a>
<FONT color="green">807</FONT>                            <a name="line.807"></a>
<FONT color="green">808</FONT>                            hGridStep = minHGridStep;<a name="line.808"></a>
<FONT color="green">809</FONT>                            double rounded = Double.parseDouble(String.format("%.3f", hGridStep));<a name="line.809"></a>
<FONT color="green">810</FONT>                            if (rounded &lt; hGridStep)<a name="line.810"></a>
<FONT color="green">811</FONT>                                    hGridStep = Double.parseDouble(String.format("%.3f", rounded + 0.001));<a name="line.811"></a>
<FONT color="green">812</FONT>                            else<a name="line.812"></a>
<FONT color="green">813</FONT>                                    hGridStep = rounded;<a name="line.813"></a>
<FONT color="green">814</FONT>                            <a name="line.814"></a>
<FONT color="green">815</FONT>                            hStepChanged = true;<a name="line.815"></a>
<FONT color="green">816</FONT>                    }<a name="line.816"></a>
<FONT color="green">817</FONT>                    <a name="line.817"></a>
<FONT color="green">818</FONT>                    if (hStepChanged) {<a name="line.818"></a>
<FONT color="green">819</FONT>                            selfSettingHGridSize = true;<a name="line.819"></a>
<FONT color="green">820</FONT>                            graphSetts.setHGridSize(hGridStep);<a name="line.820"></a>
<FONT color="green">821</FONT>                            selfSettingHGridSize = false;<a name="line.821"></a>
<FONT color="green">822</FONT>                    }<a name="line.822"></a>
<FONT color="green">823</FONT>            }<a name="line.823"></a>
<FONT color="green">824</FONT>            <a name="line.824"></a>
<FONT color="green">825</FONT>            // For vertical grid if it is x-axis unit-alligned:<a name="line.825"></a>
<FONT color="green">826</FONT>            <a name="line.826"></a>
<FONT color="green">827</FONT>            if (VGridType.VGrid_XAUnitAligned == graphSetts.getVGridType()) {<a name="line.827"></a>
<FONT color="green">828</FONT>                    <a name="line.828"></a>
<FONT color="green">829</FONT>                    boolean vStepChanged = false;<a name="line.829"></a>
<FONT color="green">830</FONT>                    <a name="line.830"></a>
<FONT color="green">831</FONT>                    if (vGridStep != userVGridStep) {<a name="line.831"></a>
<FONT color="green">832</FONT>                            vGridStep = userVGridStep;<a name="line.832"></a>
<FONT color="green">833</FONT>                            vStepChanged = true;<a name="line.833"></a>
<FONT color="green">834</FONT>                    }<a name="line.834"></a>
<FONT color="green">835</FONT>                    <a name="line.835"></a>
<FONT color="green">836</FONT>                    if (vGridStep &lt; 0.0) {<a name="line.836"></a>
<FONT color="green">837</FONT>                            vGridStep = -vGridStep;<a name="line.837"></a>
<FONT color="green">838</FONT>                            vStepChanged = true;<a name="line.838"></a>
<FONT color="green">839</FONT>                    }<a name="line.839"></a>
<FONT color="green">840</FONT>                                     <a name="line.840"></a>
<FONT color="green">841</FONT>                    double minVGridStep = dataViewport.width * MIN_GRIDLINE_DIST / screenSize.width;<a name="line.841"></a>
<FONT color="green">842</FONT>                    if (vGridStep &lt; minVGridStep<a name="line.842"></a>
<FONT color="green">843</FONT>                                    &amp;&amp; !Double.isInfinite(dataViewport.width) &amp;&amp; 0. != dataViewport.width) {<a name="line.843"></a>
<FONT color="green">844</FONT>                            <a name="line.844"></a>
<FONT color="green">845</FONT>                            vGridStep = minVGridStep;<a name="line.845"></a>
<FONT color="green">846</FONT>                            double rounded = Double.parseDouble(String.format("%.3f", vGridStep));<a name="line.846"></a>
<FONT color="green">847</FONT>                            if (rounded &lt; vGridStep)<a name="line.847"></a>
<FONT color="green">848</FONT>                                    vGridStep = Double.parseDouble(String.format("%.3f", rounded + 0.001));<a name="line.848"></a>
<FONT color="green">849</FONT>                            else<a name="line.849"></a>
<FONT color="green">850</FONT>                                    vGridStep = rounded;<a name="line.850"></a>
<FONT color="green">851</FONT>                            <a name="line.851"></a>
<FONT color="green">852</FONT>                            vStepChanged = true;<a name="line.852"></a>
<FONT color="green">853</FONT>                    }<a name="line.853"></a>
<FONT color="green">854</FONT>                    <a name="line.854"></a>
<FONT color="green">855</FONT>                    if (vStepChanged) {<a name="line.855"></a>
<FONT color="green">856</FONT>                            selfSettingVGridSize = true;<a name="line.856"></a>
<FONT color="green">857</FONT>                            graphSetts.setVGridSize(vGridStep);<a name="line.857"></a>
<FONT color="green">858</FONT>                            selfSettingVGridSize = false;<a name="line.858"></a>
<FONT color="green">859</FONT>                    }<a name="line.859"></a>
<FONT color="green">860</FONT>            }<a name="line.860"></a>
<FONT color="green">861</FONT>            <a name="line.861"></a>
<FONT color="green">862</FONT>            // For vertical grid if it is dataset-alligned:<a name="line.862"></a>
<FONT color="green">863</FONT>            <a name="line.863"></a>
<FONT color="green">864</FONT>            if (VGridType.VGrid_DSNumAligned == graphSetts.getVGridType()) {<a name="line.864"></a>
<FONT color="green">865</FONT>                    <a name="line.865"></a>
<FONT color="green">866</FONT>                    boolean vStepChanged = false;<a name="line.866"></a>
<FONT color="green">867</FONT>                    <a name="line.867"></a>
<FONT color="green">868</FONT>                    if (vGridStep != userVGridStep) {<a name="line.868"></a>
<FONT color="green">869</FONT>                            vGridStep = userVGridStep;<a name="line.869"></a>
<FONT color="green">870</FONT>                            vStepChanged = true;<a name="line.870"></a>
<FONT color="green">871</FONT>                    }<a name="line.871"></a>
<FONT color="green">872</FONT>                    <a name="line.872"></a>
<FONT color="green">873</FONT>                    double rounded = Math.rint(vGridStep);<a name="line.873"></a>
<FONT color="green">874</FONT>                    if (rounded != vGridStep) {<a name="line.874"></a>
<FONT color="green">875</FONT>                            vGridStep = rounded;<a name="line.875"></a>
<FONT color="green">876</FONT>                            vStepChanged = true;<a name="line.876"></a>
<FONT color="green">877</FONT>                    }<a name="line.877"></a>
<FONT color="green">878</FONT>                    <a name="line.878"></a>
<FONT color="green">879</FONT>                    if (vGridStep &lt; 0.0) {<a name="line.879"></a>
<FONT color="green">880</FONT>                            vGridStep = -vGridStep;<a name="line.880"></a>
<FONT color="green">881</FONT>                            vStepChanged = true;<a name="line.881"></a>
<FONT color="green">882</FONT>                    }<a name="line.882"></a>
<FONT color="green">883</FONT>                    <a name="line.883"></a>
<FONT color="green">884</FONT>                    if (vGridStep == 0.0) {<a name="line.884"></a>
<FONT color="green">885</FONT>                            vGridStep = 1.;<a name="line.885"></a>
<FONT color="green">886</FONT>                            vStepChanged = true;<a name="line.886"></a>
<FONT color="green">887</FONT>                    }<a name="line.887"></a>
<FONT color="green">888</FONT>                    <a name="line.888"></a>
<FONT color="green">889</FONT>                    if (vStepChanged) {<a name="line.889"></a>
<FONT color="green">890</FONT>                            selfSettingVGridSize = true;<a name="line.890"></a>
<FONT color="green">891</FONT>                            graphSetts.setVGridSize(vGridStep);<a name="line.891"></a>
<FONT color="green">892</FONT>                            selfSettingVGridSize = false;<a name="line.892"></a>
<FONT color="green">893</FONT>                    }<a name="line.893"></a>
<FONT color="green">894</FONT>            }<a name="line.894"></a>
<FONT color="green">895</FONT>    } // private void computeGridSteps()<a name="line.895"></a>
<FONT color="green">896</FONT>    <a name="line.896"></a>
<FONT color="green">897</FONT>    /**<a name="line.897"></a>
<FONT color="green">898</FONT>     * Map the specified point in screen coordinates into the data space.<a name="line.898"></a>
<FONT color="green">899</FONT>     * <a name="line.899"></a>
<FONT color="green">900</FONT>     * @param sp A point in screen coordinates.<a name="line.900"></a>
<FONT color="green">901</FONT>     * @return The corresponding data point.<a name="line.901"></a>
<FONT color="green">902</FONT>     */<a name="line.902"></a>
<FONT color="green">903</FONT>    public Point2D.Double screenToDataPoint(Point sp) {<a name="line.903"></a>
<FONT color="green">904</FONT>            <a name="line.904"></a>
<FONT color="green">905</FONT>            Point2D.Double dp = new Point2D.Double();<a name="line.905"></a>
<FONT color="green">906</FONT>            try {<a name="line.906"></a>
<FONT color="green">907</FONT>                    datScrTransform.inverseTransform(sp, dp);<a name="line.907"></a>
<FONT color="green">908</FONT>            } catch(NoninvertibleTransformException e) {<a name="line.908"></a>
<FONT color="green">909</FONT>                    dp.setLocation(0, 0);<a name="line.909"></a>
<FONT color="green">910</FONT>            }<a name="line.910"></a>
<FONT color="green">911</FONT>            return dp;<a name="line.911"></a>
<FONT color="green">912</FONT>    }<a name="line.912"></a>
<FONT color="green">913</FONT>    <a name="line.913"></a>
<FONT color="green">914</FONT>    /**<a name="line.914"></a>
<FONT color="green">915</FONT>     * Updates the data to screen transform map according to the currently visible data area and screen size.<a name="line.915"></a>
<FONT color="green">916</FONT>     */<a name="line.916"></a>
<FONT color="green">917</FONT>    private void updateDatScrTransform() {<a name="line.917"></a>
<FONT color="green">918</FONT>            <a name="line.918"></a>
<FONT color="green">919</FONT>            datScrTransform.setToIdentity();<a name="line.919"></a>
<FONT color="green">920</FONT>            <a name="line.920"></a>
<FONT color="green">921</FONT>            datScrTransform.translate(HMARGIN, (screenSize.height + VMARGIN));<a name="line.921"></a>
<FONT color="green">922</FONT>            datScrTransform.scale(1, -1);<a name="line.922"></a>
<FONT color="green">923</FONT>            datScrTransform.scale(screenSize.width / dataViewport.width, screenSize.height / dataViewport.height);<a name="line.923"></a>
<FONT color="green">924</FONT>            datScrTransform.translate(-dataViewport.x, dataViewport.height - dataViewport.y);<a name="line.924"></a>
<FONT color="green">925</FONT>    }<a name="line.925"></a>
<FONT color="green">926</FONT>    <a name="line.926"></a>
<FONT color="green">927</FONT>    <a name="line.927"></a>
<FONT color="green">928</FONT>    /**<a name="line.928"></a>
<FONT color="green">929</FONT>     * Reallocates the screen data buffer.<a name="line.929"></a>
<FONT color="green">930</FONT>     */<a name="line.930"></a>
<FONT color="green">931</FONT>    private void resetScreenDataBuffer() {<a name="line.931"></a>
<FONT color="green">932</FONT>            showAtLeastOneSeries = false;<a name="line.932"></a>
<FONT color="green">933</FONT>            screenDataBuffer = new SeriesScreenData[dataCache.countDataSeries()];<a name="line.933"></a>
<FONT color="green">934</FONT>            for (int s = 0; s &lt; screenDataBuffer.length; s++)<a name="line.934"></a>
<FONT color="green">935</FONT>                    screenDataBuffer[s] = new SeriesScreenData(s); <a name="line.935"></a>
<FONT color="green">936</FONT>    }<a name="line.936"></a>
<FONT color="green">937</FONT>    <a name="line.937"></a>
<FONT color="green">938</FONT>    <a name="line.938"></a>
<FONT color="green">939</FONT>    /**<a name="line.939"></a>
<FONT color="green">940</FONT>     * First, recomputes the currently visible data area according to the current graph and series settings;<a name="line.940"></a>
<FONT color="green">941</FONT>     * then, computes the screen coordinates for the visible data series..<a name="line.941"></a>
<FONT color="green">942</FONT>     *<a name="line.942"></a>
<FONT color="green">943</FONT>     */<a name="line.943"></a>
<FONT color="green">944</FONT>    private void updateScreenData() {<a name="line.944"></a>
<FONT color="green">945</FONT>            resetDataViewport();<a name="line.945"></a>
<FONT color="green">946</FONT>            computeScreenData();<a name="line.946"></a>
<FONT color="green">947</FONT>    }<a name="line.947"></a>
<FONT color="green">948</FONT>    <a name="line.948"></a>
<FONT color="green">949</FONT>    private void updateSeriesTransformer(int seriesIndex) {<a name="line.949"></a>
<FONT color="green">950</FONT>            <a name="line.950"></a>
<FONT color="green">951</FONT>            if (null == screenDataBuffer)<a name="line.951"></a>
<FONT color="green">952</FONT>                    return;<a name="line.952"></a>
<FONT color="green">953</FONT>            <a name="line.953"></a>
<FONT color="green">954</FONT>            SeriesScreenData serData = screenDataBuffer[seriesIndex];<a name="line.954"></a>
<FONT color="green">955</FONT>            if (null == serData)<a name="line.955"></a>
<FONT color="green">956</FONT>                    return;<a name="line.956"></a>
<FONT color="green">957</FONT>            <a name="line.957"></a>
<FONT color="green">958</FONT>            final int serInd = seriesIndex;<a name="line.958"></a>
<FONT color="green">959</FONT>            <a name="line.959"></a>
<FONT color="green">960</FONT>            TransformMode transformMode = seriesSetts.getTransformMode(seriesIndex);<a name="line.960"></a>
<FONT color="green">961</FONT>            switch (transformMode) {<a name="line.961"></a>
<FONT color="green">962</FONT>                    case Transform_None:    serData.transformer = IDTransform;<a name="line.962"></a>
<FONT color="green">963</FONT>                                                                    break;<a name="line.963"></a>
<FONT color="green">964</FONT>                    case Transform_SetVal:  final double f = seriesSetts.getScaleFactor(serInd);<a name="line.964"></a>
<FONT color="green">965</FONT>                                                                    serData.transformer = new Transformer() {<a name="line.965"></a>
<FONT color="green">966</FONT>                                                                            public double transf(double v) { return v * f; }<a name="line.966"></a>
<FONT color="green">967</FONT>                                                                    };<a name="line.967"></a>
<FONT color="green">968</FONT>                                                                    break;<a name="line.968"></a>
<FONT color="green">969</FONT>                    case Transform_In0to1:  DataSeries dSer = dataCache.getDataSeries(serInd);<a name="line.969"></a>
<FONT color="green">970</FONT>                                                                    double serMax = dSer.getMaxValue();<a name="line.970"></a>
<FONT color="green">971</FONT>                                                                    final double shift = dSer.getMinValue();<a name="line.971"></a>
<FONT color="green">972</FONT>                                                                    final double scale = (0. == (serMax - shift)<a name="line.972"></a>
<FONT color="green">973</FONT>                                                                                                                    ? 0. : 1. / (serMax - shift));<a name="line.973"></a>
<FONT color="green">974</FONT>                            serData.transformer = new Transformer() {<a name="line.974"></a>
<FONT color="green">975</FONT>                                                                            public double transf(double v) { return (v - shift) * scale; }<a name="line.975"></a>
<FONT color="green">976</FONT>                                                                    };<a name="line.976"></a>
<FONT color="green">977</FONT>                                                                    break;<a name="line.977"></a>
<FONT color="green">978</FONT>                    default:                                throw new Error("Unexpected series scale mode");<a name="line.978"></a>
<FONT color="green">979</FONT>            }<a name="line.979"></a>
<FONT color="green">980</FONT>    }<a name="line.980"></a>
<FONT color="green">981</FONT>    <a name="line.981"></a>
<FONT color="green">982</FONT>    /**<a name="line.982"></a>
<FONT color="green">983</FONT>     * Recomputes the currently visible data area according to the current graph and series settings.<a name="line.983"></a>
<FONT color="green">984</FONT>     */<a name="line.984"></a>
<FONT color="green">985</FONT>    private void resetDataViewport() {<a name="line.985"></a>
<FONT color="green">986</FONT>            <a name="line.986"></a>
<FONT color="green">987</FONT>            // If current screen is too small we dont compute:<a name="line.987"></a>
<FONT color="green">988</FONT>            if (screenTooSmall())<a name="line.988"></a>
<FONT color="green">989</FONT>                    return;<a name="line.989"></a>
<FONT color="green">990</FONT>            <a name="line.990"></a>
<FONT color="green">991</FONT>            // If computation is running, we do not compute any more:<a name="line.991"></a>
<FONT color="green">992</FONT>            if (dataComputationRunning)<a name="line.992"></a>
<FONT color="green">993</FONT>                    return;<a name="line.993"></a>
<FONT color="green">994</FONT>            <a name="line.994"></a>
<FONT color="green">995</FONT>            // Determine minY according to the options:<a name="line.995"></a>
<FONT color="green">996</FONT>            double minY = graphSetts.getMinY();<a name="line.996"></a>
<FONT color="green">997</FONT>            if (Double.isNaN(minY)) {<a name="line.997"></a>
<FONT color="green">998</FONT>                    <a name="line.998"></a>
<FONT color="green">999</FONT>                    minY = Double.MAX_VALUE;<a name="line.999"></a>
<FONT color="green">1000</FONT>                    for (int s = 0; s &lt; dataCache.countDataSeries(); s++) {<a name="line.1000"></a>
<FONT color="green">1001</FONT>                            <a name="line.1001"></a>
<FONT color="green">1002</FONT>                            if (!seriesSetts.getShow(s))<a name="line.1002"></a>
<FONT color="green">1003</FONT>                                    continue;<a name="line.1003"></a>
<FONT color="green">1004</FONT>                            <a name="line.1004"></a>
<FONT color="green">1005</FONT>                            double v = screenDataBuffer[s].transformer.transf(dataCache.getDataSeries(s).getMinValue());<a name="line.1005"></a>
<FONT color="green">1006</FONT>                            if (v &lt; minY)<a name="line.1006"></a>
<FONT color="green">1007</FONT>                                    minY = v;<a name="line.1007"></a>
<FONT color="green">1008</FONT>                    }               <a name="line.1008"></a>
<FONT color="green">1009</FONT>            }<a name="line.1009"></a>
<FONT color="green">1010</FONT>            <a name="line.1010"></a>
<FONT color="green">1011</FONT>            // Determine maxY according to the options:<a name="line.1011"></a>
<FONT color="green">1012</FONT>            double maxY = graphSetts.getMaxY();<a name="line.1012"></a>
<FONT color="green">1013</FONT>            if (Double.isNaN(maxY)) {               <a name="line.1013"></a>
<FONT color="green">1014</FONT>                    <a name="line.1014"></a>
<FONT color="green">1015</FONT>                    maxY = -Double.MAX_VALUE;<a name="line.1015"></a>
<FONT color="green">1016</FONT>                    for (int s = 0; s &lt; dataCache.countDataSeries(); s++) {<a name="line.1016"></a>
<FONT color="green">1017</FONT>                            <a name="line.1017"></a>
<FONT color="green">1018</FONT>                            if (!seriesSetts.getShow(s))<a name="line.1018"></a>
<FONT color="green">1019</FONT>                                    continue;<a name="line.1019"></a>
<FONT color="green">1020</FONT>                            <a name="line.1020"></a>
<FONT color="green">1021</FONT>                            double v = screenDataBuffer[s].transformer.transf(dataCache.getDataSeries(s).getMaxValue());<a name="line.1021"></a>
<FONT color="green">1022</FONT>                            if (v &gt; maxY)<a name="line.1022"></a>
<FONT color="green">1023</FONT>                                    maxY = v;<a name="line.1023"></a>
<FONT color="green">1024</FONT>                    }               <a name="line.1024"></a>
<FONT color="green">1025</FONT>            }<a name="line.1025"></a>
<FONT color="green">1026</FONT>            <a name="line.1026"></a>
<FONT color="green">1027</FONT>            // Determine minX and maxX accodring to the options:<a name="line.1027"></a>
<FONT color="green">1028</FONT>            double minX = graphSetts.getMinX();<a name="line.1028"></a>
<FONT color="green">1029</FONT>            double maxX = graphSetts.getMaxX();<a name="line.1029"></a>
<FONT color="green">1030</FONT>            <a name="line.1030"></a>
<FONT color="green">1031</FONT>            // If minX or maxX are automatic and according to some data value (i.e. not dataset number):<a name="line.1031"></a>
<FONT color="green">1032</FONT>            if ((Double.isNaN(minX) || Double.isNaN(maxX))<a name="line.1032"></a>
<FONT color="green">1033</FONT>                            &amp;&amp; graphSetts.getXAxisType() != XAxisType.XAxis_DSNum) {<a name="line.1033"></a>
<FONT color="green">1034</FONT>                                    <a name="line.1034"></a>
<FONT color="green">1035</FONT>                    // Check that x-axis data series index is valid:<a name="line.1035"></a>
<FONT color="green">1036</FONT>                    int xAxisSerIndex = graphSetts.getXAxisSeriesIndex();<a name="line.1036"></a>
<FONT color="green">1037</FONT>                    if (0 &lt;= xAxisSerIndex &amp;&amp; dataCache.countDataSeries() &gt; xAxisSerIndex) {<a name="line.1037"></a>
<FONT color="green">1038</FONT>                    <a name="line.1038"></a>
<FONT color="green">1039</FONT>                            DataSeries xSer = dataCache.getDataSeries(xAxisSerIndex);<a name="line.1039"></a>
<FONT color="green">1040</FONT>                            <a name="line.1040"></a>
<FONT color="green">1041</FONT>                            // X axis is an unscaled data series: <a name="line.1041"></a>
<FONT color="green">1042</FONT>                            if (graphSetts.getXAxisType() == XAxisType.XAxis_DataValSimple) {<a name="line.1042"></a>
<FONT color="green">1043</FONT>                                    if (Double.isNaN(minX))<a name="line.1043"></a>
<FONT color="green">1044</FONT>                                            minX = xSer.getMinValue();<a name="line.1044"></a>
<FONT color="green">1045</FONT>                                    if (Double.isNaN(maxX))<a name="line.1045"></a>
<FONT color="green">1046</FONT>                                            maxX = xSer.getMaxValue();<a name="line.1046"></a>
<FONT color="green">1047</FONT>                                    <a name="line.1047"></a>
<FONT color="green">1048</FONT>                            // X axis is a data series transformed into [0..1]:<a name="line.1048"></a>
<FONT color="green">1049</FONT>                            } else if (graphSetts.getXAxisType() == XAxisType.XAxis_DataValTrans0to1) {                     <a name="line.1049"></a>
<FONT color="green">1050</FONT>                                    if (Double.isNaN(minX))<a name="line.1050"></a>
<FONT color="green">1051</FONT>                                            minX = 0;<a name="line.1051"></a>
<FONT color="green">1052</FONT>                                    if (Double.isNaN(maxX))<a name="line.1052"></a>
<FONT color="green">1053</FONT>                                            maxX = 1;<a name="line.1053"></a>
<FONT color="green">1054</FONT>                            <a name="line.1054"></a>
<FONT color="green">1055</FONT>                            // X axis is a data series scaled by a set value:<a name="line.1055"></a>
<FONT color="green">1056</FONT>                            } else if (graphSetts.getXAxisType() == XAxisType.XAxis_DataValScaledSet) {<a name="line.1056"></a>
<FONT color="green">1057</FONT>                                    double scaleF = graphSetts.getXAxisScaleValue();<a name="line.1057"></a>
<FONT color="green">1058</FONT>                                    if (Double.isNaN(minX))<a name="line.1058"></a>
<FONT color="green">1059</FONT>                                            minX = xSer.getMinValue() * scaleF;<a name="line.1059"></a>
<FONT color="green">1060</FONT>                                    if (Double.isNaN(maxX))<a name="line.1060"></a>
<FONT color="green">1061</FONT>                                            maxX = xSer.getMaxValue() * scaleF;<a name="line.1061"></a>
<FONT color="green">1062</FONT>                            }                       <a name="line.1062"></a>
<FONT color="green">1063</FONT>                    } // if x-axis data series index is valid<a name="line.1063"></a>
<FONT color="green">1064</FONT>            } // if minX or maxX are automatic and according to some data value (i.e. not dataset number)<a name="line.1064"></a>
<FONT color="green">1065</FONT>            <a name="line.1065"></a>
<FONT color="green">1066</FONT>            // Now minX and maxX can only be NaN in one of the following cases:<a name="line.1066"></a>
<FONT color="green">1067</FONT>            //   - x axis type is XAxis_DSNum (dataset number)<a name="line.1067"></a>
<FONT color="green">1068</FONT>            //   - x axis series index is invalid<a name="line.1068"></a>
<FONT color="green">1069</FONT>            //   - xSer.getMinValue or xSer.getMaxValue returned NaN<a name="line.1069"></a>
<FONT color="green">1070</FONT>            // In all cases we do the same thing: default to dataset index:<a name="line.1070"></a>
<FONT color="green">1071</FONT>            <a name="line.1071"></a>
<FONT color="green">1072</FONT>            if (Double.isNaN(minX))<a name="line.1072"></a>
<FONT color="green">1073</FONT>                    minX = dataCache.getMinDataFileIndex();<a name="line.1073"></a>
<FONT color="green">1074</FONT>            if (Double.isNaN(maxX))<a name="line.1074"></a>
<FONT color="green">1075</FONT>                    maxX = dataCache.getMaxDataFileIndex();<a name="line.1075"></a>
<FONT color="green">1076</FONT>            <a name="line.1076"></a>
<FONT color="green">1077</FONT>            if (minX &gt; maxX) {<a name="line.1077"></a>
<FONT color="green">1078</FONT>                    double t = maxX; maxX = minX; minX = t;<a name="line.1078"></a>
<FONT color="green">1079</FONT>            }<a name="line.1079"></a>
<FONT color="green">1080</FONT>            <a name="line.1080"></a>
<FONT color="green">1081</FONT>            if (minY &gt; maxY) {<a name="line.1081"></a>
<FONT color="green">1082</FONT>                    double t = maxY; maxY = minY; minY = t;<a name="line.1082"></a>
<FONT color="green">1083</FONT>            }<a name="line.1083"></a>
<FONT color="green">1084</FONT>            <a name="line.1084"></a>
<FONT color="green">1085</FONT>            dataViewport.setRect(minX, maxY, maxX - minX, maxY - minY);<a name="line.1085"></a>
<FONT color="green">1086</FONT>            updateDatScrTransform();<a name="line.1086"></a>
<FONT color="green">1087</FONT>            computeGridSteps();<a name="line.1087"></a>
<FONT color="green">1088</FONT>    } // private void resetDataViewport()<a name="line.1088"></a>
<FONT color="green">1089</FONT>    <a name="line.1089"></a>
<FONT color="green">1090</FONT>    <a name="line.1090"></a>
<FONT color="green">1091</FONT>    /**<a name="line.1091"></a>
<FONT color="green">1092</FONT>     * Set the current view screen size. <a name="line.1092"></a>
<FONT color="green">1093</FONT>     * @param width Canvas width in pixels.<a name="line.1093"></a>
<FONT color="green">1094</FONT>     * @param height Canvas height in pixels<a name="line.1094"></a>
<FONT color="green">1095</FONT>     */<a name="line.1095"></a>
<FONT color="green">1096</FONT>    public void setScreenSize(int width, int height) {<a name="line.1096"></a>
<FONT color="green">1097</FONT>            <a name="line.1097"></a>
<FONT color="green">1098</FONT>            if (dataComputationRunning)<a name="line.1098"></a>
<FONT color="green">1099</FONT>                    return;<a name="line.1099"></a>
<FONT color="green">1100</FONT>            <a name="line.1100"></a>
<FONT color="green">1101</FONT>            screenSize.width = width - (HMARGIN &lt;&lt; 1);<a name="line.1101"></a>
<FONT color="green">1102</FONT>            screenSize.height = height - (VMARGIN &lt;&lt; 1);<a name="line.1102"></a>
<FONT color="green">1103</FONT>            updateDatScrTransform();<a name="line.1103"></a>
<FONT color="green">1104</FONT>            computeScreenData();<a name="line.1104"></a>
<FONT color="green">1105</FONT>            computeGridSteps();<a name="line.1105"></a>
<FONT color="green">1106</FONT>    }<a name="line.1106"></a>
<FONT color="green">1107</FONT>    <a name="line.1107"></a>
<FONT color="green">1108</FONT>    /**<a name="line.1108"></a>
<FONT color="green">1109</FONT>     * Gets canvas screen size (X).<a name="line.1109"></a>
<FONT color="green">1110</FONT>     * <a name="line.1110"></a>
<FONT color="green">1111</FONT>     * @return Canvas screen size (X).<a name="line.1111"></a>
<FONT color="green">1112</FONT>     */<a name="line.1112"></a>
<FONT color="green">1113</FONT>    public int getScreenWidth() {<a name="line.1113"></a>
<FONT color="green">1114</FONT>            return screenSize.width + (HMARGIN &lt;&lt; 1);<a name="line.1114"></a>
<FONT color="green">1115</FONT>    }<a name="line.1115"></a>
<FONT color="green">1116</FONT>    <a name="line.1116"></a>
<FONT color="green">1117</FONT>    /**<a name="line.1117"></a>
<FONT color="green">1118</FONT>     * Gets canvas screen size (Y).<a name="line.1118"></a>
<FONT color="green">1119</FONT>     * <a name="line.1119"></a>
<FONT color="green">1120</FONT>     * @return Canvas screen size (Y).<a name="line.1120"></a>
<FONT color="green">1121</FONT>     */<a name="line.1121"></a>
<FONT color="green">1122</FONT>    public int getScreenHeight() {<a name="line.1122"></a>
<FONT color="green">1123</FONT>            return screenSize.height + (VMARGIN &lt;&lt; 1);<a name="line.1123"></a>
<FONT color="green">1124</FONT>    }<a name="line.1124"></a>
<FONT color="green">1125</FONT>    <a name="line.1125"></a>
<FONT color="green">1126</FONT>    /**<a name="line.1126"></a>
<FONT color="green">1127</FONT>     * If cached label info is changed, the screen buffer is recreated;<a name="line.1127"></a>
<FONT color="green">1128</FONT>     * if cached data is updated the view port and the screen data are recomputed.<a name="line.1128"></a>
<FONT color="green">1129</FONT>     */<a name="line.1129"></a>
<FONT color="green">1130</FONT>    public void cacheEventFired(DataCache cache, CacheEvent event) {<a name="line.1130"></a>
<FONT color="green">1131</FONT>            <a name="line.1131"></a>
<FONT color="green">1132</FONT>            //System.out.println(event);<a name="line.1132"></a>
<FONT color="green">1133</FONT>            <a name="line.1133"></a>
<FONT color="green">1134</FONT>            if (cache != dataCache)<a name="line.1134"></a>
<FONT color="green">1135</FONT>                    return;<a name="line.1135"></a>
<FONT color="green">1136</FONT>            <a name="line.1136"></a>
<FONT color="green">1137</FONT>            if (CacheEvent.UpdateLabels == event) {<a name="line.1137"></a>
<FONT color="green">1138</FONT>                    resetScreenDataBuffer();<a name="line.1138"></a>
<FONT color="green">1139</FONT>                    for (int s = 0; s &lt; screenDataBuffer.length; s++) {<a name="line.1139"></a>
<FONT color="green">1140</FONT>                            screenDataBuffer[s].colour = seriesSetts.getColour(s);<a name="line.1140"></a>
<FONT color="green">1141</FONT>                            updateSeriesTransformer(s);<a name="line.1141"></a>
<FONT color="green">1142</FONT>                    }<a name="line.1142"></a>
<FONT color="green">1143</FONT>            }<a name="line.1143"></a>
<FONT color="green">1144</FONT>            <a name="line.1144"></a>
<FONT color="green">1145</FONT>            if (CacheEvent.UpdateData == event) {<a name="line.1145"></a>
<FONT color="green">1146</FONT>                    updateScreenData();<a name="line.1146"></a>
<FONT color="green">1147</FONT>            }<a name="line.1147"></a>
<FONT color="green">1148</FONT>    }<a name="line.1148"></a>
<FONT color="green">1149</FONT>    <a name="line.1149"></a>
<FONT color="green">1150</FONT>    /**<a name="line.1150"></a>
<FONT color="green">1151</FONT>     * Dispatches settings change events.<a name="line.1151"></a>
<FONT color="green">1152</FONT>     */<a name="line.1152"></a>
<FONT color="green">1153</FONT>    public void settingHasChanged(ObservableSettings settings, Object info) {<a name="line.1153"></a>
<FONT color="green">1154</FONT>            <a name="line.1154"></a>
<FONT color="green">1155</FONT>            //System.out.println(settings.getClass().getName() + ": " + info);<a name="line.1155"></a>
<FONT color="green">1156</FONT>            <a name="line.1156"></a>
<FONT color="green">1157</FONT>            if (null == info || null == settings)<a name="line.1157"></a>
<FONT color="green">1158</FONT>                    return;<a name="line.1158"></a>
<FONT color="green">1159</FONT>            <a name="line.1159"></a>
<FONT color="green">1160</FONT>            if ((settings instanceof DataSeriesSettings) &amp;&amp; (info instanceof String)) {<a name="line.1160"></a>
<FONT color="green">1161</FONT>                    settingHasChanged((DataSeriesSettings) settings, (String) info);<a name="line.1161"></a>
<FONT color="green">1162</FONT>                    return;<a name="line.1162"></a>
<FONT color="green">1163</FONT>            }<a name="line.1163"></a>
<FONT color="green">1164</FONT>            <a name="line.1164"></a>
<FONT color="green">1165</FONT>            if ((settings instanceof GraphSettings) &amp;&amp; (info instanceof String)) {<a name="line.1165"></a>
<FONT color="green">1166</FONT>                    settingHasChanged((GraphSettings) settings, (String) info);<a name="line.1166"></a>
<FONT color="green">1167</FONT>                    return;<a name="line.1167"></a>
<FONT color="green">1168</FONT>            }<a name="line.1168"></a>
<FONT color="green">1169</FONT>    }<a name="line.1169"></a>
<FONT color="green">1170</FONT>    <a name="line.1170"></a>
<FONT color="green">1171</FONT>    /**<a name="line.1171"></a>
<FONT color="green">1172</FONT>     * Calls the neccesary recoputations when seties settings are changed.<a name="line.1172"></a>
<FONT color="green">1173</FONT>     * @param settings Series settings.<a name="line.1173"></a>
<FONT color="green">1174</FONT>     * @param info Change event info.<a name="line.1174"></a>
<FONT color="green">1175</FONT>     */<a name="line.1175"></a>
<FONT color="green">1176</FONT>    public void settingHasChanged(DataSeriesSettings settings, String info) {<a name="line.1176"></a>
<FONT color="green">1177</FONT>            <a name="line.1177"></a>
<FONT color="green">1178</FONT>            if (null == info || null == settings)<a name="line.1178"></a>
<FONT color="green">1179</FONT>                    return;<a name="line.1179"></a>
<FONT color="green">1180</FONT>            <a name="line.1180"></a>
<FONT color="green">1181</FONT>            if (info.equals("load")) {              <a name="line.1181"></a>
<FONT color="green">1182</FONT>                    for (int s = 0; s &lt; screenDataBuffer.length; s++) {<a name="line.1182"></a>
<FONT color="green">1183</FONT>                            screenDataBuffer[s].colour = settings.getColour(s);<a name="line.1183"></a>
<FONT color="green">1184</FONT>                            updateSeriesTransformer(s);<a name="line.1184"></a>
<FONT color="green">1185</FONT>                    }<a name="line.1185"></a>
<FONT color="green">1186</FONT>                    updateScreenData();<a name="line.1186"></a>
<FONT color="green">1187</FONT>                    return;<a name="line.1187"></a>
<FONT color="green">1188</FONT>            }       <a name="line.1188"></a>
<FONT color="green">1189</FONT>            <a name="line.1189"></a>
<FONT color="green">1190</FONT>            if (info.startsWith("Show")) {<a name="line.1190"></a>
<FONT color="green">1191</FONT>                    updateScreenData();     <a name="line.1191"></a>
<FONT color="green">1192</FONT>            }<a name="line.1192"></a>
<FONT color="green">1193</FONT>            <a name="line.1193"></a>
<FONT color="green">1194</FONT>            if (info.startsWith("TransformMode.")) {<a name="line.1194"></a>
<FONT color="green">1195</FONT>                    int affectedSeries = Integer.parseInt(info.substring(info.lastIndexOf(".") + 1));<a name="line.1195"></a>
<FONT color="green">1196</FONT>                    updateSeriesTransformer(affectedSeries);<a name="line.1196"></a>
<FONT color="green">1197</FONT>                    updateScreenData();     <a name="line.1197"></a>
<FONT color="green">1198</FONT>            }<a name="line.1198"></a>
<FONT color="green">1199</FONT>            <a name="line.1199"></a>
<FONT color="green">1200</FONT>            if (info.startsWith("Colour.")) {               <a name="line.1200"></a>
<FONT color="green">1201</FONT>                    int affectedSeries = Integer.parseInt(info.substring(info.lastIndexOf(".") + 1));<a name="line.1201"></a>
<FONT color="green">1202</FONT>                    screenDataBuffer[affectedSeries].colour = settings.getColour(affectedSeries);           <a name="line.1202"></a>
<FONT color="green">1203</FONT>            }<a name="line.1203"></a>
<FONT color="green">1204</FONT>            <a name="line.1204"></a>
<FONT color="green">1205</FONT>            if (info.startsWith("ScaleFactor.")) {<a name="line.1205"></a>
<FONT color="green">1206</FONT>                    int affectedSeries = Integer.parseInt(info.substring(info.lastIndexOf(".") + 1));<a name="line.1206"></a>
<FONT color="green">1207</FONT>                    if (TransformMode.Transform_SetVal == seriesSetts.getTransformMode(affectedSeries)) {<a name="line.1207"></a>
<FONT color="green">1208</FONT>                            updateSeriesTransformer(affectedSeries);<a name="line.1208"></a>
<FONT color="green">1209</FONT>                            updateScreenData();<a name="line.1209"></a>
<FONT color="green">1210</FONT>                    }<a name="line.1210"></a>
<FONT color="green">1211</FONT>            }<a name="line.1211"></a>
<FONT color="green">1212</FONT>    }<a name="line.1212"></a>
<FONT color="green">1213</FONT>    <a name="line.1213"></a>
<FONT color="green">1214</FONT>    /**<a name="line.1214"></a>
<FONT color="green">1215</FONT>     * Calls the neccesary recoputations when graph settings are changed.<a name="line.1215"></a>
<FONT color="green">1216</FONT>     * @param settings Graph settings.<a name="line.1216"></a>
<FONT color="green">1217</FONT>     * @param info Change event info.<a name="line.1217"></a>
<FONT color="green">1218</FONT>     */<a name="line.1218"></a>
<FONT color="green">1219</FONT>    public void settingHasChanged(GraphSettings settings, String info) {<a name="line.1219"></a>
<FONT color="green">1220</FONT>            <a name="line.1220"></a>
<FONT color="green">1221</FONT>            if (null == info || null == settings || settings != this.graphSetts)<a name="line.1221"></a>
<FONT color="green">1222</FONT>                    return;<a name="line.1222"></a>
<FONT color="green">1223</FONT>            <a name="line.1223"></a>
<FONT color="green">1224</FONT>            if (info.equals("MinY") || info.equals("MinX")<a name="line.1224"></a>
<FONT color="green">1225</FONT>                            || info.equals("MaxY") || info.equals("MaxX")<a name="line.1225"></a>
<FONT color="green">1226</FONT>                            || info.equals("load")) {<a name="line.1226"></a>
<FONT color="green">1227</FONT>                    updateScreenData();<a name="line.1227"></a>
<FONT color="green">1228</FONT>            }<a name="line.1228"></a>
<FONT color="green">1229</FONT>            <a name="line.1229"></a>
<FONT color="green">1230</FONT>            if (info.equals("VGridType") || info.equals("VGridSize") || info.equals("load")) {<a name="line.1230"></a>
<FONT color="green">1231</FONT>                    if (!selfSettingVGridSize) {<a name="line.1231"></a>
<FONT color="green">1232</FONT>                            userVGridStep = graphSetts.getVGridSize();<a name="line.1232"></a>
<FONT color="green">1233</FONT>                            computeGridSteps();<a name="line.1233"></a>
<FONT color="green">1234</FONT>                    }<a name="line.1234"></a>
<FONT color="green">1235</FONT>            }<a name="line.1235"></a>
<FONT color="green">1236</FONT>            <a name="line.1236"></a>
<FONT color="green">1237</FONT>            if (info.equals("HGridType") || info.equals("HGridSize") || info.equals("load")) {<a name="line.1237"></a>
<FONT color="green">1238</FONT>                    if (!selfSettingHGridSize) {<a name="line.1238"></a>
<FONT color="green">1239</FONT>                            userHGridStep = graphSetts.getHGridSize();<a name="line.1239"></a>
<FONT color="green">1240</FONT>                            computeGridSteps();<a name="line.1240"></a>
<FONT color="green">1241</FONT>                    }<a name="line.1241"></a>
<FONT color="green">1242</FONT>            }<a name="line.1242"></a>
<FONT color="green">1243</FONT>            <a name="line.1243"></a>
<FONT color="green">1244</FONT>            if (info.equals("XAxisType") || info.equals("XAxisSeriesIndex") || info.equals("XAxisScaleValue")<a name="line.1244"></a>
<FONT color="green">1245</FONT>                            || info.equals("load")) {<a name="line.1245"></a>
<FONT color="green">1246</FONT>                    updateScreenData();<a name="line.1246"></a>
<FONT color="green">1247</FONT>            }<a name="line.1247"></a>
<FONT color="green">1248</FONT>            <a name="line.1248"></a>
<FONT color="green">1249</FONT>            if (info.equals("HighlightDataPoints") || info.equals("load")) {<a name="line.1249"></a>
<FONT color="green">1250</FONT>                    highlightPoints = settings.getHighlightDataPoints();<a name="line.1250"></a>
<FONT color="green">1251</FONT>                    highlightAround(new Point(-1, -1));<a name="line.1251"></a>
<FONT color="green">1252</FONT>            }<a name="line.1252"></a>
<FONT color="green">1253</FONT>    }<a name="line.1253"></a>
<FONT color="green">1254</FONT>    <a name="line.1254"></a>
<FONT color="green">1255</FONT>    /**<a name="line.1255"></a>
<FONT color="green">1256</FONT>     * For holding mutable ints as objects.<a name="line.1256"></a>
<FONT color="green">1257</FONT>     */<a name="line.1257"></a>
<FONT color="green">1258</FONT>    private class MutableInt {<a name="line.1258"></a>
<FONT color="green">1259</FONT>            /*package*/ int val = -1;<a name="line.1259"></a>
<FONT color="green">1260</FONT>            /*package*/ MutableInt() { this.val = -1; }<a name="line.1260"></a>
<FONT color="green">1261</FONT>            /*package*/ MutableInt(int v) { this.val = v; }<a name="line.1261"></a>
<FONT color="green">1262</FONT>    }<a name="line.1262"></a>
<FONT color="green">1263</FONT>    <a name="line.1263"></a>
<FONT color="green">1264</FONT>    /**<a name="line.1264"></a>
<FONT color="green">1265</FONT>     * A data structure to hold the locally cached plot data for a data series.<a name="line.1265"></a>
<FONT color="green">1266</FONT>     */<a name="line.1266"></a>
<FONT color="green">1267</FONT>    private class SeriesScreenData {<a name="line.1267"></a>
<FONT color="green">1268</FONT>    <a name="line.1268"></a>
<FONT color="green">1269</FONT>            /*package*/ Color colour = Color.BLACK;<a name="line.1269"></a>
<FONT color="green">1270</FONT>            /*package*/ int series = -1;<a name="line.1270"></a>
<FONT color="green">1271</FONT>            /*package*/ Point2D.Double[] points = new Point2D.Double[DataCache.CACHE_SIZE + 1];<a name="line.1271"></a>
<FONT color="green">1272</FONT>            /*package*/ MutableInt[] sortedPoints = new MutableInt[DataCache.CACHE_SIZE];<a name="line.1272"></a>
<FONT color="green">1273</FONT>            /*package*/ boolean[] hlPoints = new boolean[DataCache.CACHE_SIZE];<a name="line.1273"></a>
<FONT color="green">1274</FONT>            /*package*/ int[] dsIndices = new int[DataCache.CACHE_SIZE];<a name="line.1274"></a>
<FONT color="green">1275</FONT>            /*package*/ int plotPoints = 0;<a name="line.1275"></a>
<FONT color="green">1276</FONT>            /*package*/ boolean doShow = false; <a name="line.1276"></a>
<FONT color="green">1277</FONT>            /*package*/ Transformer transformer = IDTransform;<a name="line.1277"></a>
<FONT color="green">1278</FONT>            <a name="line.1278"></a>
<FONT color="green">1279</FONT>            /*package*/ SeriesScreenData(int series) {<a name="line.1279"></a>
<FONT color="green">1280</FONT>                    this.series = series;<a name="line.1280"></a>
<FONT color="green">1281</FONT>                    for(int i = 0; i &lt; DataCache.CACHE_SIZE; i++) {<a name="line.1281"></a>
<FONT color="green">1282</FONT>                            points[i] = new Point2D.Double();<a name="line.1282"></a>
<FONT color="green">1283</FONT>                            sortedPoints[i] = new MutableInt();<a name="line.1283"></a>
<FONT color="green">1284</FONT>                    }<a name="line.1284"></a>
<FONT color="green">1285</FONT>                    points[DataCache.CACHE_SIZE] = new Point2D.Double();<a name="line.1285"></a>
<FONT color="green">1286</FONT>            }<a name="line.1286"></a>
<FONT color="green">1287</FONT>    <a name="line.1287"></a>
<FONT color="green">1288</FONT>    } // private class SeriesScreenData<a name="line.1288"></a>
<FONT color="green">1289</FONT>    <a name="line.1289"></a>
<FONT color="green">1290</FONT>    <a name="line.1290"></a>
<FONT color="green">1291</FONT>    /**<a name="line.1291"></a>
<FONT color="green">1292</FONT>     * Used in order to compare points referenced by their index in {@link SeriesScreenData#points};<a name="line.1292"></a>
<FONT color="green">1293</FONT>     * the comparison is by x-xoordinates. <a name="line.1293"></a>
<FONT color="green">1294</FONT>     */<a name="line.1294"></a>
<FONT color="green">1295</FONT>    private class PointsByIndexComparator implements Comparator&lt;MutableInt&gt; {<a name="line.1295"></a>
<FONT color="green">1296</FONT>            private SeriesScreenData series = null;<a name="line.1296"></a>
<FONT color="green">1297</FONT>            /*package*/ void setSeries(SeriesScreenData series) { this.series = series; }<a name="line.1297"></a>
<FONT color="green">1298</FONT>            public int compare(MutableInt pi1, MutableInt pi2) {<a name="line.1298"></a>
<FONT color="green">1299</FONT>                    Point2D.Double p1 = series.points[pi1.val];<a name="line.1299"></a>
<FONT color="green">1300</FONT>                    Point2D.Double p2 = series.points[pi2.val];<a name="line.1300"></a>
<FONT color="green">1301</FONT>                    if (p1.x &lt; p2.x)<a name="line.1301"></a>
<FONT color="green">1302</FONT>                            return -1;<a name="line.1302"></a>
<FONT color="green">1303</FONT>                    if (p1.x &gt; p2.x)<a name="line.1303"></a>
<FONT color="green">1304</FONT>                            return 1;<a name="line.1304"></a>
<FONT color="green">1305</FONT>                    return 0;<a name="line.1305"></a>
<FONT color="green">1306</FONT>        }   <a name="line.1306"></a>
<FONT color="green">1307</FONT>    } // private class PointsByIndexComparator<a name="line.1307"></a>
<FONT color="green">1308</FONT>    <a name="line.1308"></a>
<FONT color="green">1309</FONT>    /**<a name="line.1309"></a>
<FONT color="green">1310</FONT>     * Used to encapsulate data series points translation routines.<a name="line.1310"></a>
<FONT color="green">1311</FONT>     */<a name="line.1311"></a>
<FONT color="green">1312</FONT>    private interface Transformer {<a name="line.1312"></a>
<FONT color="green">1313</FONT>            public double transf(double v);<a name="line.1313"></a>
<FONT color="green">1314</FONT>    }<a name="line.1314"></a>
<FONT color="green">1315</FONT>    private static Transformer IDTransform = new Transformer(){public double transf(double v){return v;}};<a name="line.1315"></a>
<FONT color="green">1316</FONT>    <a name="line.1316"></a>
<FONT color="green">1317</FONT>    } // public class Plotter<a name="line.1317"></a>




























































</PRE>
</BODY>
</HTML>
