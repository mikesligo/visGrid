	package visGrid.diagram.part;

/**
 * @generated
 */
public class VisGridDocumentProvider extends org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.AbstractDocumentProvider implements org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocumentProvider {
	
		/**
 * @generated
 */
protected ElementInfo createElementInfo(Object element) throws org.eclipse.core.runtime.CoreException {
	if (false == element instanceof org.eclipse.emf.common.ui.URIEditorInput) {
	throw new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, visGrid.diagram.part.VisGridDiagramEditorPlugin.ID, 0, 
		org.eclipse.osgi.util.NLS.bind(
			visGrid.diagram.part.Messages.VisGridDocumentProvider_IncorrectInputError,
			new Object[] {element, "org.eclipse.emf.common.ui.URIEditorInput"}), //$NON-NLS-1$ 
		null));
}
	org.eclipse.ui.IEditorInput editorInput = (org.eclipse.ui.IEditorInput) element;
	org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument document = (org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument) createDocument(editorInput);

	ResourceSetInfo info = new ResourceSetInfo(document, editorInput);
	info.setModificationStamp(computeModificationStamp(info));
	info.fStatus = null;
	return info;
}
	
		/**
 * @generated
 */
protected org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument createDocument(Object element) throws org.eclipse.core.runtime.CoreException {
	if (false == element instanceof org.eclipse.emf.common.ui.URIEditorInput) {
	throw new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, visGrid.diagram.part.VisGridDiagramEditorPlugin.ID, 0, 
		org.eclipse.osgi.util.NLS.bind(
			visGrid.diagram.part.Messages.VisGridDocumentProvider_IncorrectInputError,
			new Object[] {element, "org.eclipse.emf.common.ui.URIEditorInput"}), //$NON-NLS-1$ 
		null));
}
	org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument document = createEmptyDocument();
	setDocumentContent(document, (org.eclipse.ui.IEditorInput) element);
	setupDocument(element, document);
	return document;
}
	
		/**
 * Sets up the given document as it would be provided for the given element. The
 * content of the document is not changed. This default implementation is empty.
 * Subclasses may reimplement.
 * 
 * @param element the blue-print element
 * @param document the document to set up
 * @generated
 */
protected void setupDocument(Object element, org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument document) {
	// for subclasses
}
	
		/**
 * @generated
 */
private long computeModificationStamp(ResourceSetInfo info) {
	int result = 0;
	for (java.util.Iterator<org.eclipse.emf.ecore.resource.Resource> it = info.getLoadedResourcesIterator(); it.hasNext();) {
	org.eclipse.emf.ecore.resource.Resource nextResource = it.next();
			java.io.File file = getFile(nextResource);
		if (file != null && file.exists()) {
			result += file.lastModified();
		}
		}
	return result;
}
	
		/**
 * @generated
 */
protected org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument createEmptyDocument() {
	org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.DiagramDocument document = new org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.DiagramDocument();
	document.setEditingDomain(createEditingDomain());
	return document;
}
	
		/**
 * @generated
 */
private org.eclipse.emf.transaction.TransactionalEditingDomain createEditingDomain() {
	org.eclipse.emf.transaction.TransactionalEditingDomain editingDomain = org.eclipse.gmf.runtime.diagram.core.DiagramEditingDomainFactory.getInstance().createEditingDomain();
	editingDomain.setID("ie.tcd.gmf.visGrid.diagram.EditingDomain"); //$NON-NLS-1$
	final org.eclipse.emf.transaction.NotificationFilter diagramResourceModifiedFilter = org.eclipse.emf.transaction.NotificationFilter.createNotifierFilter(editingDomain.getResourceSet()).and(org.eclipse.emf.transaction.NotificationFilter.createEventTypeFilter(org.eclipse.emf.common.notify.Notification.ADD)).and(org.eclipse.emf.transaction.NotificationFilter.createFeatureFilter(org.eclipse.emf.ecore.resource.ResourceSet.class, org.eclipse.emf.ecore.resource.ResourceSet.RESOURCE_SET__RESOURCES));
	editingDomain.getResourceSet().eAdapters().add(new org.eclipse.emf.common.notify.Adapter() {

		private org.eclipse.emf.common.notify.Notifier myTarger;

		public org.eclipse.emf.common.notify.Notifier getTarget() {
			return myTarger;
		}

		public boolean isAdapterForType(Object type) {
			return false;
		}

		public void notifyChanged(org.eclipse.emf.common.notify.Notification notification) {
			if (diagramResourceModifiedFilter.matches(notification)) {
				Object value = notification.getNewValue();
				if (value instanceof org.eclipse.emf.ecore.resource.Resource) {
					((org.eclipse.emf.ecore.resource.Resource) value).setTrackingModification(true);
				}
			}
		}

		public void setTarget(org.eclipse.emf.common.notify.Notifier newTarget) {
			myTarger = newTarget;
		}
			
	});	
	
	return editingDomain;
}
	
		/**
 * @generated
 */
protected void setDocumentContent(org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument document, org.eclipse.ui.IEditorInput element) throws org.eclipse.core.runtime.CoreException {
	org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument diagramDocument = (org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument) document;
	org.eclipse.emf.transaction.TransactionalEditingDomain domain = diagramDocument.getEditingDomain();
	if(element instanceof org.eclipse.emf.common.ui.URIEditorInput) {
		org.eclipse.emf.common.util.URI uri = ((org.eclipse.emf.common.ui.URIEditorInput) element).getURI();
		org.eclipse.emf.ecore.resource.Resource resource = null;
		try {
			resource = domain.getResourceSet().getResource(uri.trimFragment(), false);
			if (resource == null) {
				resource = domain.getResourceSet().createResource(uri.trimFragment());
			}
			if (!resource.isLoaded()) {
				try {
					java.util.Map options = new java.util.HashMap(org.eclipse.gmf.runtime.emf.core.resources.GMFResourceFactory.getDefaultLoadOptions());
					// @see 171060 
					// options.put(org.eclipse.emf.ecore.xmi.XMLResource.OPTION_RECORD_UNKNOWN_FEATURE, Boolean.TRUE);
					resource.load(options);
				} catch (java.io.IOException e) {
					resource.unload();
					throw e;
				}
			}
			if (uri.fragment() != null) {
				org.eclipse.emf.ecore.EObject rootElement = resource.getEObject(uri.fragment());
				if (rootElement instanceof org.eclipse.gmf.runtime.notation.Diagram) {
					document.setContent((org.eclipse.gmf.runtime.notation.Diagram) rootElement);
					return;
				}
			} else {
				for (java.util.Iterator it = resource.getContents().iterator(); it.hasNext();) {
					Object rootElement = it.next();
					if (rootElement instanceof org.eclipse.gmf.runtime.notation.Diagram) {
						document.setContent((org.eclipse.gmf.runtime.notation.Diagram) rootElement);
						return;
					}
				}
			}
			throw new RuntimeException(visGrid.diagram.part.Messages.VisGridDocumentProvider_NoDiagramInResourceError);
		} catch (Exception e) {
			org.eclipse.core.runtime.CoreException thrownExcp = null;
			if (e instanceof org.eclipse.core.runtime.CoreException) {
				thrownExcp = (org.eclipse.core.runtime.CoreException) e;
			} else {
				String msg = e.getLocalizedMessage();
				thrownExcp = new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, visGrid.diagram.part.VisGridDiagramEditorPlugin.ID, 0, 
				msg != null ? msg : visGrid.diagram.part.Messages.VisGridDocumentProvider_DiagramLoadingError, e));
			}
			throw thrownExcp;
		}
	} else {
	throw new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, visGrid.diagram.part.VisGridDiagramEditorPlugin.ID, 0, 
		org.eclipse.osgi.util.NLS.bind(
			visGrid.diagram.part.Messages.VisGridDocumentProvider_IncorrectInputError,
			new Object[] {element, "org.eclipse.emf.common.ui.URIEditorInput"}), //$NON-NLS-1$ 
		null));
	}	
}
	
		/**
 * @generated
 */
public long getModificationStamp(Object element) {
	ResourceSetInfo info = getResourceSetInfo(element);
	if (info != null) {
		return computeModificationStamp(info);
	}
	return super.getModificationStamp(element);
}
	
		/**
 * @generated
 */
public boolean isDeleted(Object element) {
	org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument document = getDiagramDocument(element);
	if (document != null) {
		org.eclipse.emf.ecore.resource.Resource diagramResource = document.getDiagram().eResource();
		if (diagramResource != null) {
				java.io.File file = getFile(diagramResource);
			return file != null && !file.exists();
			}
	}
	return super.isDeleted(element);
}
	
		/**
 * @generated
 */
public ResourceSetInfo getResourceSetInfo(Object editorInput) {
	return (ResourceSetInfo) super.getElementInfo(editorInput);
}
	
		/**
 * @generated
 */
protected void disposeElementInfo(Object element, ElementInfo info) {
	if (info instanceof ResourceSetInfo) {
		ResourceSetInfo resourceSetInfo = (ResourceSetInfo) info;
		resourceSetInfo.dispose();
	}
	super.disposeElementInfo(element, info);
}
		
		/**
 * @generated
 */
public boolean isReadOnly(Object element) {
	ResourceSetInfo info = getResourceSetInfo(element);
	if (info != null) {
		if (info.isUpdateCache()) {
	try {
		updateCache(element);
	} catch (org.eclipse.core.runtime.CoreException ex) {
		visGrid.diagram.part.VisGridDiagramEditorPlugin.getInstance().logError(visGrid.diagram.part.Messages.VisGridDocumentProvider_isModifiable, ex);
		// Error message to log was initially taken from org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.internal.l10n.EditorMessages.StorageDocumentProvider_isModifiable
	}
}
		return info.isReadOnly();
	}
	return super.isReadOnly(element);
}
	
		/**
 * @generated
 */
public boolean isModifiable(Object element) {
	if (!isStateValidated(element)) {
		if (element instanceof org.eclipse.emf.common.ui.URIEditorInput) {
			return true;
		}
	}
	ResourceSetInfo info = getResourceSetInfo(element);
	if (info != null) {
		if (info.isUpdateCache()) {
	try {
		updateCache(element);
	} catch (org.eclipse.core.runtime.CoreException ex) {
		visGrid.diagram.part.VisGridDiagramEditorPlugin.getInstance().logError(visGrid.diagram.part.Messages.VisGridDocumentProvider_isModifiable, ex);
		// Error message to log was initially taken from org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.internal.l10n.EditorMessages.StorageDocumentProvider_isModifiable
	}
}
		return info.isModifiable();
	}
	return super.isModifiable(element);
}
	
		/**
 * @generated
 */
protected void updateCache(Object element) throws org.eclipse.core.runtime.CoreException {
	ResourceSetInfo info = getResourceSetInfo(element);
	if (info != null) {
		for (java.util.Iterator<org.eclipse.emf.ecore.resource.Resource> it = info.getLoadedResourcesIterator(); it.hasNext();) {
	org.eclipse.emf.ecore.resource.Resource nextResource = it.next();
				java.io.File file = getFile(nextResource);
			if (file != null && file.exists() && !file.canWrite()) {
					info.setReadOnly(true);
				info.setModifiable(false);
				return;
			}
		}
		info.setReadOnly(false);
		info.setModifiable(true);
		return;
	}
}
	
		/**
 * @generated
 */
protected void doUpdateStateCache(Object element) throws org.eclipse.core.runtime.CoreException {
	ResourceSetInfo info = getResourceSetInfo(element);
	if (info != null) {
		info.setUpdateCache(true);
	}
	super.doUpdateStateCache(element);
}
	
		/**
 * @generated
 */
public boolean isSynchronized(Object element) {
	ResourceSetInfo info = getResourceSetInfo(element);
	if (info != null) {
		return info.isSynchronized();
	}
	return super.isSynchronized(element);
}
		
		/**
 * @generated
 */
protected void doSynchronize(Object element, org.eclipse.core.runtime.IProgressMonitor monitor) throws org.eclipse.core.runtime.CoreException {
	ResourceSetInfo info = getResourceSetInfo(element);
	if (info != null) {
		for (java.util.Iterator<org.eclipse.emf.ecore.resource.Resource> it = info.getLoadedResourcesIterator(); it.hasNext();) {
	org.eclipse.emf.ecore.resource.Resource nextResource = it.next();
			handleElementChanged(info, nextResource, monitor);	
		}
		return;
	}
	super.doSynchronize(element, monitor);
}
	
		/**
 * @generated
 */
protected void doSaveDocument(org.eclipse.core.runtime.IProgressMonitor monitor, Object element, org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument document, boolean overwrite) throws org.eclipse.core.runtime.CoreException {
	ResourceSetInfo info = getResourceSetInfo(element);
	if (info != null) {
		if (!overwrite && !info.isSynchronized()) {
			throw new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, visGrid.diagram.part.VisGridDiagramEditorPlugin.ID, 
				org.eclipse.core.runtime.IStatus.ERROR, 
				visGrid.diagram.part.Messages.VisGridDocumentProvider_UnsynchronizedFileSaveError, 
				null));
		}
			fireElementStateChanging(element);
		try {
			monitor.beginTask(visGrid.diagram.part.Messages.VisGridDocumentProvider_SaveDiagramTask, info.getResourceSet().getResources().size() + 1); //"Saving diagram"
			for (java.util.Iterator<org.eclipse.emf.ecore.resource.Resource> it = info.getLoadedResourcesIterator(); it.hasNext();) {
	org.eclipse.emf.ecore.resource.Resource nextResource = it.next();
				monitor.setTaskName(org.eclipse.osgi.util.NLS.bind(
						visGrid.diagram.part.Messages.VisGridDocumentProvider_SaveNextResourceTask, 
						nextResource.getURI()));
				if (nextResource.isLoaded() && !info.getEditingDomain().isReadOnly(nextResource)) {
					try {
						nextResource.save(visGrid.diagram.part.VisGridDiagramEditorUtil.getSaveOptions());
					} catch (java.io.IOException e) {
						fireElementStateChangeFailed(element);
						throw new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, visGrid.diagram.part.VisGridDiagramEditorPlugin.ID, org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.EditorStatusCodes.RESOURCE_FAILURE, e.getLocalizedMessage(), null));
					}
				}
				monitor.worked(1);
			}
			monitor.done();
			info.setModificationStamp(computeModificationStamp(info));
		} catch (RuntimeException x) {
			fireElementStateChangeFailed(element);
			throw x;
		} 
	} else {
		org.eclipse.emf.common.util.URI newResoruceURI;
		java.util.List<org.eclipse.core.resources.IFile> affectedFiles = null;
		if(element instanceof org.eclipse.emf.common.ui.URIEditorInput) {
			newResoruceURI = ((org.eclipse.emf.common.ui.URIEditorInput) element).getURI();
		} else {
			fireElementStateChangeFailed(element);
			throw new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, visGrid.diagram.part.VisGridDiagramEditorPlugin.ID, 0, 
		org.eclipse.osgi.util.NLS.bind(
			visGrid.diagram.part.Messages.VisGridDocumentProvider_IncorrectInputError,
			new Object[] {element, "org.eclipse.emf.common.ui.URIEditorInput"}), //$NON-NLS-1$ 
		null));
		}
		if (false == document instanceof org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument) {
			fireElementStateChangeFailed(element);
			throw new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, visGrid.diagram.part.VisGridDiagramEditorPlugin.ID, 0,
			"Incorrect document used: " + document + " instead of org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument", null)); //$NON-NLS-1$ //$NON-NLS-2$
		}
		org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument diagramDocument = (org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument) document;
		final org.eclipse.emf.ecore.resource.Resource newResource = diagramDocument.getEditingDomain().getResourceSet().createResource(newResoruceURI);
		final org.eclipse.gmf.runtime.notation.Diagram diagramCopy = (org.eclipse.gmf.runtime.notation.Diagram) org.eclipse.emf.ecore.util.EcoreUtil.copy(diagramDocument.getDiagram());
		try {
			new org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand(diagramDocument.getEditingDomain(), org.eclipse.osgi.util.NLS.bind(visGrid.diagram.part.Messages.VisGridDocumentProvider_SaveAsOperation, diagramCopy.getName()), affectedFiles) {
				protected org.eclipse.gmf.runtime.common.core.command.CommandResult doExecuteWithResult(org.eclipse.core.runtime.IProgressMonitor monitor, org.eclipse.core.runtime.IAdaptable info) throws org.eclipse.core.commands.ExecutionException {
					newResource.getContents().add(diagramCopy);					
					return org.eclipse.gmf.runtime.common.core.command.CommandResult.newOKCommandResult();
				}
			}.execute(monitor, null);
			newResource.save(visGrid.diagram.part.VisGridDiagramEditorUtil.getSaveOptions());
		} catch (org.eclipse.core.commands.ExecutionException e) {
			fireElementStateChangeFailed(element);
			throw new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, visGrid.diagram.part.VisGridDiagramEditorPlugin.ID, 0, e.getLocalizedMessage(), null));
		} catch (java.io.IOException e) {
			fireElementStateChangeFailed(element);
			throw new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, visGrid.diagram.part.VisGridDiagramEditorPlugin.ID, 0, e.getLocalizedMessage(), null));
		}
		newResource.unload();
	}
}
	
		/**
 * @generated
 */
protected void handleElementChanged(ResourceSetInfo info, org.eclipse.emf.ecore.resource.Resource changedResource, org.eclipse.core.runtime.IProgressMonitor monitor) {
		changedResource.unload();
	
	fireElementContentAboutToBeReplaced(info.getEditorInput());
	removeUnchangedElementListeners(info.getEditorInput(), info);
	info.fStatus = null;
	try {
		setDocumentContent(info.fDocument, info.getEditorInput());
	} catch (org.eclipse.core.runtime.CoreException e) {
		info.fStatus = e.getStatus();
	}
	if (!info.fCanBeSaved) {
		info.setModificationStamp(computeModificationStamp(info));
	}
	addUnchangedElementListeners(info.getEditorInput(), info);
	fireElementContentReplaced(info.getEditorInput());
}

		/**
 * @generated
 */
protected void handleElementMoved(org.eclipse.ui.IEditorInput input, org.eclipse.emf.common.util.URI uri) {
	
	// TODO: append suffix to the URI! (use diagram as a parameter)
	fireElementMoved(input, new org.eclipse.emf.common.ui.URIEditorInput(uri));
}

		/**
 * @generated
 */
public org.eclipse.ui.IEditorInput createInputWithEditingDomain(org.eclipse.ui.IEditorInput editorInput, org.eclipse.emf.transaction.TransactionalEditingDomain domain) {
	return editorInput;
}

		/**
 * @generated
 */
public org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument getDiagramDocument(Object element) {
	org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument doc = getDocument(element);
	if (doc instanceof org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument) {
		return (org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument) doc;
	}
	return null;
}
	
		/**
 * @generated
 */
protected org.eclipse.jface.operation.IRunnableContext getOperationRunner(org.eclipse.core.runtime.IProgressMonitor monitor) {
	return null;
}
	
			/**
 * @generated
 */
private static java.io.File getFile(org.eclipse.emf.ecore.resource.Resource resource) {
	org.eclipse.emf.common.util.URI resourceUri = resource.getURI();
	if (resourceUri != null && resourceUri.isFile()) {
		java.io.File file = new java.io.File(resourceUri.toFileString());
		if (!file.isDirectory()) {
			return file;
		}
	}
	return null;
}
		
		/**
 * @generated
 */	
protected class ResourceSetInfo extends ElementInfo {

		/**
 * @generated
 */
 	private long myModificationStamp = 0;

		/**
 * @generated
 */
	private org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument myDocument;

	/**
 * @generated
 */
	private org.eclipse.ui.IEditorInput myEditorInput;
		
	/**
 * @generated
 */
	private boolean myUpdateCache = true;
	
	/**
 * @generated
 */
	private boolean myModifiable = false;

	/**
 * @generated
 */
	private boolean myReadOnly = true;
	
	/**
 * @generated
 */
	private ResourceSetModificationListener myResourceSetListener;
	
		/**
 * @generated
 */
public ResourceSetInfo(org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument document, org.eclipse.ui.IEditorInput editorInput) {
	super(document);
	myDocument = document;
	myEditorInput = editorInput;
		myResourceSetListener = new ResourceSetModificationListener(this);
	getResourceSet().eAdapters().add(myResourceSetListener);
}

		/**
 * @generated
 */
public long getModificationStamp() {
	return myModificationStamp;
}

		/**
 * @generated
 */
public void setModificationStamp(long modificationStamp) {
	myModificationStamp = modificationStamp;
}
	
		/**
 * @generated
 */
public org.eclipse.emf.transaction.TransactionalEditingDomain getEditingDomain() {
	return myDocument.getEditingDomain();
}

		/**
 * @generated
 */
public org.eclipse.emf.ecore.resource.ResourceSet getResourceSet() {
	return getEditingDomain().getResourceSet();
}
	
		/**
 * @generated
 */
public java.util.Iterator<org.eclipse.emf.ecore.resource.Resource> getLoadedResourcesIterator() {
	return new java.util.ArrayList<org.eclipse.emf.ecore.resource.Resource>(getResourceSet().getResources()).iterator();
}

		/**
 * @generated
 */
public org.eclipse.ui.IEditorInput getEditorInput() {
	return myEditorInput;
}

		/**
 * @generated
 */
public void dispose() {
		getResourceSet().eAdapters().remove(myResourceSetListener);
	for (java.util.Iterator<org.eclipse.emf.ecore.resource.Resource> it = getLoadedResourcesIterator(); it.hasNext();) {
	org.eclipse.emf.ecore.resource.Resource resource = it.next();
		resource.unload();
	}
	getEditingDomain().dispose();
}

		/**
 * @generated
 */
public boolean isSynchronized() {
		return getModificationStamp() == computeModificationStamp(this);
	}

			/**
 * @generated
 */
public boolean isUpdateCache() {
	return myUpdateCache;
}
	
		/**
 * @generated
 */
public void setUpdateCache(boolean update) {
	myUpdateCache = update;
}
	
		/**
 * @generated
 */
public boolean isModifiable() {
	return myModifiable;
}
	
		/**
 * @generated
 */
public void setModifiable(boolean modifiable) {
	myModifiable = modifiable;
}
	
		/**
 * @generated
 */
public boolean isReadOnly() {
	return myReadOnly;
}
	
		/**
 * @generated
 */
public void setReadOnly(boolean readOnly) {
	myReadOnly = readOnly;
}

		}
	
		/**
 * @generated
 */	
private class ResourceSetModificationListener extends org.eclipse.emf.ecore.util.EContentAdapter {

			/**
 * @generated
 */	
		private org.eclipse.emf.transaction.NotificationFilter myModifiedFilter;

		/**
 * @generated
 */	
		private ResourceSetInfo myInfo;
	
		/**
 * @generated
 */	
public ResourceSetModificationListener(ResourceSetInfo info) {
	myInfo = info;
	myModifiedFilter = org.eclipse.emf.transaction.NotificationFilter.createEventTypeFilter(org.eclipse.emf.common.notify.Notification.SET).or(org.eclipse.emf.transaction.NotificationFilter.createEventTypeFilter(org.eclipse.emf.common.notify.Notification.UNSET)).and(org.eclipse.emf.transaction.NotificationFilter.createFeatureFilter(org.eclipse.emf.ecore.resource.Resource.class, org.eclipse.emf.ecore.resource.Resource.RESOURCE__IS_MODIFIED));
}
	
		/**
 * @generated
 */	
public void notifyChanged(org.eclipse.emf.common.notify.Notification notification) {
	if (notification.getNotifier() instanceof org.eclipse.emf.ecore.resource.ResourceSet) {
		super.notifyChanged(notification);
	}
	if (!notification.isTouch() && myModifiedFilter.matches(notification)) {
		if (notification.getNotifier() instanceof org.eclipse.emf.ecore.resource.Resource) {
			org.eclipse.emf.ecore.resource.Resource resource = (org.eclipse.emf.ecore.resource.Resource) notification.getNotifier();
			if (resource.isLoaded()) {
				boolean modified = false;
				for (java.util.Iterator/*<org.eclipse.emf.ecore.resource.Resource>*/ it = myInfo.getLoadedResourcesIterator(); it.hasNext() && !modified;) {
					org.eclipse.emf.ecore.resource.Resource nextResource = (org.eclipse.emf.ecore.resource.Resource) it.next();
					if (nextResource.isLoaded()) {
						modified = nextResource.isModified();
					}
				}
				boolean dirtyStateChanged = false;
				synchronized (myInfo) {
					if (modified != myInfo.fCanBeSaved) {
						myInfo.fCanBeSaved = modified;
						dirtyStateChanged = true;
					}
					}
				if (dirtyStateChanged) {
					fireElementDirtyStateChanged(myInfo.getEditorInput(), modified);
	
					if (!modified) {
						myInfo.setModificationStamp(computeModificationStamp(myInfo));
					}
				}
			}
		}
	}
}

	}

	}
